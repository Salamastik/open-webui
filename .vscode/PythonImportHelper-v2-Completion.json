[
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "peewee",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "peewee",
        "description": "peewee",
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "InterfaceError",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "PostgresqlDatabase",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Migrator",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "Router",
        "importPath": "peewee_migrate",
        "description": "peewee_migrate",
        "isExtraImport": true,
        "detail": "peewee_migrate",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "parse_ollama_modelfile",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "parse_duration",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "validate_email_format",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "calculate_sha256",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "convert_logit_bias_input_to_json",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "calculate_sha256_string",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_gravatar_url",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "deep_update",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_message_list",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_system_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_user_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_user_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_assistant_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "prepend_to_first_user_message_content",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "convert_logit_bias_input_to_json",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "parse_duration",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "deep_update",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_system_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_chunk_message_template",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_completion_message_template",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_user_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_messages_content",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_system_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_user_message",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "prepend_to_first_user_message_content",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_chunk_message_template",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_completion_message_template",
        "importPath": "open_webui.utils.misc",
        "description": "open_webui.utils.misc",
        "isExtraImport": true,
        "detail": "open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_type_hints",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_args",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_origin",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "register_connection",
        "importPath": "open_webui.internal.wrappers",
        "description": "open_webui.internal.wrappers",
        "isExtraImport": true,
        "detail": "open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "OPEN_WEBUI_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_SCHEMA",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_MAX_OVERFLOW",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_RECYCLE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_SIZE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_TIMEOUT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OFFLINE_MODE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENV",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DEVICE_TYPE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_NAME_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_GROUPS_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SAME_SITE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SECURE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_SIGNOUT_REDIRECT_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENV",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENV",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DEVICE_TYPE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DOCKER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_BACKEND",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_MODEL_KWARGS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_WEBSOCKET_SUPPORT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_MANAGER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_REDIS_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_REDIS_LOCK_TIMEOUT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_SENTINEL_PORT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_SENTINEL_HOSTS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_SERVICE_NAME",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_EXPORTER_OTLP_ENDPOINT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "MAX_BODY_LOG_SIZE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SECRET_KEY",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "TRUSTED_SIGNATURE_KEY",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_FILE_ROTATION_SIZE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOGS_FILE_PATH",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_REALTIME_CHAT_SAVE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_NAME",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SAME_SITE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SECURE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "FONTS_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "PIP_OPTIONS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "PIP_PACKAGE_INDEX_OPTIONS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_TOOL_SERVER_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENV",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_HOSTS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_PORT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "FRONTEND_BUILD_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OFFLINE_MODE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OPEN_WEBUI_DIR",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_FAVICON_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_NAME",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_EXCLUDED_PATHS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "CHANGELOG",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_HOSTS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_PORT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "MAX_BODY_LOG_SIZE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SAFE_MODE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "INSTANCE_ID",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_BUILD_HASH",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SECRET_KEY",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SESSION_COOKIE_SAME_SITE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SESSION_COOKIE_SECURE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_NAME_HEADER",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_SIGNOUT_REDIRECT_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_WEBSOCKET_SUPPORT",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "RESET_CONFIG_ON_START",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "OFFLINE_MODE",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_OTEL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_PWA_MANIFEST_URL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "importPath": "open_webui.env",
        "description": "open_webui.env",
        "isExtraImport": true,
        "detail": "open_webui.env",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Dialect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Inspector",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "PrimaryKeyConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "values",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "QueuePool",
        "importPath": "sqlalchemy.pool",
        "description": "sqlalchemy.pool",
        "isExtraImport": true,
        "detail": "sqlalchemy.pool",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy.pool",
        "description": "sqlalchemy.pool",
        "isExtraImport": true,
        "detail": "sqlalchemy.pool",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy.pool",
        "description": "sqlalchemy.pool",
        "isExtraImport": true,
        "detail": "sqlalchemy.pool",
        "documentation": {}
    },
    {
        "label": "_T",
        "importPath": "sqlalchemy.sql.type_api",
        "description": "sqlalchemy.sql.type_api",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.type_api",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ContextVar",
        "importPath": "contextvars",
        "description": "contextvars",
        "isExtraImport": true,
        "detail": "contextvars",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "playhouse.db_url",
        "description": "playhouse.db_url",
        "isExtraImport": true,
        "detail": "playhouse.db_url",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "playhouse.db_url",
        "description": "playhouse.db_url",
        "isExtraImport": true,
        "detail": "playhouse.db_url",
        "documentation": {}
    },
    {
        "label": "ReconnectMixin",
        "importPath": "playhouse.shortcuts",
        "description": "playhouse.shortcuts",
        "isExtraImport": true,
        "detail": "playhouse.shortcuts",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "true",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "Inspector",
        "importPath": "sqlalchemy.engine.reflection",
        "description": "sqlalchemy.engine.reflection",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.reflection",
        "documentation": {}
    },
    {
        "label": "Inspector",
        "importPath": "sqlalchemy.engine.reflection",
        "description": "sqlalchemy.engine.reflection",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.reflection",
        "documentation": {}
    },
    {
        "label": "open_webui.internal.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "open_webui.internal.db",
        "description": "open_webui.internal.db",
        "isExtraImport": true,
        "detail": "open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_existing_tables",
        "importPath": "open_webui.migrations.util",
        "description": "open_webui.migrations.util",
        "isExtraImport": true,
        "detail": "open_webui.migrations.util",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Auth",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "AddUserForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Auths",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "LdapForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SigninForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SigninResponse",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UpdatePasswordForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UpdateProfileForm",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Auths",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Auths",
        "importPath": "open_webui.models.auths",
        "description": "open_webui.models.auths",
        "isExtraImport": true,
        "detail": "open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserNameResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserListResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserRoleUpdateForm",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserSettings",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserUpdateForm",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserNameResponse",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "open_webui.models.users",
        "description": "open_webui.models.users",
        "isExtraImport": true,
        "detail": "open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_api_key",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_token",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_http_authorization_cred",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_http_authorization_cred",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_token",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_license_data",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_http_authorization_cred",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "importPath": "open_webui.utils.auth",
        "description": "open_webui.utils.auth",
        "isExtraImport": true,
        "detail": "open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_users_with_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "importPath": "open_webui.utils.access_control",
        "description": "open_webui.utils.access_control",
        "isExtraImport": true,
        "detail": "open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tags",
        "importPath": "open_webui.models.tags",
        "description": "open_webui.models.tags",
        "isExtraImport": true,
        "detail": "open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatForm",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatImportForm",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatResponse",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleIdResponse",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleMessagesForm",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleMessagesForm",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "importPath": "open_webui.models.chats",
        "description": "open_webui.models.chats",
        "isExtraImport": true,
        "detail": "open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "FileMetadataResponse",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileMetadataResponse",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Files",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileForm",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModelResponse",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Files",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Files",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileMetadataResponse",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Files",
        "importPath": "open_webui.models.files",
        "description": "open_webui.models.files",
        "isExtraImport": true,
        "detail": "open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "sqlite",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupForm",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupUpdateForm",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupResponse",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupModel",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupUpdateForm",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupForm",
        "importPath": "open_webui.models.groups",
        "description": "open_webui.models.groups",
        "isExtraImport": true,
        "detail": "open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "PreparedRequest",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "BaseDocumentCompressor",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "applications",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseLoader",
        "importPath": "langchain_core.document_loaders",
        "description": "langchain_core.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_core.document_loaders",
        "documentation": {}
    },
    {
        "label": "BaseLoader",
        "importPath": "langchain_core.document_loaders",
        "description": "langchain_core.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_core.document_loaders",
        "documentation": {}
    },
    {
        "label": "BaseLoader",
        "importPath": "langchain_core.document_loaders",
        "description": "langchain_core.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_core.document_loaders",
        "documentation": {}
    },
    {
        "label": "ftfy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ftfy",
        "description": "ftfy",
        "detail": "ftfy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AzureAIDocumentIntelligenceLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "BSHTMLLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "CSVLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "Docx2txtLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "OutlookMessageLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "PyPDFLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "TextLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredEPubLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredExcelLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredMarkdownLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredPowerPointLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredRSTLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "UnstructuredXMLLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "YoutubeLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "PlaywrightURLLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "WebBaseLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "ExternalDocumentLoader",
        "importPath": "open_webui.retrieval.loaders.external_document",
        "description": "open_webui.retrieval.loaders.external_document",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.external_document",
        "documentation": {}
    },
    {
        "label": "MistralLoader",
        "importPath": "open_webui.retrieval.loaders.mistral",
        "description": "open_webui.retrieval.loaders.mistral",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.mistral",
        "documentation": {}
    },
    {
        "label": "DatalabMarkerLoader",
        "importPath": "open_webui.retrieval.loaders.datalab_marker",
        "description": "open_webui.retrieval.loaders.datalab_marker",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.datalab_marker",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientSession",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "TraceRequestStartParams",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "TraceRequestEndParams",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "TraceRequestExceptionParams",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ColBERTConfig",
        "importPath": "colbert.infra",
        "description": "colbert.infra",
        "isExtraImport": true,
        "detail": "colbert.infra",
        "documentation": {}
    },
    {
        "label": "Checkpoint",
        "importPath": "colbert.modeling.checkpoint",
        "description": "colbert.modeling.checkpoint",
        "isExtraImport": true,
        "detail": "colbert.modeling.checkpoint",
        "documentation": {}
    },
    {
        "label": "BaseReranker",
        "importPath": "open_webui.retrieval.models.base_reranker",
        "description": "open_webui.retrieval.models.base_reranker",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.models.base_reranker",
        "documentation": {}
    },
    {
        "label": "BaseReranker",
        "importPath": "open_webui.retrieval.models.base_reranker",
        "description": "open_webui.retrieval.models.base_reranker",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.models.base_reranker",
        "documentation": {}
    },
    {
        "label": "chromadb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chromadb",
        "description": "chromadb",
        "detail": "chromadb",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "chromadb",
        "description": "chromadb",
        "isExtraImport": true,
        "detail": "chromadb",
        "documentation": {}
    },
    {
        "label": "create_batches",
        "importPath": "chromadb.utils.batch_utils",
        "description": "chromadb.utils.batch_utils",
        "isExtraImport": true,
        "detail": "chromadb.utils.batch_utils",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "importPath": "open_webui.retrieval.vector.main",
        "description": "open_webui.retrieval.vector.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "CHROMA_DATA_PATH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_HTTP_HOST",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_HTTP_PORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_HTTP_HEADERS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_HTTP_SSL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_TENANT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_DATABASE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_CLIENT_AUTH_PROVIDER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_CLIENT_AUTH_CREDENTIALS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_CA_CERTS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_USERNAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_PASSWORD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_CLOUD_ID",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_INDEX_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "SSL_ASSERT_FINGERPRINT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_URI",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_DB",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_TOKEN",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_INDEX_TYPE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_METRIC_TYPE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_HNSW_M",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_HNSW_EFCONSTRUCTION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_IVF_FLAT_NLIST",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_URI",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_SSL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_CERT_VERIFY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_USERNAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_PASSWORD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_DB_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_PGCRYPTO",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_PGCRYPTO_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_ENVIRONMENT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_INDEX_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_DIMENSION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_METRIC",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_CLOUD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_URI",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_ON_DISK",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_GRPC_PORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_PREFER_GRPC",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_GRPC_PORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_ON_DISK",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_PREFER_GRPC",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_URI",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_QDRANT_MULTITENANCY_MODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_RAG_LOCAL_WEB_FETCH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_WS_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_TIMEOUT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_LOADER_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "TAVILY_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "TAVILY_EXTRACT_DEPTH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_LOADER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_LOADER_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_QUERY_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_CONTENT_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_PREFIX_FIELD_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_LANGUAGE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENID_PROVIDER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_SIGNUP",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_LDAP",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_CHAT_ACCESS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_EXPORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_CHAT_ACCESS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_EXPORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "get_config",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "save_config",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "BannerModel",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_CHAT_ACCESS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_EXPORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENV",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOCALE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_CONTENT_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_QUERY_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TITLE_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FOLLOW_UP_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TAGS_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_QUERY_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EMOJI_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MOA_GENERATION_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_EXPORT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ACCESS_KEY_ID",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_BUCKET_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ENDPOINT_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_KEY_PREFIX",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_REGION_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_SECRET_ACCESS_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_USE_ACCELERATE_ENDPOINT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ADDRESSING_STYLE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ENABLE_TAGGING",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "GCS_BUCKET_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_APPLICATION_CREDENTIALS_JSON",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_ENDPOINT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_CONTAINER_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "STORAGE_PROVIDER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_PERMISSIONS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CODE_INTERPRETER_PROMPT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ARENA_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_ROLE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_SIGNUP",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_MERGE_ACCOUNTS_BY_EMAIL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_PROVIDERS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_ROLE_MANAGEMENT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_GROUP_MANAGEMENT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_GROUP_CREATION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_BLOCKED_GROUPS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ROLES_CLAIM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_GROUPS_CLAIM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_EMAIL_CLAIM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_PICTURE_CLAIM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_USERNAME_CLAIM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ALLOWED_ROLES",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ADMIN_ROLES",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ALLOWED_DOMAINS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_UPDATE_PICTURE_ON_LOGIN",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "JWT_EXPIRES_IN",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RAG_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEBUI_FAVICON_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "LICENSE_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Ollama\n    ENABLE_OLLAMA_API",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URLS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_API_CONFIGS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# OpenAI\n    ENABLE_OPENAI_API",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_CLIENT_ID",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_SHAREPOINT_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_SHAREPOINT_TENANT_ID",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URLS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEYS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_CONFIGS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Direct Connections\n    ENABLE_DIRECT_CONNECTIONS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Thread pool size for FastAPI/AnyIO\n    THREAD_POOL_SIZE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Tool Server Configs\n    TOOL_SERVER_CONNECTIONS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Code Execution\n    ENABLE_CODE_EXECUTION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH_TOKEN",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH_PASSWORD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_TIMEOUT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_CODE_INTERPRETER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_PROMPT_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH_TOKEN",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_TIMEOUT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Image\n    AUTOMATIC1111_API_AUTH",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_CFG_SCALE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_SAMPLER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_SCHEDULER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_WORKFLOW",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_WORKFLOW_NODES",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_IMAGE_GENERATION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_IMAGE_PROMPT_GENERATION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_GENERATION_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_GENERATION_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_SIZE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_STEPS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_OPENAI_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_OPENAI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_GEMINI_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_GEMINI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Audio\n    AUDIO_STT_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_OPENAI_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_OPENAI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_REGION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_LOCALES",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_MAX_SPEAKERS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_OPENAI_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_OPENAI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_SPLIT_ON",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_VOICE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_REGION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_WS_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_TIMEOUT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_LOADER_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_VAD_FILTER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_LANGUAGE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEEPGRAM_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_DIR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Retrieval\n    RAG_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RAG_TEMPLATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FULL_CONTEXT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "BYPASS_EMBEDDING_AND_RETRIEVAL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EXTERNAL_RERANKER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EXTERNAL_RERANKER_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_AUTO_UPDATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_BATCH_SIZE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TOP_K",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TOP_K_RERANKER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RELEVANCE_THRESHOLD",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_HYBRID_BM25_WEIGHT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_ALLOWED_FILE_EXTENSIONS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FILE_MAX_COUNT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FILE_MAX_SIZE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OPENAI_API_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OPENAI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_API_VERSION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OLLAMA_BASE_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OLLAMA_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHUNK_OVERLAP",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHUNK_SIZE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "CONTENT_EXTRACTION_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_LANGS",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_SKIP_CACHE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_FORCE_OCR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_PAGINATE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_STRIP_EXISTING_OCR",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_OUTPUT_FORMAT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_USE_LLM",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DOCUMENT_LOADER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DOCUMENT_LOADER_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "TIKA_SERVER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_SERVER_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_OCR_ENGINE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_OCR_LANG",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_DO_PICTURE_DESCRIPTION",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_MODE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_LOCAL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_API",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENT_INTELLIGENCE_ENDPOINT",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENT_INTELLIGENCE_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "MISTRAL_OCR_API_KEY",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TEXT_SPLITTER",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "TIKTOKEN_ENCODING_NAME",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "PDF_EXTRACT_IMAGES",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "YOUTUBE_LOADER_LANGUAGE",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "YOUTUBE_LOADER_PROXY_URL",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "# Retrieval Web Search",
        "importPath": "open_webui.config",
        "description": "open_webui.config",
        "isExtraImport": true,
        "detail": "open_webui.config",
        "documentation": {}
    },
    {
        "label": "Elasticsearch",
        "importPath": "elasticsearch",
        "description": "elasticsearch",
        "isExtraImport": true,
        "detail": "elasticsearch",
        "documentation": {}
    },
    {
        "label": "BadRequestError",
        "importPath": "elasticsearch",
        "description": "elasticsearch",
        "isExtraImport": true,
        "detail": "elasticsearch",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "CERT_NONE",
        "importPath": "ssl",
        "description": "ssl",
        "isExtraImport": true,
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "CERT_REQUIRED",
        "importPath": "ssl",
        "description": "ssl",
        "isExtraImport": true,
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "PROTOCOL_TLS",
        "importPath": "ssl",
        "description": "ssl",
        "isExtraImport": true,
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "bulk",
        "importPath": "elasticsearch.helpers",
        "description": "elasticsearch.helpers",
        "isExtraImport": true,
        "detail": "elasticsearch.helpers",
        "documentation": {}
    },
    {
        "label": "scan",
        "importPath": "elasticsearch.helpers",
        "description": "elasticsearch.helpers",
        "isExtraImport": true,
        "detail": "elasticsearch.helpers",
        "documentation": {}
    },
    {
        "label": "MilvusClient",
        "importPath": "pymilvus",
        "description": "pymilvus",
        "isExtraImport": true,
        "detail": "pymilvus",
        "documentation": {}
    },
    {
        "label": "FieldSchema",
        "importPath": "pymilvus",
        "description": "pymilvus",
        "isExtraImport": true,
        "detail": "pymilvus",
        "documentation": {}
    },
    {
        "label": "DataType",
        "importPath": "pymilvus",
        "description": "pymilvus",
        "isExtraImport": true,
        "detail": "pymilvus",
        "documentation": {}
    },
    {
        "label": "OpenSearch",
        "importPath": "opensearchpy",
        "description": "opensearchpy",
        "isExtraImport": true,
        "detail": "opensearchpy",
        "documentation": {}
    },
    {
        "label": "bulk",
        "importPath": "opensearchpy.helpers",
        "description": "opensearchpy.helpers",
        "isExtraImport": true,
        "detail": "opensearchpy.helpers",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "Vector",
        "importPath": "pgvector.sqlalchemy",
        "description": "pgvector.sqlalchemy",
        "isExtraImport": true,
        "detail": "pgvector.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MutableDict",
        "importPath": "sqlalchemy.ext.mutable",
        "description": "sqlalchemy.ext.mutable",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.mutable",
        "documentation": {}
    },
    {
        "label": "NoSuchTableError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Pinecone",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "ServerlessSpec",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "QdrantClient",
        "importPath": "qdrant_client",
        "description": "qdrant_client",
        "isExtraImport": true,
        "detail": "qdrant_client",
        "documentation": {}
    },
    {
        "label": "QdrantClient",
        "importPath": "qdrant_client",
        "description": "qdrant_client",
        "isExtraImport": true,
        "detail": "qdrant_client",
        "documentation": {}
    },
    {
        "label": "PointStruct",
        "importPath": "qdrant_client.http.models",
        "description": "qdrant_client.http.models",
        "isExtraImport": true,
        "detail": "qdrant_client.http.models",
        "documentation": {}
    },
    {
        "label": "PointStruct",
        "importPath": "qdrant_client.http.models",
        "description": "qdrant_client.http.models",
        "isExtraImport": true,
        "detail": "qdrant_client.http.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "qdrant_client.models",
        "description": "qdrant_client.models",
        "isExtraImport": true,
        "detail": "qdrant_client.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "qdrant_client.models",
        "description": "qdrant_client.models",
        "isExtraImport": true,
        "detail": "qdrant_client.models",
        "documentation": {}
    },
    {
        "label": "grpc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grpc",
        "description": "grpc",
        "detail": "grpc",
        "documentation": {}
    },
    {
        "label": "UnexpectedResponse",
        "importPath": "qdrant_client.http.exceptions",
        "description": "qdrant_client.http.exceptions",
        "isExtraImport": true,
        "detail": "qdrant_client.http.exceptions",
        "documentation": {}
    },
    {
        "label": "VectorType",
        "importPath": "open_webui.retrieval.vector.type",
        "description": "open_webui.retrieval.vector.type",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.type",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "importPath": "open_webui.retrieval.web.main",
        "description": "open_webui.retrieval.web.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "DDGS",
        "importPath": "duckduckgo_search",
        "description": "duckduckgo_search",
        "isExtraImport": true,
        "detail": "duckduckgo_search",
        "documentation": {}
    },
    {
        "label": "RatelimitException",
        "importPath": "duckduckgo_search.exceptions",
        "description": "duckduckgo_search.exceptions",
        "isExtraImport": true,
        "detail": "duckduckgo_search.exceptions",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "yarl",
        "description": "yarl",
        "isExtraImport": true,
        "detail": "yarl",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "validators",
        "description": "validators",
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "FireCrawlLoader",
        "importPath": "langchain_community.document_loaders.firecrawl",
        "description": "langchain_community.document_loaders.firecrawl",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders.firecrawl",
        "documentation": {}
    },
    {
        "label": "BaseLoader",
        "importPath": "langchain_community.document_loaders.base",
        "description": "langchain_community.document_loaders.base",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders.base",
        "documentation": {}
    },
    {
        "label": "TavilyLoader",
        "importPath": "open_webui.retrieval.loaders.tavily",
        "description": "open_webui.retrieval.loaders.tavily",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.tavily",
        "documentation": {}
    },
    {
        "label": "ExternalWebLoader",
        "importPath": "open_webui.retrieval.loaders.external_web",
        "description": "open_webui.retrieval.loaders.external_web",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.external_web",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "TASKS",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "TASKS",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "importPath": "open_webui.constants",
        "description": "open_webui.constants",
        "isExtraImport": true,
        "detail": "open_webui.constants",
        "documentation": {}
    },
    {
        "label": "HTTPDigestAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "snapshot_download",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "ContextualCompressionRetriever",
        "importPath": "langchain.retrievers",
        "description": "langchain.retrievers",
        "isExtraImport": true,
        "detail": "langchain.retrievers",
        "documentation": {}
    },
    {
        "label": "EnsembleRetriever",
        "importPath": "langchain.retrievers",
        "description": "langchain.retrievers",
        "isExtraImport": true,
        "detail": "langchain.retrievers",
        "documentation": {}
    },
    {
        "label": "BM25Retriever",
        "importPath": "langchain_community.retrievers",
        "description": "langchain_community.retrievers",
        "isExtraImport": true,
        "detail": "langchain_community.retrievers",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB_CLIENT",
        "importPath": "open_webui.retrieval.vector.factory",
        "description": "open_webui.retrieval.vector.factory",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB_CLIENT",
        "importPath": "open_webui.retrieval.vector.factory",
        "description": "open_webui.retrieval.vector.factory",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB_CLIENT",
        "importPath": "open_webui.retrieval.vector.factory",
        "description": "open_webui.retrieval.vector.factory",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB_CLIENT",
        "importPath": "open_webui.retrieval.vector.factory",
        "description": "open_webui.retrieval.vector.factory",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "CallbackManagerForRetrieverRun",
        "importPath": "langchain_core.callbacks",
        "description": "langchain_core.callbacks",
        "isExtraImport": true,
        "detail": "langchain_core.callbacks",
        "documentation": {}
    },
    {
        "label": "Callbacks",
        "importPath": "langchain_core.callbacks",
        "description": "langchain_core.callbacks",
        "isExtraImport": true,
        "detail": "langchain_core.callbacks",
        "documentation": {}
    },
    {
        "label": "BaseRetriever",
        "importPath": "langchain_core.retrievers",
        "description": "langchain_core.retrievers",
        "isExtraImport": true,
        "detail": "langchain_core.retrievers",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "split_on_silence",
        "importPath": "pydub.silence",
        "description": "pydub.silence",
        "isExtraImport": true,
        "detail": "pydub.silence",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "mediainfo",
        "importPath": "pydub.utils",
        "description": "pydub.utils",
        "isExtraImport": true,
        "detail": "pydub.utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "post_webhook",
        "importPath": "open_webui.utils.webhook",
        "description": "open_webui.utils.webhook",
        "isExtraImport": true,
        "detail": "open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "post_webhook",
        "importPath": "open_webui.utils.webhook",
        "description": "open_webui.utils.webhook",
        "isExtraImport": true,
        "detail": "open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "post_webhook",
        "importPath": "open_webui.utils.webhook",
        "description": "open_webui.utils.webhook",
        "isExtraImport": true,
        "detail": "open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "post_webhook",
        "importPath": "open_webui.utils.webhook",
        "description": "open_webui.utils.webhook",
        "isExtraImport": true,
        "detail": "open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "sio",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_user_ids_from_room",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_emitter",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_active_status_by_user_id",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "sio",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_call",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_emitter",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_call",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_emitter",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_active_status_by_user_id",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_call",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_emitter",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "periodic_usage_pool_cleanup",
        "importPath": "open_webui.socket.main",
        "description": "open_webui.socket.main",
        "isExtraImport": true,
        "detail": "open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "Channels",
        "importPath": "open_webui.models.channels",
        "description": "open_webui.models.channels",
        "isExtraImport": true,
        "detail": "open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "ChannelModel",
        "importPath": "open_webui.models.channels",
        "description": "open_webui.models.channels",
        "isExtraImport": true,
        "detail": "open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "ChannelForm",
        "importPath": "open_webui.models.channels",
        "description": "open_webui.models.channels",
        "isExtraImport": true,
        "detail": "open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "Channels",
        "importPath": "open_webui.models.channels",
        "description": "open_webui.models.channels",
        "isExtraImport": true,
        "detail": "open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "Messages",
        "importPath": "open_webui.models.messages",
        "description": "open_webui.models.messages",
        "isExtraImport": true,
        "detail": "open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageModel",
        "importPath": "open_webui.models.messages",
        "description": "open_webui.models.messages",
        "isExtraImport": true,
        "detail": "open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "importPath": "open_webui.models.messages",
        "description": "open_webui.models.messages",
        "isExtraImport": true,
        "detail": "open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageForm",
        "importPath": "open_webui.models.messages",
        "description": "open_webui.models.messages",
        "isExtraImport": true,
        "detail": "open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "Folders",
        "importPath": "open_webui.models.folders",
        "description": "open_webui.models.folders",
        "isExtraImport": true,
        "detail": "open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "FolderForm",
        "importPath": "open_webui.models.folders",
        "description": "open_webui.models.folders",
        "isExtraImport": true,
        "detail": "open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "FolderModel",
        "importPath": "open_webui.models.folders",
        "description": "open_webui.models.folders",
        "isExtraImport": true,
        "detail": "open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "Folders",
        "importPath": "open_webui.models.folders",
        "description": "open_webui.models.folders",
        "isExtraImport": true,
        "detail": "open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "get_tool_server_data",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tool_servers_data",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tool_specs",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tool_servers_data",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "importPath": "open_webui.utils.tools",
        "description": "open_webui.utils.tools",
        "isExtraImport": true,
        "detail": "open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "FeedbackModel",
        "importPath": "open_webui.models.feedbacks",
        "description": "open_webui.models.feedbacks",
        "isExtraImport": true,
        "detail": "open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackResponse",
        "importPath": "open_webui.models.feedbacks",
        "description": "open_webui.models.feedbacks",
        "isExtraImport": true,
        "detail": "open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackForm",
        "importPath": "open_webui.models.feedbacks",
        "description": "open_webui.models.feedbacks",
        "isExtraImport": true,
        "detail": "open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "Feedbacks",
        "importPath": "open_webui.models.feedbacks",
        "description": "open_webui.models.feedbacks",
        "isExtraImport": true,
        "detail": "open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "Knowledges",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "Knowledges",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeForm",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeResponse",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeUserResponse",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "Knowledges",
        "importPath": "open_webui.models.knowledge",
        "description": "open_webui.models.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "get_knowledge",
        "importPath": "open_webui.routers.knowledge",
        "description": "open_webui.routers.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "get_knowledge_list",
        "importPath": "open_webui.routers.knowledge",
        "description": "open_webui.routers.knowledge",
        "isExtraImport": true,
        "detail": "open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "ProcessFileForm",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_file",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_file",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "ProcessFileForm",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_files_batch",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "BatchProcessFilesForm",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_web_search",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "SearchForm",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "get_embedding_function",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "get_ef",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "get_rf",
        "importPath": "open_webui.routers.retrieval",
        "description": "open_webui.routers.retrieval",
        "isExtraImport": true,
        "detail": "open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "transcribe",
        "importPath": "open_webui.routers.audio",
        "description": "open_webui.routers.audio",
        "isExtraImport": true,
        "detail": "open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "Storage",
        "importPath": "open_webui.storage.provider",
        "description": "open_webui.storage.provider",
        "isExtraImport": true,
        "detail": "open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "Storage",
        "importPath": "open_webui.storage.provider",
        "description": "open_webui.storage.provider",
        "isExtraImport": true,
        "detail": "open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "Storage",
        "importPath": "open_webui.storage.provider",
        "description": "open_webui.storage.provider",
        "isExtraImport": true,
        "detail": "open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "FunctionForm",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionModel",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionResponse",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "importPath": "open_webui.models.functions",
        "description": "open_webui.models.functions",
        "isExtraImport": true,
        "detail": "open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "replace_imports",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_tool_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "replace_imports",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_tool_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "install_tool_and_function_dependencies",
        "importPath": "open_webui.utils.plugin",
        "description": "open_webui.utils.plugin",
        "isExtraImport": true,
        "detail": "open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "importPath": "open_webui.routers.files",
        "description": "open_webui.routers.files",
        "isExtraImport": true,
        "detail": "open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "ComfyUIGenerateImageForm",
        "importPath": "open_webui.utils.images.comfyui",
        "description": "open_webui.utils.images.comfyui",
        "isExtraImport": true,
        "detail": "open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "ComfyUIWorkflow",
        "importPath": "open_webui.utils.images.comfyui",
        "description": "open_webui.utils.images.comfyui",
        "isExtraImport": true,
        "detail": "open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "comfyui_generate_image",
        "importPath": "open_webui.utils.images.comfyui",
        "description": "open_webui.utils.images.comfyui",
        "isExtraImport": true,
        "detail": "open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelModel",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelResponse",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelUserResponse",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "importPath": "open_webui.models.models",
        "description": "open_webui.models.models",
        "isExtraImport": true,
        "detail": "open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Memories",
        "importPath": "open_webui.models.memories",
        "description": "open_webui.models.memories",
        "isExtraImport": true,
        "detail": "open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "MemoryModel",
        "importPath": "open_webui.models.memories",
        "description": "open_webui.models.memories",
        "isExtraImport": true,
        "detail": "open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "Notes",
        "importPath": "open_webui.models.notes",
        "description": "open_webui.models.notes",
        "isExtraImport": true,
        "detail": "open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteModel",
        "importPath": "open_webui.models.notes",
        "description": "open_webui.models.notes",
        "isExtraImport": true,
        "detail": "open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteForm",
        "importPath": "open_webui.models.notes",
        "description": "open_webui.models.notes",
        "isExtraImport": true,
        "detail": "open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteUserResponse",
        "importPath": "open_webui.models.notes",
        "description": "open_webui.models.notes",
        "isExtraImport": true,
        "detail": "open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "cached",
        "importPath": "aiocache",
        "description": "aiocache",
        "isExtraImport": true,
        "detail": "aiocache",
        "documentation": {}
    },
    {
        "label": "BackgroundTask",
        "importPath": "starlette.background",
        "description": "starlette.background",
        "isExtraImport": true,
        "detail": "starlette.background",
        "documentation": {}
    },
    {
        "label": "BackgroundTask",
        "importPath": "starlette.background",
        "description": "starlette.background",
        "isExtraImport": true,
        "detail": "starlette.background",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_ollama",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_openai",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_system_prompt_to_body",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_openai",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_system_prompt_to_body",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "convert_payload_openai_to_ollama",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "convert_embedding_payload_openai_to_ollama",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_openai",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_system_prompt_to_body",
        "importPath": "open_webui.utils.payload",
        "description": "open_webui.utils.payload",
        "isExtraImport": true,
        "detail": "open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "get_all_models_responses",
        "importPath": "open_webui.routers.openai",
        "description": "open_webui.routers.openai",
        "isExtraImport": true,
        "detail": "open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "importPath": "open_webui.routers.openai",
        "description": "open_webui.routers.openai",
        "isExtraImport": true,
        "detail": "open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "importPath": "open_webui.routers.openai",
        "description": "open_webui.routers.openai",
        "isExtraImport": true,
        "detail": "open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "PromptForm",
        "importPath": "open_webui.models.prompts",
        "description": "open_webui.models.prompts",
        "isExtraImport": true,
        "detail": "open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptUserResponse",
        "importPath": "open_webui.models.prompts",
        "description": "open_webui.models.prompts",
        "isExtraImport": true,
        "detail": "open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptModel",
        "importPath": "open_webui.models.prompts",
        "description": "open_webui.models.prompts",
        "isExtraImport": true,
        "detail": "open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "importPath": "open_webui.models.prompts",
        "description": "open_webui.models.prompts",
        "isExtraImport": true,
        "detail": "open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "run_in_threadpool",
        "importPath": "fastapi.concurrency",
        "description": "fastapi.concurrency",
        "isExtraImport": true,
        "detail": "fastapi.concurrency",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "TokenTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "Loader",
        "importPath": "open_webui.retrieval.loaders.main",
        "description": "open_webui.retrieval.loaders.main",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "YoutubeLoader",
        "importPath": "open_webui.retrieval.loaders.youtube",
        "description": "open_webui.retrieval.loaders.youtube",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.loaders.youtube",
        "documentation": {}
    },
    {
        "label": "get_web_loader",
        "importPath": "open_webui.retrieval.web.utils",
        "description": "open_webui.retrieval.web.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "search_brave",
        "importPath": "open_webui.retrieval.web.brave",
        "description": "open_webui.retrieval.web.brave",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.brave",
        "documentation": {}
    },
    {
        "label": "search_kagi",
        "importPath": "open_webui.retrieval.web.kagi",
        "description": "open_webui.retrieval.web.kagi",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.kagi",
        "documentation": {}
    },
    {
        "label": "search_mojeek",
        "importPath": "open_webui.retrieval.web.mojeek",
        "description": "open_webui.retrieval.web.mojeek",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.mojeek",
        "documentation": {}
    },
    {
        "label": "search_bocha",
        "importPath": "open_webui.retrieval.web.bocha",
        "description": "open_webui.retrieval.web.bocha",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.bocha",
        "documentation": {}
    },
    {
        "label": "search_duckduckgo",
        "importPath": "open_webui.retrieval.web.duckduckgo",
        "description": "open_webui.retrieval.web.duckduckgo",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.duckduckgo",
        "documentation": {}
    },
    {
        "label": "search_google_pse",
        "importPath": "open_webui.retrieval.web.google_pse",
        "description": "open_webui.retrieval.web.google_pse",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.google_pse",
        "documentation": {}
    },
    {
        "label": "search_jina",
        "importPath": "open_webui.retrieval.web.jina_search",
        "description": "open_webui.retrieval.web.jina_search",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.jina_search",
        "documentation": {}
    },
    {
        "label": "search_searchapi",
        "importPath": "open_webui.retrieval.web.searchapi",
        "description": "open_webui.retrieval.web.searchapi",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.searchapi",
        "documentation": {}
    },
    {
        "label": "search_serpapi",
        "importPath": "open_webui.retrieval.web.serpapi",
        "description": "open_webui.retrieval.web.serpapi",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.serpapi",
        "documentation": {}
    },
    {
        "label": "search_searxng",
        "importPath": "open_webui.retrieval.web.searxng",
        "description": "open_webui.retrieval.web.searxng",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.searxng",
        "documentation": {}
    },
    {
        "label": "search_yacy",
        "importPath": "open_webui.retrieval.web.yacy",
        "description": "open_webui.retrieval.web.yacy",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.yacy",
        "documentation": {}
    },
    {
        "label": "search_serper",
        "importPath": "open_webui.retrieval.web.serper",
        "description": "open_webui.retrieval.web.serper",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.serper",
        "documentation": {}
    },
    {
        "label": "search_serply",
        "importPath": "open_webui.retrieval.web.serply",
        "description": "open_webui.retrieval.web.serply",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.serply",
        "documentation": {}
    },
    {
        "label": "search_serpstack",
        "importPath": "open_webui.retrieval.web.serpstack",
        "description": "open_webui.retrieval.web.serpstack",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.serpstack",
        "documentation": {}
    },
    {
        "label": "search_tavily",
        "importPath": "open_webui.retrieval.web.tavily",
        "description": "open_webui.retrieval.web.tavily",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.tavily",
        "documentation": {}
    },
    {
        "label": "search_bing",
        "importPath": "open_webui.retrieval.web.bing",
        "description": "open_webui.retrieval.web.bing",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.bing",
        "documentation": {}
    },
    {
        "label": "search_exa",
        "importPath": "open_webui.retrieval.web.exa",
        "description": "open_webui.retrieval.web.exa",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.exa",
        "documentation": {}
    },
    {
        "label": "search_perplexity",
        "importPath": "open_webui.retrieval.web.perplexity",
        "description": "open_webui.retrieval.web.perplexity",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.perplexity",
        "documentation": {}
    },
    {
        "label": "search_sougou",
        "importPath": "open_webui.retrieval.web.sougou",
        "description": "open_webui.retrieval.web.sougou",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.sougou",
        "documentation": {}
    },
    {
        "label": "search_firecrawl",
        "importPath": "open_webui.retrieval.web.firecrawl",
        "description": "open_webui.retrieval.web.firecrawl",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.firecrawl",
        "documentation": {}
    },
    {
        "label": "search_external",
        "importPath": "open_webui.retrieval.web.external",
        "description": "open_webui.retrieval.web.external",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.web.external",
        "documentation": {}
    },
    {
        "label": "get_embedding_function",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_model_path",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_collection",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_collection_with_hybrid_search",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_doc",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_doc_with_hybrid_search",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_sources_from_files",
        "importPath": "open_webui.retrieval.utils",
        "description": "open_webui.retrieval.utils",
        "isExtraImport": true,
        "detail": "open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "importPath": "open_webui.utils.chat",
        "description": "open_webui.utils.chat",
        "isExtraImport": true,
        "detail": "open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "importPath": "open_webui.utils.chat",
        "description": "open_webui.utils.chat",
        "isExtraImport": true,
        "detail": "open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "importPath": "open_webui.utils.chat",
        "description": "open_webui.utils.chat",
        "isExtraImport": true,
        "detail": "open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "chat_completed",
        "importPath": "open_webui.utils.chat",
        "description": "open_webui.utils.chat",
        "isExtraImport": true,
        "detail": "open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "chat_action",
        "importPath": "open_webui.utils.chat",
        "description": "open_webui.utils.chat",
        "isExtraImport": true,
        "detail": "open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "title_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "follow_up_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "query_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "image_prompt_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "autocomplete_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "tags_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "emoji_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "moa_response_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "get_task_model_id",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "get_task_model_id",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "rag_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "tools_function_calling_generation_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "prompt_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "prompt_variables_template",
        "importPath": "open_webui.utils.task",
        "description": "open_webui.utils.task",
        "isExtraImport": true,
        "detail": "open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "process_pipeline_inlet_filter",
        "importPath": "open_webui.routers.pipelines",
        "description": "open_webui.routers.pipelines",
        "isExtraImport": true,
        "detail": "open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "process_pipeline_inlet_filter",
        "importPath": "open_webui.routers.pipelines",
        "description": "open_webui.routers.pipelines",
        "isExtraImport": true,
        "detail": "open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "process_pipeline_outlet_filter",
        "importPath": "open_webui.routers.pipelines",
        "description": "open_webui.routers.pipelines",
        "isExtraImport": true,
        "detail": "open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "process_pipeline_inlet_filter",
        "importPath": "open_webui.routers.pipelines",
        "description": "open_webui.routers.pipelines",
        "isExtraImport": true,
        "detail": "open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "process_pipeline_outlet_filter",
        "importPath": "open_webui.routers.pipelines",
        "description": "open_webui.routers.pipelines",
        "isExtraImport": true,
        "detail": "open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "ToolForm",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolModel",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolResponse",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolUserResponse",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "Tools",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "Tools",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "Tools",
        "importPath": "open_webui.models.tools",
        "description": "open_webui.models.tools",
        "isExtraImport": true,
        "detail": "open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "black",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "black",
        "description": "black",
        "detail": "black",
        "documentation": {}
    },
    {
        "label": "markdown",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "markdown",
        "description": "markdown",
        "detail": "markdown",
        "documentation": {}
    },
    {
        "label": "markdown",
        "importPath": "markdown",
        "description": "markdown",
        "isExtraImport": true,
        "detail": "markdown",
        "documentation": {}
    },
    {
        "label": "PDFGenerator",
        "importPath": "open_webui.utils.pdf_generator",
        "description": "open_webui.utils.pdf_generator",
        "isExtraImport": true,
        "detail": "open_webui.utils.pdf_generator",
        "documentation": {}
    },
    {
        "label": "execute_code_jupyter",
        "importPath": "open_webui.utils.code_interpreter",
        "description": "open_webui.utils.code_interpreter",
        "isExtraImport": true,
        "detail": "open_webui.utils.code_interpreter",
        "documentation": {}
    },
    {
        "label": "execute_code_jupyter",
        "importPath": "open_webui.utils.code_interpreter",
        "description": "open_webui.utils.code_interpreter",
        "isExtraImport": true,
        "detail": "open_webui.utils.code_interpreter",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socketio",
        "description": "socketio",
        "detail": "socketio",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "get_sentinels_from_env",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_sentinel_url_from_env",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_sentinels_from_env",
        "importPath": "open_webui.utils.redis",
        "description": "open_webui.utils.redis",
        "isExtraImport": true,
        "detail": "open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "RedisDict",
        "importPath": "open_webui.socket.utils",
        "description": "open_webui.socket.utils",
        "isExtraImport": true,
        "detail": "open_webui.socket.utils",
        "documentation": {}
    },
    {
        "label": "RedisLock",
        "importPath": "open_webui.socket.utils",
        "description": "open_webui.socket.utils",
        "isExtraImport": true,
        "detail": "open_webui.socket.utils",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "botocore.config",
        "description": "botocore.config",
        "isExtraImport": true,
        "detail": "botocore.config",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "GoogleCloudError",
        "importPath": "google.cloud.exceptions",
        "description": "google.cloud.exceptions",
        "isExtraImport": true,
        "detail": "google.cloud.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "google.cloud.exceptions",
        "description": "google.cloud.exceptions",
        "isExtraImport": true,
        "detail": "google.cloud.exceptions",
        "documentation": {}
    },
    {
        "label": "DefaultAzureCredential",
        "importPath": "azure.identity",
        "description": "azure.identity",
        "isExtraImport": true,
        "detail": "azure.identity",
        "documentation": {}
    },
    {
        "label": "BlobServiceClient",
        "importPath": "azure.storage.blob",
        "description": "azure.storage.blob",
        "isExtraImport": true,
        "detail": "azure.storage.blob",
        "documentation": {}
    },
    {
        "label": "BlobServiceClient",
        "importPath": "azure.storage.blob",
        "description": "azure.storage.blob",
        "isExtraImport": true,
        "detail": "azure.storage.blob",
        "documentation": {}
    },
    {
        "label": "ContainerClient",
        "importPath": "azure.storage.blob",
        "description": "azure.storage.blob",
        "isExtraImport": true,
        "detail": "azure.storage.blob",
        "documentation": {}
    },
    {
        "label": "BlobClient",
        "importPath": "azure.storage.blob",
        "description": "azure.storage.blob",
        "isExtraImport": true,
        "detail": "azure.storage.blob",
        "documentation": {}
    },
    {
        "label": "ResourceNotFoundError",
        "importPath": "azure.core.exceptions",
        "description": "azure.core.exceptions",
        "isExtraImport": true,
        "detail": "azure.core.exceptions",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "importPath": "test.util.abstract_integration_test",
        "description": "test.util.abstract_integration_test",
        "isExtraImport": true,
        "detail": "test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "importPath": "test.util.abstract_integration_test",
        "description": "test.util.abstract_integration_test",
        "isExtraImport": true,
        "detail": "test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "importPath": "test.util.abstract_integration_test",
        "description": "test.util.abstract_integration_test",
        "isExtraImport": true,
        "detail": "test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "importPath": "test.util.abstract_integration_test",
        "description": "test.util.abstract_integration_test",
        "isExtraImport": true,
        "detail": "test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "importPath": "test.util.abstract_integration_test",
        "description": "test.util.abstract_integration_test",
        "isExtraImport": true,
        "detail": "test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "importPath": "test.util.mock_user",
        "description": "test.util.mock_user",
        "isExtraImport": true,
        "detail": "test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "importPath": "test.util.mock_user",
        "description": "test.util.mock_user",
        "isExtraImport": true,
        "detail": "test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "importPath": "test.util.mock_user",
        "description": "test.util.mock_user",
        "isExtraImport": true,
        "detail": "test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "importPath": "test.util.mock_user",
        "description": "test.util.mock_user",
        "isExtraImport": true,
        "detail": "test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "importPath": "test.util.mock_user",
        "description": "test.util.mock_user",
        "isExtraImport": true,
        "detail": "test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "mock_aws",
        "importPath": "moto",
        "description": "moto",
        "isExtraImport": true,
        "detail": "moto",
        "documentation": {}
    },
    {
        "label": "provider",
        "importPath": "open_webui.storage",
        "description": "open_webui.storage",
        "isExtraImport": true,
        "detail": "open_webui.storage",
        "documentation": {}
    },
    {
        "label": "create_server",
        "importPath": "gcp_storage_emulator.server",
        "description": "gcp_storage_emulator.server",
        "isExtraImport": true,
        "detail": "gcp_storage_emulator.server",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "docker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docker",
        "description": "docker",
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "DockerClient",
        "importPath": "docker",
        "description": "docker",
        "isExtraImport": true,
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "get_docker_ip",
        "importPath": "pytest_docker.plugin",
        "description": "pytest_docker.plugin",
        "isExtraImport": true,
        "detail": "pytest_docker.plugin",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websocket",
        "description": "websocket",
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "SpanAttributes",
        "importPath": "opentelemetry.semconv.trace",
        "description": "opentelemetry.semconv.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.semconv.trace",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "ReadableSpan",
        "importPath": "opentelemetry.sdk.trace",
        "description": "opentelemetry.sdk.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace",
        "documentation": {}
    },
    {
        "label": "TracerProvider",
        "importPath": "opentelemetry.sdk.trace",
        "description": "opentelemetry.sdk.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace",
        "documentation": {}
    },
    {
        "label": "BatchSpanProcessor",
        "importPath": "opentelemetry.sdk.trace.export",
        "description": "opentelemetry.sdk.trace.export",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace.export",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "instrument_fastapi",
        "importPath": "chromadb.telemetry.opentelemetry.fastapi",
        "description": "chromadb.telemetry.opentelemetry.fastapi",
        "isExtraImport": true,
        "detail": "chromadb.telemetry.opentelemetry.fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPXClientInstrumentor",
        "importPath": "opentelemetry.instrumentation.httpx",
        "description": "opentelemetry.instrumentation.httpx",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.httpx",
        "documentation": {}
    },
    {
        "label": "RequestInfo",
        "importPath": "opentelemetry.instrumentation.httpx",
        "description": "opentelemetry.instrumentation.httpx",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.httpx",
        "documentation": {}
    },
    {
        "label": "ResponseInfo",
        "importPath": "opentelemetry.instrumentation.httpx",
        "description": "opentelemetry.instrumentation.httpx",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.httpx",
        "documentation": {}
    },
    {
        "label": "BaseInstrumentor",
        "importPath": "opentelemetry.instrumentation.instrumentor",
        "description": "opentelemetry.instrumentation.instrumentor",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.instrumentor",
        "documentation": {}
    },
    {
        "label": "LoggingInstrumentor",
        "importPath": "opentelemetry.instrumentation.logging",
        "description": "opentelemetry.instrumentation.logging",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.logging",
        "documentation": {}
    },
    {
        "label": "RedisInstrumentor",
        "importPath": "opentelemetry.instrumentation.redis",
        "description": "opentelemetry.instrumentation.redis",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.redis",
        "documentation": {}
    },
    {
        "label": "RequestsInstrumentor",
        "importPath": "opentelemetry.instrumentation.requests",
        "description": "opentelemetry.instrumentation.requests",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.requests",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyInstrumentor",
        "importPath": "opentelemetry.instrumentation.sqlalchemy",
        "description": "opentelemetry.instrumentation.sqlalchemy",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "AioHttpClientInstrumentor",
        "importPath": "opentelemetry.instrumentation.aiohttp_client",
        "description": "opentelemetry.instrumentation.aiohttp_client",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.aiohttp_client",
        "documentation": {}
    },
    {
        "label": "Span",
        "importPath": "opentelemetry.trace",
        "description": "opentelemetry.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.trace",
        "documentation": {}
    },
    {
        "label": "StatusCode",
        "importPath": "opentelemetry.trace",
        "description": "opentelemetry.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.trace",
        "documentation": {}
    },
    {
        "label": "SPAN_REDIS_TYPE",
        "importPath": "open_webui.utils.telemetry.constants",
        "description": "open_webui.utils.telemetry.constants",
        "isExtraImport": true,
        "detail": "open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SpanAttributes",
        "importPath": "open_webui.utils.telemetry.constants",
        "description": "open_webui.utils.telemetry.constants",
        "isExtraImport": true,
        "detail": "open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "opentelemetry",
        "description": "opentelemetry",
        "isExtraImport": true,
        "detail": "opentelemetry",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "opentelemetry",
        "description": "opentelemetry",
        "isExtraImport": true,
        "detail": "opentelemetry",
        "documentation": {}
    },
    {
        "label": "OTLPSpanExporter",
        "importPath": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "description": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "isExtraImport": true,
        "detail": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "documentation": {}
    },
    {
        "label": "SERVICE_NAME",
        "importPath": "opentelemetry.sdk.resources",
        "description": "opentelemetry.sdk.resources",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.resources",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "opentelemetry.sdk.resources",
        "description": "opentelemetry.sdk.resources",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.resources",
        "documentation": {}
    },
    {
        "label": "LazyBatchSpanProcessor",
        "importPath": "open_webui.utils.telemetry.exporters",
        "description": "open_webui.utils.telemetry.exporters",
        "isExtraImport": true,
        "detail": "open_webui.utils.telemetry.exporters",
        "documentation": {}
    },
    {
        "label": "Instrumentor",
        "importPath": "open_webui.utils.telemetry.instrumentors",
        "description": "open_webui.utils.telemetry.instrumentors",
        "isExtraImport": true,
        "detail": "open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "ASGI3Application",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "ASGIReceiveCallable",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "ASGIReceiveEvent",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "ASGISendCallable",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "ASGISendEvent",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "Scope",
        "importPath": "asgiref.typing",
        "description": "asgiref.typing",
        "isExtraImport": true,
        "detail": "asgiref.typing",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "generate_function_chat_completion",
        "importPath": "open_webui.functions",
        "description": "open_webui.functions",
        "isExtraImport": true,
        "detail": "open_webui.functions",
        "documentation": {}
    },
    {
        "label": "get_function_models",
        "importPath": "open_webui.functions",
        "description": "open_webui.functions",
        "isExtraImport": true,
        "detail": "open_webui.functions",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "importPath": "open_webui.routers.ollama",
        "description": "open_webui.routers.ollama",
        "isExtraImport": true,
        "detail": "open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "importPath": "open_webui.routers.ollama",
        "description": "open_webui.routers.ollama",
        "isExtraImport": true,
        "detail": "open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "GenerateEmbeddingsForm",
        "importPath": "open_webui.routers.ollama",
        "description": "open_webui.routers.ollama",
        "isExtraImport": true,
        "detail": "open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "get_all_models",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "check_model_access",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "check_model_access",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "get_all_models",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "get_all_base_models",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "check_model_access",
        "importPath": "open_webui.utils.models",
        "description": "open_webui.utils.models",
        "isExtraImport": true,
        "detail": "open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "convert_response_ollama_to_openai",
        "importPath": "open_webui.utils.response",
        "description": "open_webui.utils.response",
        "isExtraImport": true,
        "detail": "open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "convert_streaming_response_ollama_to_openai",
        "importPath": "open_webui.utils.response",
        "description": "open_webui.utils.response",
        "isExtraImport": true,
        "detail": "open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "convert_embedding_response_ollama_to_openai",
        "importPath": "open_webui.utils.response",
        "description": "open_webui.utils.response",
        "isExtraImport": true,
        "detail": "open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "get_sorted_filter_ids",
        "importPath": "open_webui.utils.filter",
        "description": "open_webui.utils.filter",
        "isExtraImport": true,
        "detail": "open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "process_filter_functions",
        "importPath": "open_webui.utils.filter",
        "description": "open_webui.utils.filter",
        "isExtraImport": true,
        "detail": "open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "get_sorted_filter_ids",
        "importPath": "open_webui.utils.filter",
        "description": "open_webui.utils.filter",
        "isExtraImport": true,
        "detail": "open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "process_filter_functions",
        "importPath": "open_webui.utils.filter",
        "description": "open_webui.utils.filter",
        "isExtraImport": true,
        "detail": "open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "html",
        "description": "html",
        "isExtraImport": true,
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "generate_queries",
        "importPath": "open_webui.routers.tasks",
        "description": "open_webui.routers.tasks",
        "isExtraImport": true,
        "detail": "open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "generate_title",
        "importPath": "open_webui.routers.tasks",
        "description": "open_webui.routers.tasks",
        "isExtraImport": true,
        "detail": "open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "generate_follow_ups",
        "importPath": "open_webui.routers.tasks",
        "description": "open_webui.routers.tasks",
        "isExtraImport": true,
        "detail": "open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "generate_image_prompt",
        "importPath": "open_webui.routers.tasks",
        "description": "open_webui.routers.tasks",
        "isExtraImport": true,
        "detail": "open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "generate_chat_tags",
        "importPath": "open_webui.routers.tasks",
        "description": "open_webui.routers.tasks",
        "isExtraImport": true,
        "detail": "open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "load_b64_image_data",
        "importPath": "open_webui.routers.images",
        "description": "open_webui.routers.images",
        "isExtraImport": true,
        "detail": "open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "image_generations",
        "importPath": "open_webui.routers.images",
        "description": "open_webui.routers.images",
        "isExtraImport": true,
        "detail": "open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "GenerateImageForm",
        "importPath": "open_webui.routers.images",
        "description": "open_webui.routers.images",
        "isExtraImport": true,
        "detail": "open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "upload_image",
        "importPath": "open_webui.routers.images",
        "description": "open_webui.routers.images",
        "isExtraImport": true,
        "detail": "open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "query_memory",
        "importPath": "open_webui.routers.memories",
        "description": "open_webui.routers.memories",
        "isExtraImport": true,
        "detail": "open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "QueryMemoryForm",
        "importPath": "open_webui.routers.memories",
        "description": "open_webui.routers.memories",
        "isExtraImport": true,
        "detail": "open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "create_task",
        "importPath": "open_webui.tasks",
        "description": "open_webui.tasks",
        "isExtraImport": true,
        "detail": "open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "redis_task_command_listener",
        "importPath": "open_webui.tasks",
        "description": "open_webui.tasks",
        "isExtraImport": true,
        "detail": "open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "list_task_ids_by_chat_id",
        "importPath": "open_webui.tasks",
        "description": "open_webui.tasks",
        "isExtraImport": true,
        "detail": "open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "stop_task",
        "importPath": "open_webui.tasks",
        "description": "open_webui.tasks",
        "isExtraImport": true,
        "detail": "open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "list_tasks",
        "importPath": "open_webui.tasks",
        "description": "open_webui.tasks",
        "isExtraImport": true,
        "detail": "open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "collections.abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.abc",
        "description": "collections.abc",
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "ollama",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "audio",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "images",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "ollama",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "retrieval",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "pipelines",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "auths",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "channels",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "chats",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "notes",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "folders",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "configs",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "groups",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "memories",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "knowledge",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "prompts",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "evaluations",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "open_webui.routers",
        "description": "open_webui.routers",
        "isExtraImport": true,
        "detail": "open_webui.routers",
        "documentation": {}
    },
    {
        "label": "OAuth",
        "importPath": "authlib.integrations.starlette_client",
        "description": "authlib.integrations.starlette_client",
        "isExtraImport": true,
        "detail": "authlib.integrations.starlette_client",
        "documentation": {}
    },
    {
        "label": "UserInfo",
        "importPath": "authlib.oidc.core",
        "description": "authlib.oidc.core",
        "isExtraImport": true,
        "detail": "authlib.oidc.core",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "FieldInfo",
        "importPath": "pydantic.fields",
        "description": "pydantic.fields",
        "isExtraImport": true,
        "detail": "pydantic.fields",
        "documentation": {}
    },
    {
        "label": "convert_to_openai_function",
        "importPath": "langchain_core.utils.function_calling",
        "description": "langchain_core.utils.function_calling",
        "isExtraImport": true,
        "detail": "langchain_core.utils.function_calling",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "importlib.metadata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.metadata",
        "description": "importlib.metadata",
        "detail": "importlib.metadata",
        "documentation": {}
    },
    {
        "label": "pkgutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkgutil",
        "description": "pkgutil",
        "detail": "pkgutil",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "anyio.to_thread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "anyio.to_thread",
        "description": "anyio.to_thread",
        "detail": "anyio.to_thread",
        "documentation": {}
    },
    {
        "label": "get_swagger_ui_html",
        "importPath": "fastapi.openapi.docs",
        "description": "fastapi.openapi.docs",
        "isExtraImport": true,
        "detail": "fastapi.openapi.docs",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "CompressMiddleware",
        "importPath": "starlette_compress",
        "description": "starlette_compress",
        "isExtraImport": true,
        "detail": "starlette_compress",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "starlette.exceptions",
        "description": "starlette.exceptions",
        "isExtraImport": true,
        "detail": "starlette.exceptions",
        "documentation": {}
    },
    {
        "label": "SessionMiddleware",
        "importPath": "starlette.middleware.sessions",
        "description": "starlette.middleware.sessions",
        "isExtraImport": true,
        "detail": "starlette.middleware.sessions",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "open_webui.utils",
        "description": "open_webui.utils",
        "isExtraImport": true,
        "detail": "open_webui.utils",
        "documentation": {}
    },
    {
        "label": "AuditLevel",
        "importPath": "open_webui.utils.audit",
        "description": "open_webui.utils.audit",
        "isExtraImport": true,
        "detail": "open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "AuditLoggingMiddleware",
        "importPath": "open_webui.utils.audit",
        "description": "open_webui.utils.audit",
        "isExtraImport": true,
        "detail": "open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "start_logger",
        "importPath": "open_webui.utils.logger",
        "description": "open_webui.utils.logger",
        "isExtraImport": true,
        "detail": "open_webui.utils.logger",
        "documentation": {}
    },
    {
        "label": "generate_embeddings",
        "importPath": "open_webui.utils.embeddings",
        "description": "open_webui.utils.embeddings",
        "isExtraImport": true,
        "detail": "open_webui.utils.embeddings",
        "documentation": {}
    },
    {
        "label": "process_chat_payload",
        "importPath": "open_webui.utils.middleware",
        "description": "open_webui.utils.middleware",
        "isExtraImport": true,
        "detail": "open_webui.utils.middleware",
        "documentation": {}
    },
    {
        "label": "process_chat_response",
        "importPath": "open_webui.utils.middleware",
        "description": "open_webui.utils.middleware",
        "isExtraImport": true,
        "detail": "open_webui.utils.middleware",
        "documentation": {}
    },
    {
        "label": "OAuthManager",
        "importPath": "open_webui.utils.oauth",
        "description": "open_webui.utils.oauth",
        "isExtraImport": true,
        "detail": "open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "SecurityHeadersMiddleware",
        "importPath": "open_webui.utils.security_headers",
        "description": "open_webui.utils.security_headers",
        "isExtraImport": true,
        "detail": "open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "BuildHookInterface",
        "importPath": "hatchling.builders.hooks.plugin.interface",
        "description": "hatchling.builders.hooks.plugin.interface",
        "isExtraImport": true,
        "detail": "hatchling.builders.hooks.plugin.interface",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.001_initial_schema",
        "description": "backend.open_webui.internal.migrations.001_initial_schema",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # We perform different migrations for SQLite and other databases\n    # This is because SQLite is very loose with enforcing its schema, and trying to migrate other databases like SQLite\n    # will require per-database SQL queries.\n    # Instead, we assume that because external DB support was added at a later date, it is safe to assume a newer base\n    # schema instead of trying to migrate from an older schema.\n    if isinstance(database, pw.SqliteDatabase):\n        migrate_sqlite(migrator, database, fake=fake)\n    else:",
        "detail": "backend.open_webui.internal.migrations.001_initial_schema",
        "documentation": {}
    },
    {
        "label": "migrate_sqlite",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.001_initial_schema",
        "description": "backend.open_webui.internal.migrations.001_initial_schema",
        "peekOfCode": "def migrate_sqlite(migrator: Migrator, database: pw.Database, *, fake=False):\n    @migrator.create_model\n    class Auth(pw.Model):\n        id = pw.CharField(max_length=255, unique=True)\n        email = pw.CharField(max_length=255)\n        password = pw.CharField(max_length=255)\n        active = pw.BooleanField()\n        class Meta:\n            table_name = \"auth\"\n    @migrator.create_model",
        "detail": "backend.open_webui.internal.migrations.001_initial_schema",
        "documentation": {}
    },
    {
        "label": "migrate_external",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.001_initial_schema",
        "description": "backend.open_webui.internal.migrations.001_initial_schema",
        "peekOfCode": "def migrate_external(migrator: Migrator, database: pw.Database, *, fake=False):\n    @migrator.create_model\n    class Auth(pw.Model):\n        id = pw.CharField(max_length=255, unique=True)\n        email = pw.CharField(max_length=255)\n        password = pw.TextField()\n        active = pw.BooleanField()\n        class Meta:\n            table_name = \"auth\"\n    @migrator.create_model",
        "detail": "backend.open_webui.internal.migrations.001_initial_schema",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.001_initial_schema",
        "description": "backend.open_webui.internal.migrations.001_initial_schema",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"user\")\n    migrator.remove_model(\"tag\")\n    migrator.remove_model(\"prompt\")\n    migrator.remove_model(\"modelfile\")\n    migrator.remove_model(\"document\")\n    migrator.remove_model(\"chatidtag\")\n    migrator.remove_model(\"chat\")\n    migrator.remove_model(\"auth\")",
        "detail": "backend.open_webui.internal.migrations.001_initial_schema",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "description": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\n        \"chat\", share_id=pw.CharField(max_length=255, null=True, unique=True)\n    )\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"chat\", \"share_id\")",
        "detail": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "description": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"chat\", \"share_id\")",
        "detail": "backend.open_webui.internal.migrations.002_add_local_sharing",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "description": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\n        \"user\", api_key=pw.CharField(max_length=255, null=True, unique=True)\n    )\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"user\", \"api_key\")",
        "detail": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "description": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"user\", \"api_key\")",
        "detail": "backend.open_webui.internal.migrations.003_add_auth_api_key",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.004_add_archived",
        "description": "backend.open_webui.internal.migrations.004_add_archived",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\"chat\", archived=pw.BooleanField(default=False))\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"chat\", \"archived\")",
        "detail": "backend.open_webui.internal.migrations.004_add_archived",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.004_add_archived",
        "description": "backend.open_webui.internal.migrations.004_add_archived",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"chat\", \"archived\")",
        "detail": "backend.open_webui.internal.migrations.004_add_archived",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    if isinstance(database, pw.SqliteDatabase):\n        migrate_sqlite(migrator, database, fake=fake)\n    else:\n        migrate_external(migrator, database, fake=fake)\ndef migrate_sqlite(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Adding fields created_at and updated_at to the 'chat' table\n    migrator.add_fields(\n        \"chat\",",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "migrate_sqlite",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def migrate_sqlite(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Adding fields created_at and updated_at to the 'chat' table\n    migrator.add_fields(\n        \"chat\",\n        created_at=pw.DateTimeField(null=True),  # Allow null for transition\n        updated_at=pw.DateTimeField(null=True),  # Allow null for transition\n    )\n    # Populate the new fields from an existing 'timestamp' field\n    migrator.sql(\n        \"UPDATE chat SET created_at = timestamp, updated_at = timestamp WHERE timestamp IS NOT NULL\"",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "migrate_external",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def migrate_external(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Adding fields created_at and updated_at to the 'chat' table\n    migrator.add_fields(\n        \"chat\",\n        created_at=pw.BigIntegerField(null=True),  # Allow null for transition\n        updated_at=pw.BigIntegerField(null=True),  # Allow null for transition\n    )\n    # Populate the new fields from an existing 'timestamp' field\n    migrator.sql(\n        \"UPDATE chat SET created_at = timestamp, updated_at = timestamp WHERE timestamp IS NOT NULL\"",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    if isinstance(database, pw.SqliteDatabase):\n        rollback_sqlite(migrator, database, fake=fake)\n    else:\n        rollback_external(migrator, database, fake=fake)\ndef rollback_sqlite(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Recreate the timestamp field initially allowing null values for safe transition\n    migrator.add_fields(\"chat\", timestamp=pw.DateTimeField(null=True))\n    # Copy the earliest created_at date back into the new timestamp field",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "rollback_sqlite",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def rollback_sqlite(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Recreate the timestamp field initially allowing null values for safe transition\n    migrator.add_fields(\"chat\", timestamp=pw.DateTimeField(null=True))\n    # Copy the earliest created_at date back into the new timestamp field\n    # This assumes created_at was originally a copy of timestamp\n    migrator.sql(\"UPDATE chat SET timestamp = created_at\")\n    # Remove the created_at and updated_at fields\n    migrator.remove_fields(\"chat\", \"created_at\", \"updated_at\")\n    # Finally, alter the timestamp field to not allow nulls if that was the original setting\n    migrator.change_fields(\"chat\", timestamp=pw.DateTimeField(null=False))",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "rollback_external",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.005_add_updated_at",
        "description": "backend.open_webui.internal.migrations.005_add_updated_at",
        "peekOfCode": "def rollback_external(migrator: Migrator, database: pw.Database, *, fake=False):\n    # Recreate the timestamp field initially allowing null values for safe transition\n    migrator.add_fields(\"chat\", timestamp=pw.BigIntegerField(null=True))\n    # Copy the earliest created_at date back into the new timestamp field\n    # This assumes created_at was originally a copy of timestamp\n    migrator.sql(\"UPDATE chat SET timestamp = created_at\")\n    # Remove the created_at and updated_at fields\n    migrator.remove_fields(\"chat\", \"created_at\", \"updated_at\")\n    # Finally, alter the timestamp field to not allow nulls if that was the original setting\n    migrator.change_fields(\"chat\", timestamp=pw.BigIntegerField(null=False))",
        "detail": "backend.open_webui.internal.migrations.005_add_updated_at",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "description": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # Alter the tables with timestamps\n    migrator.change_fields(\n        \"chatidtag\",\n        timestamp=pw.BigIntegerField(),\n    )\n    migrator.change_fields(\n        \"document\",\n        timestamp=pw.BigIntegerField(),",
        "detail": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "description": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    if isinstance(database, pw.SqliteDatabase):\n        # Alter the tables with timestamps\n        migrator.change_fields(\n            \"chatidtag\",\n            timestamp=pw.DateField(),\n        )\n        migrator.change_fields(\n            \"document\",",
        "detail": "backend.open_webui.internal.migrations.006_migrate_timestamps_and_charfields",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "description": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # Adding fields created_at and updated_at to the 'user' table\n    migrator.add_fields(\n        \"user\",\n        created_at=pw.BigIntegerField(null=True),  # Allow null for transition\n        updated_at=pw.BigIntegerField(null=True),  # Allow null for transition\n        last_active_at=pw.BigIntegerField(null=True),  # Allow null for transition\n    )\n    # Populate the new fields from an existing 'timestamp' field",
        "detail": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "description": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    # Recreate the timestamp field initially allowing null values for safe transition\n    migrator.add_fields(\"user\", timestamp=pw.BigIntegerField(null=True))\n    # Copy the earliest created_at date back into the new timestamp field\n    # This assumes created_at was originally a copy of timestamp\n    migrator.sql('UPDATE \"user\" SET timestamp = created_at')\n    # Remove the created_at and updated_at fields\n    migrator.remove_fields(\"user\", \"created_at\", \"updated_at\", \"last_active_at\")\n    # Finally, alter the timestamp field to not allow nulls if that was the original setting",
        "detail": "backend.open_webui.internal.migrations.007_add_user_last_active_at",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.008_add_memory",
        "description": "backend.open_webui.internal.migrations.008_add_memory",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    @migrator.create_model\n    class Memory(pw.Model):\n        id = pw.CharField(max_length=255, unique=True)\n        user_id = pw.CharField(max_length=255)\n        content = pw.TextField(null=False)\n        updated_at = pw.BigIntegerField(null=False)\n        created_at = pw.BigIntegerField(null=False)\n        class Meta:\n            table_name = \"memory\"",
        "detail": "backend.open_webui.internal.migrations.008_add_memory",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.008_add_memory",
        "description": "backend.open_webui.internal.migrations.008_add_memory",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"memory\")",
        "detail": "backend.open_webui.internal.migrations.008_add_memory",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.009_add_models",
        "description": "backend.open_webui.internal.migrations.009_add_models",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    @migrator.create_model\n    class Model(pw.Model):\n        id = pw.TextField(unique=True)\n        user_id = pw.TextField()\n        base_model_id = pw.TextField(null=True)\n        name = pw.TextField()\n        meta = pw.TextField()\n        params = pw.TextField()",
        "detail": "backend.open_webui.internal.migrations.009_add_models",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.009_add_models",
        "description": "backend.open_webui.internal.migrations.009_add_models",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"model\")",
        "detail": "backend.open_webui.internal.migrations.009_add_models",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "description": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # Fetch data from 'modelfile' table and insert into 'model' table\n    migrate_modelfile_to_model(migrator, database)\n    # Drop the 'modelfile' table\n    migrator.remove_model(\"modelfile\")\ndef migrate_modelfile_to_model(migrator: Migrator, database: pw.Database):\n    ModelFile = migrator.orm[\"modelfile\"]\n    Model = migrator.orm[\"model\"]\n    modelfiles = ModelFile.select()",
        "detail": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "documentation": {}
    },
    {
        "label": "migrate_modelfile_to_model",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "description": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "peekOfCode": "def migrate_modelfile_to_model(migrator: Migrator, database: pw.Database):\n    ModelFile = migrator.orm[\"modelfile\"]\n    Model = migrator.orm[\"model\"]\n    modelfiles = ModelFile.select()\n    for modelfile in modelfiles:\n        # Extract and transform data in Python\n        modelfile.modelfile = json.loads(modelfile.modelfile)\n        meta = json.dumps(\n            {\n                \"description\": modelfile.modelfile.get(\"desc\"),",
        "detail": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "description": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    recreate_modelfile_table(migrator, database)\n    move_data_back_to_modelfile(migrator, database)\n    migrator.remove_model(\"model\")\ndef recreate_modelfile_table(migrator: Migrator, database: pw.Database):\n    query = \"\"\"\n    CREATE TABLE IF NOT EXISTS modelfile (\n        user_id TEXT,\n        tag_name TEXT,",
        "detail": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "documentation": {}
    },
    {
        "label": "recreate_modelfile_table",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "description": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "peekOfCode": "def recreate_modelfile_table(migrator: Migrator, database: pw.Database):\n    query = \"\"\"\n    CREATE TABLE IF NOT EXISTS modelfile (\n        user_id TEXT,\n        tag_name TEXT,\n        modelfile JSON,\n        timestamp BIGINT\n    )\n    \"\"\"\n    migrator.sql(query)",
        "detail": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "documentation": {}
    },
    {
        "label": "move_data_back_to_modelfile",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "description": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "peekOfCode": "def move_data_back_to_modelfile(migrator: Migrator, database: pw.Database):\n    Model = migrator.orm[\"model\"]\n    Modelfile = migrator.orm[\"modelfile\"]\n    models = Model.select()\n    for model in models:\n        # Extract and transform data in Python\n        meta = json.loads(model.meta)\n        modelfile_data = {\n            \"title\": model.name,\n            \"desc\": meta.get(\"description\"),",
        "detail": "backend.open_webui.internal.migrations.010_migrate_modelfiles_to_models",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.011_add_user_settings",
        "description": "backend.open_webui.internal.migrations.011_add_user_settings",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # Adding fields settings to the 'user' table\n    migrator.add_fields(\"user\", settings=pw.TextField(null=True))\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    # Remove the settings field\n    migrator.remove_fields(\"user\", \"settings\")",
        "detail": "backend.open_webui.internal.migrations.011_add_user_settings",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.011_add_user_settings",
        "description": "backend.open_webui.internal.migrations.011_add_user_settings",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    # Remove the settings field\n    migrator.remove_fields(\"user\", \"settings\")",
        "detail": "backend.open_webui.internal.migrations.011_add_user_settings",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.012_add_tools",
        "description": "backend.open_webui.internal.migrations.012_add_tools",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    @migrator.create_model\n    class Tool(pw.Model):\n        id = pw.TextField(unique=True)\n        user_id = pw.TextField()\n        name = pw.TextField()\n        content = pw.TextField()\n        specs = pw.TextField()\n        meta = pw.TextField()",
        "detail": "backend.open_webui.internal.migrations.012_add_tools",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.012_add_tools",
        "description": "backend.open_webui.internal.migrations.012_add_tools",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"tool\")",
        "detail": "backend.open_webui.internal.migrations.012_add_tools",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.013_add_user_info",
        "description": "backend.open_webui.internal.migrations.013_add_user_info",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    # Adding fields info to the 'user' table\n    migrator.add_fields(\"user\", info=pw.TextField(null=True))\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    # Remove the settings field\n    migrator.remove_fields(\"user\", \"info\")",
        "detail": "backend.open_webui.internal.migrations.013_add_user_info",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.013_add_user_info",
        "description": "backend.open_webui.internal.migrations.013_add_user_info",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    # Remove the settings field\n    migrator.remove_fields(\"user\", \"info\")",
        "detail": "backend.open_webui.internal.migrations.013_add_user_info",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.014_add_files",
        "description": "backend.open_webui.internal.migrations.014_add_files",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    @migrator.create_model\n    class File(pw.Model):\n        id = pw.TextField(unique=True)\n        user_id = pw.TextField()\n        filename = pw.TextField()\n        meta = pw.TextField()\n        created_at = pw.BigIntegerField(null=False)\n        class Meta:",
        "detail": "backend.open_webui.internal.migrations.014_add_files",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.014_add_files",
        "description": "backend.open_webui.internal.migrations.014_add_files",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"file\")",
        "detail": "backend.open_webui.internal.migrations.014_add_files",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.015_add_functions",
        "description": "backend.open_webui.internal.migrations.015_add_functions",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    @migrator.create_model\n    class Function(pw.Model):\n        id = pw.TextField(unique=True)\n        user_id = pw.TextField()\n        name = pw.TextField()\n        type = pw.TextField()\n        content = pw.TextField()\n        meta = pw.TextField()",
        "detail": "backend.open_webui.internal.migrations.015_add_functions",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.015_add_functions",
        "description": "backend.open_webui.internal.migrations.015_add_functions",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_model(\"function\")",
        "detail": "backend.open_webui.internal.migrations.015_add_functions",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "description": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\"tool\", valves=pw.TextField(null=True))\n    migrator.add_fields(\"function\", valves=pw.TextField(null=True))\n    migrator.add_fields(\"function\", is_active=pw.BooleanField(default=False))\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"tool\", \"valves\")\n    migrator.remove_fields(\"function\", \"valves\")\n    migrator.remove_fields(\"function\", \"is_active\")",
        "detail": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "description": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"tool\", \"valves\")\n    migrator.remove_fields(\"function\", \"valves\")\n    migrator.remove_fields(\"function\", \"is_active\")",
        "detail": "backend.open_webui.internal.migrations.016_add_valves_and_is_active",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "description": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\n        \"user\",\n        oauth_sub=pw.TextField(null=True, unique=True),\n    )\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"user\", \"oauth_sub\")",
        "detail": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "description": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"user\", \"oauth_sub\")",
        "detail": "backend.open_webui.internal.migrations.017_add_user_oauth_sub",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "description": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "peekOfCode": "def migrate(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your migrations here.\"\"\"\n    migrator.add_fields(\n        \"function\",\n        is_global=pw.BooleanField(default=False),\n    )\ndef rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"function\", \"is_global\")",
        "detail": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "documentation": {}
    },
    {
        "label": "rollback",
        "kind": 2,
        "importPath": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "description": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "peekOfCode": "def rollback(migrator: Migrator, database: pw.Database, *, fake=False):\n    \"\"\"Write your rollback migrations here.\"\"\"\n    migrator.remove_fields(\"function\", \"is_global\")",
        "detail": "backend.open_webui.internal.migrations.018_add_function_is_global",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "kind": 6,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "class JSONField(types.TypeDecorator):\n    impl = types.Text\n    cache_ok = True\n    def process_bind_param(self, value: Optional[_T], dialect: Dialect) -> Any:\n        return json.dumps(value)\n    def process_result_value(self, value: Optional[_T], dialect: Dialect) -> Any:\n        if value is not None:\n            return json.loads(value)\n    def copy(self, **kw: Any) -> Self:\n        return JSONField(self.impl.length)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "handle_peewee_migration",
        "kind": 2,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "def handle_peewee_migration(DATABASE_URL):\n    # db = None\n    try:\n        # Replace the postgresql:// with postgres:// to handle the peewee migration\n        db = register_connection(DATABASE_URL.replace(\"postgresql://\", \"postgres://\"))\n        migrate_dir = OPEN_WEBUI_DIR / \"internal\" / \"migrations\"\n        router = Router(db, logger=log, migrate_dir=migrate_dir)\n        router.run()\n        db.close()\n    except Exception as e:",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "def get_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nget_db = contextmanager(get_session)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"DB\"])\nclass JSONField(types.TypeDecorator):\n    impl = types.Text\n    cache_ok = True\n    def process_bind_param(self, value: Optional[_T], dialect: Dialect) -> Any:\n        return json.dumps(value)\n    def process_result_value(self, value: Optional[_T], dialect: Dialect) -> Any:\n        if value is not None:\n            return json.loads(value)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = DATABASE_URL\nif \"sqlite\" in SQLALCHEMY_DATABASE_URL:\n    engine = create_engine(\n        SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n    )\nelse:\n    if DATABASE_POOL_SIZE > 0:\n        engine = create_engine(\n            SQLALCHEMY_DATABASE_URL,\n            pool_size=DATABASE_POOL_SIZE,",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "SessionLocal = sessionmaker(\n    autocommit=False, autoflush=False, bind=engine, expire_on_commit=False\n)\nmetadata_obj = MetaData(schema=DATABASE_SCHEMA)\nBase = declarative_base(metadata=metadata_obj)\nSession = scoped_session(SessionLocal)\ndef get_session():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "metadata_obj",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "metadata_obj = MetaData(schema=DATABASE_SCHEMA)\nBase = declarative_base(metadata=metadata_obj)\nSession = scoped_session(SessionLocal)\ndef get_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nget_db = contextmanager(get_session)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "Base = declarative_base(metadata=metadata_obj)\nSession = scoped_session(SessionLocal)\ndef get_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nget_db = contextmanager(get_session)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "Session = scoped_session(SessionLocal)\ndef get_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nget_db = contextmanager(get_session)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 5,
        "importPath": "backend.open_webui.internal.db",
        "description": "backend.open_webui.internal.db",
        "peekOfCode": "get_db = contextmanager(get_session)",
        "detail": "backend.open_webui.internal.db",
        "documentation": {}
    },
    {
        "label": "PeeweeConnectionState",
        "kind": 6,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "class PeeweeConnectionState(object):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n    def __getattr__(self, name):\n        value = self._state.get()[name]\n        return value\nclass CustomReconnectMixin(ReconnectMixin):",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "CustomReconnectMixin",
        "kind": 6,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "class CustomReconnectMixin(ReconnectMixin):\n    reconnect_errors = (\n        # psycopg2\n        (OperationalError, \"termin\"),\n        (InterfaceError, \"closed\"),\n        # peewee\n        (PeeWeeInterfaceError, \"closed\"),\n    )\nclass ReconnectingPostgresqlDatabase(CustomReconnectMixin, PostgresqlDatabase):\n    pass",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "ReconnectingPostgresqlDatabase",
        "kind": 6,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "class ReconnectingPostgresqlDatabase(CustomReconnectMixin, PostgresqlDatabase):\n    pass\ndef register_connection(db_url):\n    db = connect(db_url, unquote_user=True, unquote_password=True)\n    if isinstance(db, PostgresqlDatabase):\n        # Enable autoconnect for SQLite databases, managed by Peewee\n        db.autoconnect = True\n        db.reuse_if_open = True\n        log.info(\"Connected to PostgreSQL database\")\n        # Get the connection details",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "register_connection",
        "kind": 2,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "def register_connection(db_url):\n    db = connect(db_url, unquote_user=True, unquote_password=True)\n    if isinstance(db, PostgresqlDatabase):\n        # Enable autoconnect for SQLite databases, managed by Peewee\n        db.autoconnect = True\n        db.reuse_if_open = True\n        log.info(\"Connected to PostgreSQL database\")\n        # Get the connection details\n        connection = parse(db_url, unquote_user=True, unquote_password=True)\n        # Use our custom database class that supports reconnection",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"DB\"])\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\nclass PeeweeConnectionState(object):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "db_state_default",
        "kind": 5,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "db_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\nclass PeeweeConnectionState(object):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n    def __getattr__(self, name):\n        value = self._state.get()[name]",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "db_state",
        "kind": 5,
        "importPath": "backend.open_webui.internal.wrappers",
        "description": "backend.open_webui.internal.wrappers",
        "peekOfCode": "db_state = ContextVar(\"db_state\", default=db_state_default.copy())\nclass PeeweeConnectionState(object):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n    def __getattr__(self, name):\n        value = self._state.get()[name]\n        return value",
        "detail": "backend.open_webui.internal.wrappers",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "def upgrade():\n    # Setup an inspection on the existing table to avoid issues\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Clean up potential leftover temp table from previous failures\n    conn.execute(sa.text(\"DROP TABLE IF EXISTS _alembic_tmp_tag\"))\n    # Check if the 'tag' table exists\n    tables = inspector.get_table_names()\n    # Step 1: Modify Tag table using batch mode for SQLite support\n    if \"tag\" in tables:",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "def downgrade():\n    pass",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "revision = \"1af9b942657b\"\ndown_revision = \"242a2047eae0\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Setup an inspection on the existing table to avoid issues\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Clean up potential leftover temp table from previous failures\n    conn.execute(sa.text(\"DROP TABLE IF EXISTS _alembic_tmp_tag\"))",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "down_revision = \"242a2047eae0\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Setup an inspection on the existing table to avoid issues\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Clean up potential leftover temp table from previous failures\n    conn.execute(sa.text(\"DROP TABLE IF EXISTS _alembic_tmp_tag\"))\n    # Check if the 'tag' table exists",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Setup an inspection on the existing table to avoid issues\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Clean up potential leftover temp table from previous failures\n    conn.execute(sa.text(\"DROP TABLE IF EXISTS _alembic_tmp_tag\"))\n    # Check if the 'tag' table exists\n    tables = inspector.get_table_names()",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "description": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Setup an inspection on the existing table to avoid issues\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Clean up potential leftover temp table from previous failures\n    conn.execute(sa.text(\"DROP TABLE IF EXISTS _alembic_tmp_tag\"))\n    # Check if the 'tag' table exists\n    tables = inspector.get_table_names()\n    # Step 1: Modify Tag table using batch mode for SQLite support",
        "detail": "backend.open_webui.migrations.versions.1af9b942657b_migrate_tags",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "def upgrade():\n    conn = op.get_bind()\n    inspector = sa.inspect(conn)\n    columns = inspector.get_columns(\"chat\")\n    column_dict = {col[\"name\"]: col for col in columns}\n    chat_column = column_dict.get(\"chat\")\n    old_chat_exists = \"old_chat\" in column_dict\n    if chat_column:\n        if isinstance(chat_column[\"type\"], sa.Text):\n            print(\"Converting 'chat' column to JSON\")",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "def downgrade():\n    # Step 1: Add 'old_chat' column back as Text\n    op.add_column(\"chat\", sa.Column(\"old_chat\", sa.Text(), nullable=True))\n    # Step 2: Convert 'chat' JSON data back to text and store in 'old_chat'\n    chat_table = table(\n        \"chat\",\n        sa.Column(\"id\", sa.String(), primary_key=True),\n        sa.Column(\"chat\", sa.JSON()),\n        sa.Column(\"old_chat\", sa.Text()),\n    )",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "revision = \"242a2047eae0\"\ndown_revision = \"6a39f3d8e55c\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = sa.inspect(conn)\n    columns = inspector.get_columns(\"chat\")\n    column_dict = {col[\"name\"]: col for col in columns}\n    chat_column = column_dict.get(\"chat\")",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "down_revision = \"6a39f3d8e55c\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = sa.inspect(conn)\n    columns = inspector.get_columns(\"chat\")\n    column_dict = {col[\"name\"]: col for col in columns}\n    chat_column = column_dict.get(\"chat\")\n    old_chat_exists = \"old_chat\" in column_dict",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = sa.inspect(conn)\n    columns = inspector.get_columns(\"chat\")\n    column_dict = {col[\"name\"]: col for col in columns}\n    chat_column = column_dict.get(\"chat\")\n    old_chat_exists = \"old_chat\" in column_dict\n    if chat_column:",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "description": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = sa.inspect(conn)\n    columns = inspector.get_columns(\"chat\")\n    column_dict = {col[\"name\"]: col for col in columns}\n    chat_column = column_dict.get(\"chat\")\n    old_chat_exists = \"old_chat\" in column_dict\n    if chat_column:\n        if isinstance(chat_column[\"type\"], sa.Text):",
        "detail": "backend.open_webui.migrations.versions.242a2047eae0_update_chat_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "def upgrade():\n    # Add 'type' column to the 'channel' table\n    op.add_column(\n        \"channel\",\n        sa.Column(\n            \"type\",\n            sa.Text(),\n            nullable=True,\n        ),\n    )",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "def downgrade():\n    # Revert 'type' column addition to the 'channel' table\n    op.drop_column(\"channel\", \"type\")\n    op.drop_column(\"message\", \"parent_id\")\n    op.drop_table(\"message_reaction\")\n    op.drop_table(\"channel_member\")",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "revision = \"3781e22d8b01\"\ndown_revision = \"7826ab40b532\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add 'type' column to the 'channel' table\n    op.add_column(\n        \"channel\",\n        sa.Column(\n            \"type\",",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "down_revision = \"7826ab40b532\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add 'type' column to the 'channel' table\n    op.add_column(\n        \"channel\",\n        sa.Column(\n            \"type\",\n            sa.Text(),",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add 'type' column to the 'channel' table\n    op.add_column(\n        \"channel\",\n        sa.Column(\n            \"type\",\n            sa.Text(),\n            nullable=True,",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "description": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Add 'type' column to the 'channel' table\n    op.add_column(\n        \"channel\",\n        sa.Column(\n            \"type\",\n            sa.Text(),\n            nullable=True,\n        ),",
        "detail": "backend.open_webui.migrations.versions.3781e22d8b01_update_message_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "def upgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Inspecting the 'tag' table constraints and structure\n    existing_pk = inspector.get_pk_constraint(\"tag\")\n    unique_constraints = inspector.get_unique_constraints(\"tag\")\n    existing_indexes = inspector.get_indexes(\"tag\")\n    print(f\"Primary Key: {existing_pk}\")\n    print(f\"Unique Constraints: {unique_constraints}\")\n    print(f\"Indexes: {existing_indexes}\")",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "def downgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    current_pk = inspector.get_pk_constraint(\"tag\")\n    with op.batch_alter_table(\"tag\", schema=None) as batch_op:\n        # Drop the current primary key first, if it matches the one we know we added in upgrade\n        if current_pk and \"pk_id_user_id\" == current_pk.get(\"name\"):\n            batch_op.drop_constraint(\"pk_id_user_id\", type_=\"primary\")\n        # Restore the original primary key\n        batch_op.create_primary_key(\"pk_id\", [\"id\"])",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "revision = \"3ab32c4b8f59\"\ndown_revision = \"1af9b942657b\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Inspecting the 'tag' table constraints and structure\n    existing_pk = inspector.get_pk_constraint(\"tag\")\n    unique_constraints = inspector.get_unique_constraints(\"tag\")",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "down_revision = \"1af9b942657b\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Inspecting the 'tag' table constraints and structure\n    existing_pk = inspector.get_pk_constraint(\"tag\")\n    unique_constraints = inspector.get_unique_constraints(\"tag\")\n    existing_indexes = inspector.get_indexes(\"tag\")",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Inspecting the 'tag' table constraints and structure\n    existing_pk = inspector.get_pk_constraint(\"tag\")\n    unique_constraints = inspector.get_unique_constraints(\"tag\")\n    existing_indexes = inspector.get_indexes(\"tag\")\n    print(f\"Primary Key: {existing_pk}\")",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "description": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    conn = op.get_bind()\n    inspector = Inspector.from_engine(conn)\n    # Inspecting the 'tag' table constraints and structure\n    existing_pk = inspector.get_pk_constraint(\"tag\")\n    unique_constraints = inspector.get_unique_constraints(\"tag\")\n    existing_indexes = inspector.get_indexes(\"tag\")\n    print(f\"Primary Key: {existing_pk}\")\n    print(f\"Unique Constraints: {unique_constraints}\")",
        "detail": "backend.open_webui.migrations.versions.3ab32c4b8f59_update_tags",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "def upgrade():\n    # Perform safe alterations using batch operation\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        # Step 1: Remove server defaults for created_at and updated_at\n        batch_op.alter_column(\n            \"created_at\",\n            server_default=None,  # Removing server default\n        )\n        batch_op.alter_column(\n            \"updated_at\",",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "def downgrade():\n    # Downgrade: Convert columns back to DateTime and restore defaults\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        batch_op.alter_column(\n            \"created_at\",\n            type_=sa.DateTime(),\n            existing_type=sa.BigInteger(),\n            existing_nullable=False,\n            server_default=sa.func.now(),  # Restoring server default on downgrade\n        )",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "revision = \"4ace53fd72c8\"\ndown_revision = \"af906e964978\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Perform safe alterations using batch operation\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        # Step 1: Remove server defaults for created_at and updated_at\n        batch_op.alter_column(\n            \"created_at\",",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "down_revision = \"af906e964978\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Perform safe alterations using batch operation\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        # Step 1: Remove server defaults for created_at and updated_at\n        batch_op.alter_column(\n            \"created_at\",\n            server_default=None,  # Removing server default",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Perform safe alterations using batch operation\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        # Step 1: Remove server defaults for created_at and updated_at\n        batch_op.alter_column(\n            \"created_at\",\n            server_default=None,  # Removing server default\n        )",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "description": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Perform safe alterations using batch operation\n    with op.batch_alter_table(\"folder\", schema=None) as batch_op:\n        # Step 1: Remove server defaults for created_at and updated_at\n        batch_op.alter_column(\n            \"created_at\",\n            server_default=None,  # Removing server default\n        )\n        batch_op.alter_column(",
        "detail": "backend.open_webui.migrations.versions.4ace53fd72c8_update_folder_table_datetime",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "def upgrade():\n    op.create_table(\n        \"channel\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text()),\n        sa.Column(\"name\", sa.Text()),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "def downgrade():\n    op.drop_table(\"channel\")\n    op.drop_table(\"message\")",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "revision = \"57c599a3cb57\"\ndown_revision = \"922e7a387820\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"channel\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text()),\n        sa.Column(\"name\", sa.Text()),",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "down_revision = \"922e7a387820\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"channel\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text()),\n        sa.Column(\"name\", sa.Text()),\n        sa.Column(\"description\", sa.Text(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"channel\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text()),\n        sa.Column(\"name\", sa.Text()),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "description": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table(\n        \"channel\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text()),\n        sa.Column(\"name\", sa.Text()),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.57c599a3cb57_add_channel_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "def upgrade():\n    # Creating the 'knowledge' table\n    print(\"Creating knowledge table\")\n    knowledge_table = op.create_table(\n        \"knowledge\",\n        sa.Column(\"id\", sa.Text(), primary_key=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "def downgrade():\n    op.drop_table(\"knowledge\")",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "revision = \"6a39f3d8e55c\"\ndown_revision = \"c0fbf31ca0db\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Creating the 'knowledge' table\n    print(\"Creating knowledge table\")\n    knowledge_table = op.create_table(\n        \"knowledge\",\n        sa.Column(\"id\", sa.Text(), primary_key=True),",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "down_revision = \"c0fbf31ca0db\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Creating the 'knowledge' table\n    print(\"Creating knowledge table\")\n    knowledge_table = op.create_table(\n        \"knowledge\",\n        sa.Column(\"id\", sa.Text(), primary_key=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Creating the 'knowledge' table\n    print(\"Creating knowledge table\")\n    knowledge_table = op.create_table(\n        \"knowledge\",\n        sa.Column(\"id\", sa.Text(), primary_key=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "description": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Creating the 'knowledge' table\n    print(\"Creating knowledge table\")\n    knowledge_table = op.create_table(\n        \"knowledge\",\n        sa.Column(\"id\", sa.Text(), primary_key=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"description\", sa.Text(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.6a39f3d8e55c_add_knowledge_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "def upgrade():\n    op.add_column(\n        \"file\",\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n    )\ndef downgrade():\n    op.drop_column(\"file\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "def downgrade():\n    op.drop_column(\"file\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "revision = \"7826ab40b532\"\ndown_revision = \"57c599a3cb57\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column(\n        \"file\",\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n    )\ndef downgrade():",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "down_revision = \"57c599a3cb57\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column(\n        \"file\",\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n    )\ndef downgrade():\n    op.drop_column(\"file\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.add_column(\n        \"file\",\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n    )\ndef downgrade():\n    op.drop_column(\"file\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "description": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.add_column(\n        \"file\",\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n    )\ndef downgrade():\n    op.drop_column(\"file\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.7826ab40b532_update_file_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "description": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "peekOfCode": "def upgrade() -> None:\n    existing_tables = set(get_existing_tables())\n    # ### commands auto generated by Alembic - please adjust! ###\n    if \"auth\" not in existing_tables:\n        op.create_table(\n            \"auth\",\n            sa.Column(\"id\", sa.String(), nullable=False),\n            sa.Column(\"email\", sa.String(), nullable=True),\n            sa.Column(\"password\", sa.Text(), nullable=True),\n            sa.Column(\"active\", sa.Boolean(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "description": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"user\")\n    op.drop_table(\"tool\")\n    op.drop_table(\"tag\")\n    op.drop_table(\"prompt\")\n    op.drop_table(\"model\")\n    op.drop_table(\"memory\")\n    op.drop_table(\"function\")\n    op.drop_table(\"file\")",
        "detail": "backend.open_webui.migrations.versions.7e5b5dc7342b_init",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "def upgrade():\n    op.create_table(\n        \"group\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"name\", sa.Text(), nullable=True),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),\n        sa.Column(\"permissions\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "def downgrade():\n    op.drop_table(\"group\")\n    # Drop 'access_control' column from 'model' table\n    op.drop_column(\"model\", \"access_control\")\n    # Drop 'is_active' column from 'model' table\n    op.drop_column(\"model\", \"is_active\")\n    # Drop 'access_control' column from 'knowledge' table\n    op.drop_column(\"knowledge\", \"access_control\")\n    # Drop 'access_control' column from 'prompt' table\n    op.drop_column(\"prompt\", \"access_control\")",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "revision = \"922e7a387820\"\ndown_revision = \"4ace53fd72c8\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"group\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"name\", sa.Text(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "down_revision = \"4ace53fd72c8\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"group\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"name\", sa.Text(), nullable=True),\n        sa.Column(\"description\", sa.Text(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"group\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"name\", sa.Text(), nullable=True),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "description": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table(\n        \"group\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"name\", sa.Text(), nullable=True),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.922e7a387820_add_group_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "def upgrade():\n    op.create_table(\n        \"note\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"title\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),\n        sa.Column(\"created_at\", sa.BigInteger(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "def downgrade():\n    op.drop_table(\"note\")",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "revision = \"9f0c9cd09105\"\ndown_revision = \"3781e22d8b01\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"note\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"title\", sa.Text(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "down_revision = \"3781e22d8b01\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"note\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"title\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"note\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"title\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "description": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table(\n        \"note\",\n        sa.Column(\"id\", sa.Text(), nullable=False, primary_key=True, unique=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=True),\n        sa.Column(\"title\", sa.Text(), nullable=True),\n        sa.Column(\"data\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),\n        sa.Column(\"access_control\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.9f0c9cd09105_add_note_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "def upgrade():\n    # ### Create feedback table ###\n    op.create_table(\n        \"feedback\",\n        sa.Column(\n            \"id\", sa.Text(), primary_key=True\n        ),  # Unique identifier for each feedback (TEXT type)\n        sa.Column(\n            \"user_id\", sa.Text(), nullable=True\n        ),  # ID of the user providing the feedback (TEXT type)",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "def downgrade():\n    # ### Drop feedback table ###\n    op.drop_table(\"feedback\")",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "revision = \"af906e964978\"\ndown_revision = \"c29facfe716b\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### Create feedback table ###\n    op.create_table(\n        \"feedback\",\n        sa.Column(\n            \"id\", sa.Text(), primary_key=True",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "down_revision = \"c29facfe716b\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### Create feedback table ###\n    op.create_table(\n        \"feedback\",\n        sa.Column(\n            \"id\", sa.Text(), primary_key=True\n        ),  # Unique identifier for each feedback (TEXT type)",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### Create feedback table ###\n    op.create_table(\n        \"feedback\",\n        sa.Column(\n            \"id\", sa.Text(), primary_key=True\n        ),  # Unique identifier for each feedback (TEXT type)\n        sa.Column(",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "description": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### Create feedback table ###\n    op.create_table(\n        \"feedback\",\n        sa.Column(\n            \"id\", sa.Text(), primary_key=True\n        ),  # Unique identifier for each feedback (TEXT type)\n        sa.Column(\n            \"user_id\", sa.Text(), nullable=True",
        "detail": "backend.open_webui.migrations.versions.af906e964978_add_feedback_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "description": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\"file\", sa.Column(\"hash\", sa.Text(), nullable=True))\n    op.add_column(\"file\", sa.Column(\"data\", sa.JSON(), nullable=True))\n    op.add_column(\"file\", sa.Column(\"updated_at\", sa.BigInteger(), nullable=True))\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column(\"file\", \"updated_at\")\n    op.drop_column(\"file\", \"data\")\n    op.drop_column(\"file\", \"hash\")",
        "detail": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "description": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column(\"file\", \"updated_at\")\n    op.drop_column(\"file\", \"data\")\n    op.drop_column(\"file\", \"hash\")",
        "detail": "backend.open_webui.migrations.versions.c0fbf31ca0db_update_file_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "def upgrade():\n    # 1. Add the `path` column to the \"file\" table.\n    op.add_column(\"file\", sa.Column(\"path\", sa.Text(), nullable=True))\n    # 2. Convert the `meta` column from Text/JSONField to `JSON()`\n    # Use Alembic's default batch_op for dialect compatibility.\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:\n        batch_op.alter_column(\n            \"meta\",\n            type_=sa.JSON(),\n            existing_type=sa.Text(),",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "def downgrade():\n    # 1. Remove the `path` column\n    op.drop_column(\"file\", \"path\")\n    # 2. Revert the `meta` column back to Text/JSONField\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:\n        batch_op.alter_column(\n            \"meta\", type_=sa.Text(), existing_type=sa.JSON(), existing_nullable=True\n        )",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "revision = \"c29facfe716b\"\ndown_revision = \"c69f45358db4\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # 1. Add the `path` column to the \"file\" table.\n    op.add_column(\"file\", sa.Column(\"path\", sa.Text(), nullable=True))\n    # 2. Convert the `meta` column from Text/JSONField to `JSON()`\n    # Use Alembic's default batch_op for dialect compatibility.\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "down_revision = \"c69f45358db4\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # 1. Add the `path` column to the \"file\" table.\n    op.add_column(\"file\", sa.Column(\"path\", sa.Text(), nullable=True))\n    # 2. Convert the `meta` column from Text/JSONField to `JSON()`\n    # Use Alembic's default batch_op for dialect compatibility.\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:\n        batch_op.alter_column(",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # 1. Add the `path` column to the \"file\" table.\n    op.add_column(\"file\", sa.Column(\"path\", sa.Text(), nullable=True))\n    # 2. Convert the `meta` column from Text/JSONField to `JSON()`\n    # Use Alembic's default batch_op for dialect compatibility.\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:\n        batch_op.alter_column(\n            \"meta\",",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "description": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # 1. Add the `path` column to the \"file\" table.\n    op.add_column(\"file\", sa.Column(\"path\", sa.Text(), nullable=True))\n    # 2. Convert the `meta` column from Text/JSONField to `JSON()`\n    # Use Alembic's default batch_op for dialect compatibility.\n    with op.batch_alter_table(\"file\", schema=None) as batch_op:\n        batch_op.alter_column(\n            \"meta\",\n            type_=sa.JSON(),",
        "detail": "backend.open_webui.migrations.versions.c29facfe716b_update_file_table_path",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "def upgrade():\n    op.create_table(\n        \"folder\",\n        sa.Column(\"id\", sa.Text(), nullable=False),\n        sa.Column(\"parent_id\", sa.Text(), nullable=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"items\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),\n        sa.Column(\"is_expanded\", sa.Boolean(), default=False, nullable=False),",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "def downgrade():\n    op.drop_column(\"chat\", \"folder_id\")\n    op.drop_table(\"folder\")",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "revision = \"c69f45358db4\"\ndown_revision = \"3ab32c4b8f59\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"folder\",\n        sa.Column(\"id\", sa.Text(), nullable=False),\n        sa.Column(\"parent_id\", sa.Text(), nullable=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "down_revision = \"3ab32c4b8f59\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"folder\",\n        sa.Column(\"id\", sa.Text(), nullable=False),\n        sa.Column(\"parent_id\", sa.Text(), nullable=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    op.create_table(\n        \"folder\",\n        sa.Column(\"id\", sa.Text(), nullable=False),\n        sa.Column(\"parent_id\", sa.Text(), nullable=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"items\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "description": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    op.create_table(\n        \"folder\",\n        sa.Column(\"id\", sa.Text(), nullable=False),\n        sa.Column(\"parent_id\", sa.Text(), nullable=True),\n        sa.Column(\"user_id\", sa.Text(), nullable=False),\n        sa.Column(\"name\", sa.Text(), nullable=False),\n        sa.Column(\"items\", sa.JSON(), nullable=True),\n        sa.Column(\"meta\", sa.JSON(), nullable=True),",
        "detail": "backend.open_webui.migrations.versions.c69f45358db4_add_folder_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "description": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "peekOfCode": "def upgrade():\n    op.create_table(\n        \"config\",\n        sa.Column(\"id\", sa.Integer, primary_key=True),\n        sa.Column(\"data\", sa.JSON(), nullable=False),\n        sa.Column(\"version\", sa.Integer, nullable=False),\n        sa.Column(\n            \"created_at\", sa.DateTime(), nullable=False, server_default=sa.func.now()\n        ),\n        sa.Column(",
        "detail": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "description": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "peekOfCode": "def downgrade():\n    op.drop_table(\"config\")",
        "detail": "backend.open_webui.migrations.versions.ca81bd47c050_add_config_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.env",
        "description": "backend.open_webui.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.open_webui.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.env",
        "description": "backend.open_webui.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "backend.open_webui.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.env",
        "description": "backend.open_webui.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name, disable_existing_loggers=False)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Auth.metadata",
        "detail": "backend.open_webui.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.env",
        "description": "backend.open_webui.migrations.env",
        "peekOfCode": "target_metadata = Auth.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\nDB_URL = DATABASE_URL\nif DB_URL:\n    config.set_main_option(\"sqlalchemy.url\", DB_URL.replace(\"%\", \"%%\"))\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.",
        "detail": "backend.open_webui.migrations.env",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "backend.open_webui.migrations.env",
        "description": "backend.open_webui.migrations.env",
        "peekOfCode": "DB_URL = DATABASE_URL\nif DB_URL:\n    config.set_main_option(\"sqlalchemy.url\", DB_URL.replace(\"%\", \"%%\"))\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the",
        "detail": "backend.open_webui.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_existing_tables",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.util",
        "description": "backend.open_webui.migrations.util",
        "peekOfCode": "def get_existing_tables():\n    con = op.get_bind()\n    inspector = Inspector.from_engine(con)\n    tables = set(inspector.get_table_names())\n    return tables\ndef get_revision_id():\n    import uuid\n    return str(uuid.uuid4()).replace(\"-\", \"\")[:12]",
        "detail": "backend.open_webui.migrations.util",
        "documentation": {}
    },
    {
        "label": "get_revision_id",
        "kind": 2,
        "importPath": "backend.open_webui.migrations.util",
        "description": "backend.open_webui.migrations.util",
        "peekOfCode": "def get_revision_id():\n    import uuid\n    return str(uuid.uuid4()).replace(\"-\", \"\")[:12]",
        "detail": "backend.open_webui.migrations.util",
        "documentation": {}
    },
    {
        "label": "Auth",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class Auth(Base):\n    __tablename__ = \"auth\"\n    id = Column(String, primary_key=True)\n    email = Column(String)\n    password = Column(Text)\n    active = Column(Boolean)\nclass AuthModel(BaseModel):\n    id: str\n    email: str\n    password: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "AuthModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class AuthModel(BaseModel):\n    id: str\n    email: str\n    password: str\n    active: bool = True\n####################\n# Forms\n####################\nclass Token(BaseModel):\n    token: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class Token(BaseModel):\n    token: str\n    token_type: str\nclass ApiKey(BaseModel):\n    api_key: Optional[str] = None\nclass UserResponse(BaseModel):\n    id: str\n    email: str\n    name: str\n    role: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class ApiKey(BaseModel):\n    api_key: Optional[str] = None\nclass UserResponse(BaseModel):\n    id: str\n    email: str\n    name: str\n    role: str\n    profile_image_url: str\nclass SigninResponse(Token, UserResponse):\n    pass",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: str\n    email: str\n    name: str\n    role: str\n    profile_image_url: str\nclass SigninResponse(Token, UserResponse):\n    pass\nclass SigninForm(BaseModel):\n    email: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SigninResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class SigninResponse(Token, UserResponse):\n    pass\nclass SigninForm(BaseModel):\n    email: str\n    password: str\nclass LdapForm(BaseModel):\n    user: str\n    password: str\nclass ProfileImageUrlForm(BaseModel):\n    profile_image_url: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SigninForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class SigninForm(BaseModel):\n    email: str\n    password: str\nclass LdapForm(BaseModel):\n    user: str\n    password: str\nclass ProfileImageUrlForm(BaseModel):\n    profile_image_url: str\nclass UpdateProfileForm(BaseModel):\n    profile_image_url: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "LdapForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class LdapForm(BaseModel):\n    user: str\n    password: str\nclass ProfileImageUrlForm(BaseModel):\n    profile_image_url: str\nclass UpdateProfileForm(BaseModel):\n    profile_image_url: str\n    name: str\nclass UpdatePasswordForm(BaseModel):\n    password: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "ProfileImageUrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class ProfileImageUrlForm(BaseModel):\n    profile_image_url: str\nclass UpdateProfileForm(BaseModel):\n    profile_image_url: str\n    name: str\nclass UpdatePasswordForm(BaseModel):\n    password: str\n    new_password: str\nclass SignupForm(BaseModel):\n    name: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UpdateProfileForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class UpdateProfileForm(BaseModel):\n    profile_image_url: str\n    name: str\nclass UpdatePasswordForm(BaseModel):\n    password: str\n    new_password: str\nclass SignupForm(BaseModel):\n    name: str\n    email: str\n    password: str",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "UpdatePasswordForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class UpdatePasswordForm(BaseModel):\n    password: str\n    new_password: str\nclass SignupForm(BaseModel):\n    name: str\n    email: str\n    password: str\n    profile_image_url: Optional[str] = \"/user.png\"\nclass AddUserForm(SignupForm):\n    role: Optional[str] = \"pending\"",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class SignupForm(BaseModel):\n    name: str\n    email: str\n    password: str\n    profile_image_url: Optional[str] = \"/user.png\"\nclass AddUserForm(SignupForm):\n    role: Optional[str] = \"pending\"\nclass AuthsTable:\n    def insert_new_auth(\n        self,",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "AddUserForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class AddUserForm(SignupForm):\n    role: Optional[str] = \"pending\"\nclass AuthsTable:\n    def insert_new_auth(\n        self,\n        email: str,\n        password: str,\n        name: str,\n        profile_image_url: str = \"/user.png\",\n        role: str = \"pending\",",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "AuthsTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "class AuthsTable:\n    def insert_new_auth(\n        self,\n        email: str,\n        password: str,\n        name: str,\n        profile_image_url: str = \"/user.png\",\n        role: str = \"pending\",\n        oauth_sub: Optional[str] = None,\n    ) -> Optional[UserModel]:",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# DB MODEL\n####################\nclass Auth(Base):\n    __tablename__ = \"auth\"\n    id = Column(String, primary_key=True)\n    email = Column(String)\n    password = Column(Text)",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Auths",
        "kind": 5,
        "importPath": "backend.open_webui.models.auths",
        "description": "backend.open_webui.models.auths",
        "peekOfCode": "Auths = AuthsTable()",
        "detail": "backend.open_webui.models.auths",
        "documentation": {}
    },
    {
        "label": "Channel",
        "kind": 6,
        "importPath": "backend.open_webui.models.channels",
        "description": "backend.open_webui.models.channels",
        "peekOfCode": "class Channel(Base):\n    __tablename__ = \"channel\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    type = Column(Text, nullable=True)\n    name = Column(Text)\n    description = Column(Text, nullable=True)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    access_control = Column(JSON, nullable=True)",
        "detail": "backend.open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "ChannelModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.channels",
        "description": "backend.open_webui.models.channels",
        "peekOfCode": "class ChannelModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    type: Optional[str] = None\n    name: str\n    description: Optional[str] = None\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None",
        "detail": "backend.open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "ChannelForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.channels",
        "description": "backend.open_webui.models.channels",
        "peekOfCode": "class ChannelForm(BaseModel):\n    name: str\n    description: Optional[str] = None\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None\nclass ChannelTable:\n    def insert_new_channel(\n        self, type: Optional[str], form_data: ChannelForm, user_id: str\n    ) -> Optional[ChannelModel]:",
        "detail": "backend.open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "ChannelTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.channels",
        "description": "backend.open_webui.models.channels",
        "peekOfCode": "class ChannelTable:\n    def insert_new_channel(\n        self, type: Optional[str], form_data: ChannelForm, user_id: str\n    ) -> Optional[ChannelModel]:\n        with get_db() as db:\n            channel = ChannelModel(\n                **{\n                    **form_data.model_dump(),\n                    \"type\": type,\n                    \"name\": form_data.name.lower(),",
        "detail": "backend.open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "Channels",
        "kind": 5,
        "importPath": "backend.open_webui.models.channels",
        "description": "backend.open_webui.models.channels",
        "peekOfCode": "Channels = ChannelTable()",
        "detail": "backend.open_webui.models.channels",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class Chat(Base):\n    __tablename__ = \"chat\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    title = Column(Text)\n    chat = Column(JSON)\n    created_at = Column(BigInteger)\n    updated_at = Column(BigInteger)\n    share_id = Column(Text, unique=True, nullable=True)\n    archived = Column(Boolean, default=False)",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    title: str\n    chat: dict\n    created_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch\n    share_id: Optional[str] = None\n    archived: bool = False",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatForm(BaseModel):\n    chat: dict\nclass ChatImportForm(ChatForm):\n    meta: Optional[dict] = {}\n    pinned: Optional[bool] = False\n    folder_id: Optional[str] = None\nclass ChatTitleMessagesForm(BaseModel):\n    title: str\n    messages: list[dict]\nclass ChatTitleForm(BaseModel):",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatImportForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatImportForm(ChatForm):\n    meta: Optional[dict] = {}\n    pinned: Optional[bool] = False\n    folder_id: Optional[str] = None\nclass ChatTitleMessagesForm(BaseModel):\n    title: str\n    messages: list[dict]\nclass ChatTitleForm(BaseModel):\n    title: str\nclass ChatResponse(BaseModel):",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleMessagesForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatTitleMessagesForm(BaseModel):\n    title: str\n    messages: list[dict]\nclass ChatTitleForm(BaseModel):\n    title: str\nclass ChatResponse(BaseModel):\n    id: str\n    user_id: str\n    title: str\n    chat: dict",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatTitleForm(BaseModel):\n    title: str\nclass ChatResponse(BaseModel):\n    id: str\n    user_id: str\n    title: str\n    chat: dict\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\n    share_id: Optional[str] = None  # id of the chat to be shared",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatResponse(BaseModel):\n    id: str\n    user_id: str\n    title: str\n    chat: dict\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\n    share_id: Optional[str] = None  # id of the chat to be shared\n    archived: bool\n    pinned: Optional[bool] = False",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTitleIdResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatTitleIdResponse(BaseModel):\n    id: str\n    title: str\n    updated_at: int\n    created_at: int\nclass ChatTable:\n    def insert_new_chat(self, user_id: str, form_data: ChatForm) -> Optional[ChatModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            chat = ChatModel(",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "ChatTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "class ChatTable:\n    def insert_new_chat(self, user_id: str, form_data: ChatForm) -> Optional[ChatModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            chat = ChatModel(\n                **{\n                    \"id\": id,\n                    \"user_id\": user_id,\n                    \"title\": (\n                        form_data.chat[\"title\"]",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nclass Chat(Base):\n    __tablename__ = \"chat\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    title = Column(Text)\n    chat = Column(JSON)\n    created_at = Column(BigInteger)\n    updated_at = Column(BigInteger)",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Chats",
        "kind": 5,
        "importPath": "backend.open_webui.models.chats",
        "description": "backend.open_webui.models.chats",
        "peekOfCode": "Chats = ChatTable()",
        "detail": "backend.open_webui.models.chats",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class Feedback(Base):\n    __tablename__ = \"feedback\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    version = Column(BigInteger, default=0)\n    type = Column(Text)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    snapshot = Column(JSON, nullable=True)\n    created_at = Column(BigInteger)",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class FeedbackModel(BaseModel):\n    id: str\n    user_id: str\n    version: int\n    type: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    snapshot: Optional[dict] = None\n    created_at: int\n    updated_at: int",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class FeedbackResponse(BaseModel):\n    id: str\n    user_id: str\n    version: int\n    type: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    created_at: int\n    updated_at: int\nclass RatingData(BaseModel):",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "RatingData",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class RatingData(BaseModel):\n    rating: Optional[str | int] = None\n    model_id: Optional[str] = None\n    sibling_model_ids: Optional[list[str]] = None\n    reason: Optional[str] = None\n    comment: Optional[str] = None\n    model_config = ConfigDict(extra=\"allow\", protected_namespaces=())\nclass MetaData(BaseModel):\n    arena: Optional[bool] = None\n    chat_id: Optional[str] = None",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class MetaData(BaseModel):\n    arena: Optional[bool] = None\n    chat_id: Optional[str] = None\n    message_id: Optional[str] = None\n    tags: Optional[list[str]] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass SnapshotData(BaseModel):\n    chat: Optional[dict] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass FeedbackForm(BaseModel):",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "SnapshotData",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class SnapshotData(BaseModel):\n    chat: Optional[dict] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass FeedbackForm(BaseModel):\n    type: str\n    data: Optional[RatingData] = None\n    meta: Optional[dict] = None\n    snapshot: Optional[SnapshotData] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass FeedbackTable:",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class FeedbackForm(BaseModel):\n    type: str\n    data: Optional[RatingData] = None\n    meta: Optional[dict] = None\n    snapshot: Optional[SnapshotData] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass FeedbackTable:\n    def insert_new_feedback(\n        self, user_id: str, form_data: FeedbackForm\n    ) -> Optional[FeedbackModel]:",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "FeedbackTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "class FeedbackTable:\n    def insert_new_feedback(\n        self, user_id: str, form_data: FeedbackForm\n    ) -> Optional[FeedbackModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            feedback = FeedbackModel(\n                **{\n                    \"id\": id,\n                    \"user_id\": user_id,",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Feedback DB Schema\n####################\nclass Feedback(Base):\n    __tablename__ = \"feedback\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    version = Column(BigInteger, default=0)",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "Feedbacks",
        "kind": 5,
        "importPath": "backend.open_webui.models.feedbacks",
        "description": "backend.open_webui.models.feedbacks",
        "peekOfCode": "Feedbacks = FeedbackTable()",
        "detail": "backend.open_webui.models.feedbacks",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class File(Base):\n    __tablename__ = \"file\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    hash = Column(Text, nullable=True)\n    filename = Column(Text)\n    path = Column(Text, nullable=True)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    access_control = Column(JSON, nullable=True)",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FileModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    hash: Optional[str] = None\n    filename: str\n    path: Optional[str] = None\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileMeta",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FileMeta(BaseModel):\n    name: Optional[str] = None\n    content_type: Optional[str] = None\n    size: Optional[int] = None\n    model_config = ConfigDict(extra=\"allow\")\nclass FileModelResponse(BaseModel):\n    id: str\n    user_id: str\n    hash: Optional[str] = None\n    filename: str",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileModelResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FileModelResponse(BaseModel):\n    id: str\n    user_id: str\n    hash: Optional[str] = None\n    filename: str\n    data: Optional[dict] = None\n    meta: FileMeta\n    created_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch\n    model_config = ConfigDict(extra=\"allow\")",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileMetadataResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FileMetadataResponse(BaseModel):\n    id: str\n    meta: dict\n    created_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch\nclass FileForm(BaseModel):\n    id: str\n    hash: Optional[str] = None\n    filename: str\n    path: str",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FileForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FileForm(BaseModel):\n    id: str\n    hash: Optional[str] = None\n    filename: str\n    path: str\n    data: dict = {}\n    meta: dict = {}\n    access_control: Optional[dict] = None\nclass FilesTable:\n    def insert_new_file(self, user_id: str, form_data: FileForm) -> Optional[FileModel]:",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "FilesTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "class FilesTable:\n    def insert_new_file(self, user_id: str, form_data: FileForm) -> Optional[FileModel]:\n        with get_db() as db:\n            file = FileModel(\n                **{\n                    **form_data.model_dump(),\n                    \"user_id\": user_id,\n                    \"created_at\": int(time.time()),\n                    \"updated_at\": int(time.time()),\n                }",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Files DB Schema\n####################\nclass File(Base):\n    __tablename__ = \"file\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    hash = Column(Text, nullable=True)",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Files",
        "kind": 5,
        "importPath": "backend.open_webui.models.files",
        "description": "backend.open_webui.models.files",
        "peekOfCode": "Files = FilesTable()",
        "detail": "backend.open_webui.models.files",
        "documentation": {}
    },
    {
        "label": "Folder",
        "kind": 6,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "class Folder(Base):\n    __tablename__ = \"folder\"\n    id = Column(Text, primary_key=True)\n    parent_id = Column(Text, nullable=True)\n    user_id = Column(Text)\n    name = Column(Text)\n    items = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    is_expanded = Column(Boolean, default=False)\n    created_at = Column(BigInteger)",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "FolderModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "class FolderModel(BaseModel):\n    id: str\n    parent_id: Optional[str] = None\n    user_id: str\n    name: str\n    items: Optional[dict] = None\n    meta: Optional[dict] = None\n    is_expanded: bool = False\n    created_at: int\n    updated_at: int",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "FolderForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "class FolderForm(BaseModel):\n    name: str\n    model_config = ConfigDict(extra=\"allow\")\nclass FolderTable:\n    def insert_new_folder(\n        self, user_id: str, name: str, parent_id: Optional[str] = None\n    ) -> Optional[FolderModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            folder = FolderModel(",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "FolderTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "class FolderTable:\n    def insert_new_folder(\n        self, user_id: str, name: str, parent_id: Optional[str] = None\n    ) -> Optional[FolderModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            folder = FolderModel(\n                **{\n                    \"id\": id,\n                    \"user_id\": user_id,",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Folder DB Schema\n####################\nclass Folder(Base):\n    __tablename__ = \"folder\"\n    id = Column(Text, primary_key=True)\n    parent_id = Column(Text, nullable=True)\n    user_id = Column(Text)",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "Folders",
        "kind": 5,
        "importPath": "backend.open_webui.models.folders",
        "description": "backend.open_webui.models.folders",
        "peekOfCode": "Folders = FolderTable()",
        "detail": "backend.open_webui.models.folders",
        "documentation": {}
    },
    {
        "label": "Function",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class Function(Base):\n    __tablename__ = \"function\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    name = Column(Text)\n    type = Column(Text)\n    content = Column(Text)\n    meta = Column(JSONField)\n    valves = Column(JSONField)\n    is_active = Column(Boolean)",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionMeta",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionMeta(BaseModel):\n    description: Optional[str] = None\n    manifest: Optional[dict] = {}\nclass FunctionModel(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    type: str\n    content: str\n    meta: FunctionMeta",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionModel(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    type: str\n    content: str\n    meta: FunctionMeta\n    is_active: bool = False\n    is_global: bool = False\n    updated_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionResponse(BaseModel):\n    id: str\n    user_id: str\n    type: str\n    name: str\n    meta: FunctionMeta\n    is_active: bool\n    is_global: bool\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionForm(BaseModel):\n    id: str\n    name: str\n    content: str\n    meta: FunctionMeta\nclass FunctionValves(BaseModel):\n    valves: Optional[dict] = None\nclass FunctionsTable:\n    def insert_new_function(\n        self, user_id: str, type: str, form_data: FunctionForm",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionValves",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionValves(BaseModel):\n    valves: Optional[dict] = None\nclass FunctionsTable:\n    def insert_new_function(\n        self, user_id: str, type: str, form_data: FunctionForm\n    ) -> Optional[FunctionModel]:\n        function = FunctionModel(\n            **{\n                **form_data.model_dump(),\n                \"user_id\": user_id,",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "FunctionsTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "class FunctionsTable:\n    def insert_new_function(\n        self, user_id: str, type: str, form_data: FunctionForm\n    ) -> Optional[FunctionModel]:\n        function = FunctionModel(\n            **{\n                **form_data.model_dump(),\n                \"user_id\": user_id,\n                \"type\": type,\n                \"updated_at\": int(time.time()),",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Functions DB Schema\n####################\nclass Function(Base):\n    __tablename__ = \"function\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    name = Column(Text)",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Functions",
        "kind": 5,
        "importPath": "backend.open_webui.models.functions",
        "description": "backend.open_webui.models.functions",
        "peekOfCode": "Functions = FunctionsTable()",
        "detail": "backend.open_webui.models.functions",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class Group(Base):\n    __tablename__ = \"group\"\n    id = Column(Text, unique=True, primary_key=True)\n    user_id = Column(Text)\n    name = Column(Text)\n    description = Column(Text)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    permissions = Column(JSON, nullable=True)\n    user_ids = Column(JSON, nullable=True)",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class GroupModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    name: str\n    description: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    permissions: Optional[dict] = None\n    user_ids: list[str] = []",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class GroupResponse(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    description: str\n    permissions: Optional[dict] = None\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    user_ids: list[str] = []\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class GroupForm(BaseModel):\n    name: str\n    description: str\n    permissions: Optional[dict] = None\nclass GroupUpdateForm(GroupForm):\n    user_ids: Optional[list[str]] = None\nclass GroupTable:\n    def insert_new_group(\n        self, user_id: str, form_data: GroupForm\n    ) -> Optional[GroupModel]:",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupUpdateForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class GroupUpdateForm(GroupForm):\n    user_ids: Optional[list[str]] = None\nclass GroupTable:\n    def insert_new_group(\n        self, user_id: str, form_data: GroupForm\n    ) -> Optional[GroupModel]:\n        with get_db() as db:\n            group = GroupModel(\n                **{\n                    **form_data.model_dump(exclude_none=True),",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "GroupTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "class GroupTable:\n    def insert_new_group(\n        self, user_id: str, form_data: GroupForm\n    ) -> Optional[GroupModel]:\n        with get_db() as db:\n            group = GroupModel(\n                **{\n                    **form_data.model_dump(exclude_none=True),\n                    \"id\": str(uuid.uuid4()),\n                    \"user_id\": user_id,",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# UserGroup DB Schema\n####################\nclass Group(Base):\n    __tablename__ = \"group\"\n    id = Column(Text, unique=True, primary_key=True)\n    user_id = Column(Text)\n    name = Column(Text)",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Groups",
        "kind": 5,
        "importPath": "backend.open_webui.models.groups",
        "description": "backend.open_webui.models.groups",
        "peekOfCode": "Groups = GroupTable()",
        "detail": "backend.open_webui.models.groups",
        "documentation": {}
    },
    {
        "label": "Knowledge",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class Knowledge(Base):\n    __tablename__ = \"knowledge\"\n    id = Column(Text, unique=True, primary_key=True)\n    user_id = Column(Text)\n    name = Column(Text)\n    description = Column(Text)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    access_control = Column(JSON, nullable=True)  # Controls data access levels.\n    # Defines access control rules for this entry.",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    name: str\n    description: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeUserModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeUserModel(KnowledgeModel):\n    user: Optional[UserResponse] = None\nclass KnowledgeResponse(KnowledgeModel):\n    files: Optional[list[FileMetadataResponse | dict]] = None\nclass KnowledgeUserResponse(KnowledgeUserModel):\n    files: Optional[list[FileMetadataResponse | dict]] = None\nclass KnowledgeForm(BaseModel):\n    name: str\n    description: str\n    data: Optional[dict] = None",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeResponse(KnowledgeModel):\n    files: Optional[list[FileMetadataResponse | dict]] = None\nclass KnowledgeUserResponse(KnowledgeUserModel):\n    files: Optional[list[FileMetadataResponse | dict]] = None\nclass KnowledgeForm(BaseModel):\n    name: str\n    description: str\n    data: Optional[dict] = None\n    access_control: Optional[dict] = None\nclass KnowledgeTable:",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeUserResponse(KnowledgeUserModel):\n    files: Optional[list[FileMetadataResponse | dict]] = None\nclass KnowledgeForm(BaseModel):\n    name: str\n    description: str\n    data: Optional[dict] = None\n    access_control: Optional[dict] = None\nclass KnowledgeTable:\n    def insert_new_knowledge(\n        self, user_id: str, form_data: KnowledgeForm",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeForm(BaseModel):\n    name: str\n    description: str\n    data: Optional[dict] = None\n    access_control: Optional[dict] = None\nclass KnowledgeTable:\n    def insert_new_knowledge(\n        self, user_id: str, form_data: KnowledgeForm\n    ) -> Optional[KnowledgeModel]:\n        with get_db() as db:",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "class KnowledgeTable:\n    def insert_new_knowledge(\n        self, user_id: str, form_data: KnowledgeForm\n    ) -> Optional[KnowledgeModel]:\n        with get_db() as db:\n            knowledge = KnowledgeModel(\n                **{\n                    **form_data.model_dump(),\n                    \"id\": str(uuid.uuid4()),\n                    \"user_id\": user_id,",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Knowledge DB Schema\n####################\nclass Knowledge(Base):\n    __tablename__ = \"knowledge\"\n    id = Column(Text, unique=True, primary_key=True)\n    user_id = Column(Text)\n    name = Column(Text)",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "Knowledges",
        "kind": 5,
        "importPath": "backend.open_webui.models.knowledge",
        "description": "backend.open_webui.models.knowledge",
        "peekOfCode": "Knowledges = KnowledgeTable()",
        "detail": "backend.open_webui.models.knowledge",
        "documentation": {}
    },
    {
        "label": "Memory",
        "kind": 6,
        "importPath": "backend.open_webui.models.memories",
        "description": "backend.open_webui.models.memories",
        "peekOfCode": "class Memory(Base):\n    __tablename__ = \"memory\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    content = Column(Text)\n    updated_at = Column(BigInteger)\n    created_at = Column(BigInteger)\nclass MemoryModel(BaseModel):\n    id: str\n    user_id: str",
        "detail": "backend.open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "MemoryModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.memories",
        "description": "backend.open_webui.models.memories",
        "peekOfCode": "class MemoryModel(BaseModel):\n    id: str\n    user_id: str\n    content: str\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\n    model_config = ConfigDict(from_attributes=True)\n####################\n# Forms\n####################",
        "detail": "backend.open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "MemoriesTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.memories",
        "description": "backend.open_webui.models.memories",
        "peekOfCode": "class MemoriesTable:\n    def insert_new_memory(\n        self,\n        user_id: str,\n        content: str,\n    ) -> Optional[MemoryModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            memory = MemoryModel(\n                **{",
        "detail": "backend.open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "Memories",
        "kind": 5,
        "importPath": "backend.open_webui.models.memories",
        "description": "backend.open_webui.models.memories",
        "peekOfCode": "Memories = MemoriesTable()",
        "detail": "backend.open_webui.models.memories",
        "documentation": {}
    },
    {
        "label": "MessageReaction",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageReaction(Base):\n    __tablename__ = \"message_reaction\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    message_id = Column(Text)\n    name = Column(Text)\n    created_at = Column(BigInteger)\nclass MessageReactionModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageReactionModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageReactionModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    message_id: str\n    name: str\n    created_at: int  # timestamp in epoch\nclass Message(Base):\n    __tablename__ = \"message\"\n    id = Column(Text, primary_key=True)",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class Message(Base):\n    __tablename__ = \"message\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    channel_id = Column(Text, nullable=True)\n    parent_id = Column(Text, nullable=True)\n    content = Column(Text)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    created_at = Column(BigInteger)  # time_ns",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    channel_id: Optional[str] = None\n    parent_id: Optional[str] = None\n    content: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageForm(BaseModel):\n    content: str\n    parent_id: Optional[str] = None\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\nclass Reactions(BaseModel):\n    name: str\n    user_ids: list[str]\n    count: int\nclass MessageResponse(MessageModel):",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "Reactions",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class Reactions(BaseModel):\n    name: str\n    user_ids: list[str]\n    count: int\nclass MessageResponse(MessageModel):\n    latest_reply_at: Optional[int]\n    reply_count: int\n    reactions: list[Reactions]\nclass MessageTable:\n    def insert_new_message(",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageResponse(MessageModel):\n    latest_reply_at: Optional[int]\n    reply_count: int\n    reactions: list[Reactions]\nclass MessageTable:\n    def insert_new_message(\n        self, form_data: MessageForm, channel_id: str, user_id: str\n    ) -> Optional[MessageModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "MessageTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "class MessageTable:\n    def insert_new_message(\n        self, form_data: MessageForm, channel_id: str, user_id: str\n    ) -> Optional[MessageModel]:\n        with get_db() as db:\n            id = str(uuid.uuid4())\n            ts = int(time.time_ns())\n            message = MessageModel(\n                **{\n                    \"id\": id,",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "Messages",
        "kind": 5,
        "importPath": "backend.open_webui.models.messages",
        "description": "backend.open_webui.models.messages",
        "peekOfCode": "Messages = MessageTable()",
        "detail": "backend.open_webui.models.messages",
        "documentation": {}
    },
    {
        "label": "ModelParams",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelParams(BaseModel):\n    model_config = ConfigDict(extra=\"allow\")\n    pass\n# ModelMeta is a model for the data stored in the meta field of the Model table\nclass ModelMeta(BaseModel):\n    profile_image_url: Optional[str] = \"/static/favicon.png\"\n    description: Optional[str] = None\n    \"\"\"\n        User-facing description of the model.\n    \"\"\"",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelMeta",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelMeta(BaseModel):\n    profile_image_url: Optional[str] = \"/static/favicon.png\"\n    description: Optional[str] = None\n    \"\"\"\n        User-facing description of the model.\n    \"\"\"\n    capabilities: Optional[dict] = None\n    model_config = ConfigDict(extra=\"allow\")\n    pass\nclass Model(Base):",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class Model(Base):\n    __tablename__ = \"model\"\n    id = Column(Text, primary_key=True)\n    \"\"\"\n        The model's id as used in the API. If set to an existing model, it will override the model.\n    \"\"\"\n    user_id = Column(Text)\n    base_model_id = Column(Text, nullable=True)\n    \"\"\"\n        An optional pointer to the actual model that should be used when proxying requests.",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelModel(BaseModel):\n    id: str\n    user_id: str\n    base_model_id: Optional[str] = None\n    name: str\n    params: ModelParams\n    meta: ModelMeta\n    access_control: Optional[dict] = None\n    is_active: bool\n    updated_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelUserResponse(ModelModel):\n    user: Optional[UserResponse] = None\nclass ModelResponse(ModelModel):\n    pass\nclass ModelForm(BaseModel):\n    id: str\n    base_model_id: Optional[str] = None\n    name: str\n    meta: ModelMeta\n    params: ModelParams",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelResponse(ModelModel):\n    pass\nclass ModelForm(BaseModel):\n    id: str\n    base_model_id: Optional[str] = None\n    name: str\n    meta: ModelMeta\n    params: ModelParams\n    access_control: Optional[dict] = None\n    is_active: bool = True",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelForm(BaseModel):\n    id: str\n    base_model_id: Optional[str] = None\n    name: str\n    meta: ModelMeta\n    params: ModelParams\n    access_control: Optional[dict] = None\n    is_active: bool = True\nclass ModelsTable:\n    def insert_new_model(",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "ModelsTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "class ModelsTable:\n    def insert_new_model(\n        self, form_data: ModelForm, user_id: str\n    ) -> Optional[ModelModel]:\n        model = ModelModel(\n            **{\n                **form_data.model_dump(),\n                \"user_id\": user_id,\n                \"created_at\": int(time.time()),\n                \"updated_at\": int(time.time()),",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Models DB Schema\n####################\n# ModelParams is a model for the data stored in the params field of the Model table\nclass ModelParams(BaseModel):\n    model_config = ConfigDict(extra=\"allow\")\n    pass\n# ModelMeta is a model for the data stored in the meta field of the Model table",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Models",
        "kind": 5,
        "importPath": "backend.open_webui.models.models",
        "description": "backend.open_webui.models.models",
        "peekOfCode": "Models = ModelsTable()",
        "detail": "backend.open_webui.models.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "class Note(Base):\n    __tablename__ = \"note\"\n    id = Column(Text, primary_key=True)\n    user_id = Column(Text)\n    title = Column(Text)\n    data = Column(JSON, nullable=True)\n    meta = Column(JSON, nullable=True)\n    access_control = Column(JSON, nullable=True)\n    created_at = Column(BigInteger)\n    updated_at = Column(BigInteger)",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "class NoteModel(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: str\n    user_id: str\n    title: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None\n    created_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "class NoteForm(BaseModel):\n    title: str\n    data: Optional[dict] = None\n    meta: Optional[dict] = None\n    access_control: Optional[dict] = None\nclass NoteUserResponse(NoteModel):\n    user: Optional[UserResponse] = None\nclass NoteTable:\n    def insert_new_note(\n        self,",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "class NoteUserResponse(NoteModel):\n    user: Optional[UserResponse] = None\nclass NoteTable:\n    def insert_new_note(\n        self,\n        form_data: NoteForm,\n        user_id: str,\n    ) -> Optional[NoteModel]:\n        with get_db() as db:\n            note = NoteModel(",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "NoteTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "class NoteTable:\n    def insert_new_note(\n        self,\n        form_data: NoteForm,\n        user_id: str,\n    ) -> Optional[NoteModel]:\n        with get_db() as db:\n            note = NoteModel(\n                **{\n                    \"id\": str(uuid.uuid4()),",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "Notes",
        "kind": 5,
        "importPath": "backend.open_webui.models.notes",
        "description": "backend.open_webui.models.notes",
        "peekOfCode": "Notes = NoteTable()",
        "detail": "backend.open_webui.models.notes",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "kind": 6,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "class Prompt(Base):\n    __tablename__ = \"prompt\"\n    command = Column(String, primary_key=True)\n    user_id = Column(String)\n    title = Column(Text)\n    content = Column(Text)\n    timestamp = Column(BigInteger)\n    access_control = Column(JSON, nullable=True)  # Controls data access levels.\n    # Defines access control rules for this entry.\n    # - `None`: Public access, available to all users with the \"user\" role.",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "class PromptModel(BaseModel):\n    command: str\n    user_id: str\n    title: str\n    content: str\n    timestamp: int  # timestamp in epoch\n    access_control: Optional[dict] = None\n    model_config = ConfigDict(from_attributes=True)\n####################\n# Forms",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "class PromptUserResponse(PromptModel):\n    user: Optional[UserResponse] = None\nclass PromptForm(BaseModel):\n    command: str\n    title: str\n    content: str\n    access_control: Optional[dict] = None\nclass PromptsTable:\n    def insert_new_prompt(\n        self, user_id: str, form_data: PromptForm",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "class PromptForm(BaseModel):\n    command: str\n    title: str\n    content: str\n    access_control: Optional[dict] = None\nclass PromptsTable:\n    def insert_new_prompt(\n        self, user_id: str, form_data: PromptForm\n    ) -> Optional[PromptModel]:\n        prompt = PromptModel(",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "PromptsTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "class PromptsTable:\n    def insert_new_prompt(\n        self, user_id: str, form_data: PromptForm\n    ) -> Optional[PromptModel]:\n        prompt = PromptModel(\n            **{\n                \"user_id\": user_id,\n                **form_data.model_dump(),\n                \"timestamp\": int(time.time()),\n            }",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "Prompts",
        "kind": 5,
        "importPath": "backend.open_webui.models.prompts",
        "description": "backend.open_webui.models.prompts",
        "peekOfCode": "Prompts = PromptsTable()",
        "detail": "backend.open_webui.models.prompts",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "class Tag(Base):\n    __tablename__ = \"tag\"\n    id = Column(String)\n    name = Column(String)\n    user_id = Column(String)\n    meta = Column(JSON, nullable=True)\n    # Unique constraint ensuring (id, user_id) is unique, not just the `id` column\n    __table_args__ = (PrimaryKeyConstraint(\"id\", \"user_id\", name=\"pk_id_user_id\"),)\nclass TagModel(BaseModel):\n    id: str",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "TagModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "class TagModel(BaseModel):\n    id: str\n    name: str\n    user_id: str\n    meta: Optional[dict] = None\n    model_config = ConfigDict(from_attributes=True)\n####################\n# Forms\n####################\nclass TagChatIdForm(BaseModel):",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "TagChatIdForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "class TagChatIdForm(BaseModel):\n    name: str\n    chat_id: str\nclass TagTable:\n    def insert_new_tag(self, name: str, user_id: str) -> Optional[TagModel]:\n        with get_db() as db:\n            id = name.replace(\" \", \"_\").lower()\n            tag = TagModel(**{\"id\": id, \"user_id\": user_id, \"name\": name})\n            try:\n                result = Tag(**tag.model_dump())",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "TagTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "class TagTable:\n    def insert_new_tag(self, name: str, user_id: str) -> Optional[TagModel]:\n        with get_db() as db:\n            id = name.replace(\" \", \"_\").lower()\n            tag = TagModel(**{\"id\": id, \"user_id\": user_id, \"name\": name})\n            try:\n                result = Tag(**tag.model_dump())\n                db.add(result)\n                db.commit()\n                db.refresh(result)",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Tag DB Schema\n####################\nclass Tag(Base):\n    __tablename__ = \"tag\"\n    id = Column(String)\n    name = Column(String)\n    user_id = Column(String)",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tags",
        "kind": 5,
        "importPath": "backend.open_webui.models.tags",
        "description": "backend.open_webui.models.tags",
        "peekOfCode": "Tags = TagTable()",
        "detail": "backend.open_webui.models.tags",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class Tool(Base):\n    __tablename__ = \"tool\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    name = Column(Text)\n    content = Column(Text)\n    specs = Column(JSONField)\n    meta = Column(JSONField)\n    valves = Column(JSONField)\n    access_control = Column(JSON, nullable=True)  # Controls data access levels.",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolMeta",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolMeta(BaseModel):\n    description: Optional[str] = None\n    manifest: Optional[dict] = {}\nclass ToolModel(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    content: str\n    specs: list[dict]\n    meta: ToolMeta",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolModel(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    content: str\n    specs: list[dict]\n    meta: ToolMeta\n    access_control: Optional[dict] = None\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolUserModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolUserModel(ToolModel):\n    user: Optional[UserResponse] = None\nclass ToolResponse(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    meta: ToolMeta\n    access_control: Optional[dict] = None\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolResponse(BaseModel):\n    id: str\n    user_id: str\n    name: str\n    meta: ToolMeta\n    access_control: Optional[dict] = None\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\nclass ToolUserResponse(ToolResponse):\n    user: Optional[UserResponse] = None",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolUserResponse(ToolResponse):\n    user: Optional[UserResponse] = None\nclass ToolForm(BaseModel):\n    id: str\n    name: str\n    content: str\n    meta: ToolMeta\n    access_control: Optional[dict] = None\nclass ToolValves(BaseModel):\n    valves: Optional[dict] = None",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolForm(BaseModel):\n    id: str\n    name: str\n    content: str\n    meta: ToolMeta\n    access_control: Optional[dict] = None\nclass ToolValves(BaseModel):\n    valves: Optional[dict] = None\nclass ToolsTable:\n    def insert_new_tool(",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolValves",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolValves(BaseModel):\n    valves: Optional[dict] = None\nclass ToolsTable:\n    def insert_new_tool(\n        self, user_id: str, form_data: ToolForm, specs: list[dict]\n    ) -> Optional[ToolModel]:\n        with get_db() as db:\n            tool = ToolModel(\n                **{\n                    **form_data.model_dump(),",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "ToolsTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "class ToolsTable:\n    def insert_new_tool(\n        self, user_id: str, form_data: ToolForm, specs: list[dict]\n    ) -> Optional[ToolModel]:\n        with get_db() as db:\n            tool = ToolModel(\n                **{\n                    **form_data.model_dump(),\n                    \"specs\": specs,\n                    \"user_id\": user_id,",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\n####################\n# Tools DB Schema\n####################\nclass Tool(Base):\n    __tablename__ = \"tool\"\n    id = Column(String, primary_key=True)\n    user_id = Column(String)\n    name = Column(Text)",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "Tools",
        "kind": 5,
        "importPath": "backend.open_webui.models.tools",
        "description": "backend.open_webui.models.tools",
        "peekOfCode": "Tools = ToolsTable()",
        "detail": "backend.open_webui.models.tools",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"user\"\n    id = Column(String, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    role = Column(String)\n    profile_image_url = Column(Text)\n    last_active_at = Column(BigInteger)\n    updated_at = Column(BigInteger)\n    created_at = Column(BigInteger)",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserSettings",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserSettings(BaseModel):\n    ui: Optional[dict] = {}\n    model_config = ConfigDict(extra=\"allow\")\n    pass\nclass UserModel(BaseModel):\n    id: str\n    name: str\n    email: str\n    role: str = \"pending\"\n    profile_image_url: str",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserModel(BaseModel):\n    id: str\n    name: str\n    email: str\n    role: str = \"pending\"\n    profile_image_url: str\n    last_active_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\n    api_key: Optional[str] = None",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserListResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserListResponse(BaseModel):\n    users: list[UserModel]\n    total: int\nclass UserResponse(BaseModel):\n    id: str\n    name: str\n    email: str\n    role: str\n    profile_image_url: str\nclass UserNameResponse(BaseModel):",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: str\n    name: str\n    email: str\n    role: str\n    profile_image_url: str\nclass UserNameResponse(BaseModel):\n    id: str\n    name: str\n    role: str",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserNameResponse",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserNameResponse(BaseModel):\n    id: str\n    name: str\n    role: str\n    profile_image_url: str\nclass UserRoleUpdateForm(BaseModel):\n    id: str\n    role: str\nclass UserUpdateForm(BaseModel):\n    role: str",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserRoleUpdateForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserRoleUpdateForm(BaseModel):\n    id: str\n    role: str\nclass UserUpdateForm(BaseModel):\n    role: str\n    name: str\n    email: str\n    profile_image_url: str\n    password: Optional[str] = None\nclass UsersTable:",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UserUpdateForm",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UserUpdateForm(BaseModel):\n    role: str\n    name: str\n    email: str\n    profile_image_url: str\n    password: Optional[str] = None\nclass UsersTable:\n    def insert_new_user(\n        self,\n        id: str,",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "UsersTable",
        "kind": 6,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "class UsersTable:\n    def insert_new_user(\n        self,\n        id: str,\n        name: str,\n        email: str,\n        profile_image_url: str = \"/user.png\",\n        role: str = \"pending\",\n        oauth_sub: Optional[str] = None,\n    ) -> Optional[UserModel]:",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 5,
        "importPath": "backend.open_webui.models.users",
        "description": "backend.open_webui.models.users",
        "peekOfCode": "Users = UsersTable()",
        "detail": "backend.open_webui.models.users",
        "documentation": {}
    },
    {
        "label": "DatalabMarkerLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.datalab_marker",
        "description": "backend.open_webui.retrieval.loaders.datalab_marker",
        "peekOfCode": "class DatalabMarkerLoader:\n    def __init__(\n        self,\n        file_path: str,\n        api_key: str,\n        langs: Optional[str] = None,\n        use_llm: bool = False,\n        skip_cache: bool = False,\n        force_ocr: bool = False,\n        paginate: bool = False,",
        "detail": "backend.open_webui.retrieval.loaders.datalab_marker",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.datalab_marker",
        "description": "backend.open_webui.retrieval.loaders.datalab_marker",
        "peekOfCode": "log = logging.getLogger(__name__)\nclass DatalabMarkerLoader:\n    def __init__(\n        self,\n        file_path: str,\n        api_key: str,\n        langs: Optional[str] = None,\n        use_llm: bool = False,\n        skip_cache: bool = False,\n        force_ocr: bool = False,",
        "detail": "backend.open_webui.retrieval.loaders.datalab_marker",
        "documentation": {}
    },
    {
        "label": "ExternalDocumentLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.external_document",
        "description": "backend.open_webui.retrieval.loaders.external_document",
        "peekOfCode": "class ExternalDocumentLoader(BaseLoader):\n    def __init__(\n        self,\n        file_path,\n        url: str,\n        api_key: str,\n        mime_type=None,\n        **kwargs,\n    ) -> None:\n        self.url = url",
        "detail": "backend.open_webui.retrieval.loaders.external_document",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.external_document",
        "description": "backend.open_webui.retrieval.loaders.external_document",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass ExternalDocumentLoader(BaseLoader):\n    def __init__(\n        self,\n        file_path,\n        url: str,\n        api_key: str,\n        mime_type=None,\n        **kwargs,",
        "detail": "backend.open_webui.retrieval.loaders.external_document",
        "documentation": {}
    },
    {
        "label": "ExternalWebLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.external_web",
        "description": "backend.open_webui.retrieval.loaders.external_web",
        "peekOfCode": "class ExternalWebLoader(BaseLoader):\n    def __init__(\n        self,\n        web_paths: Union[str, List[str]],\n        external_url: str,\n        external_api_key: str,\n        continue_on_failure: bool = True,\n        **kwargs,\n    ) -> None:\n        self.external_url = external_url",
        "detail": "backend.open_webui.retrieval.loaders.external_web",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.external_web",
        "description": "backend.open_webui.retrieval.loaders.external_web",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass ExternalWebLoader(BaseLoader):\n    def __init__(\n        self,\n        web_paths: Union[str, List[str]],\n        external_url: str,\n        external_api_key: str,\n        continue_on_failure: bool = True,\n        **kwargs,",
        "detail": "backend.open_webui.retrieval.loaders.external_web",
        "documentation": {}
    },
    {
        "label": "TikaLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.main",
        "description": "backend.open_webui.retrieval.loaders.main",
        "peekOfCode": "class TikaLoader:\n    def __init__(self, url, file_path, mime_type=None, extract_images=None):\n        self.url = url\n        self.file_path = file_path\n        self.mime_type = mime_type\n        self.extract_images = extract_images\n    def load(self) -> list[Document]:\n        with open(self.file_path, \"rb\") as f:\n            data = f.read()\n        if self.mime_type is not None:",
        "detail": "backend.open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "DoclingLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.main",
        "description": "backend.open_webui.retrieval.loaders.main",
        "peekOfCode": "class DoclingLoader:\n    def __init__(self, url, file_path=None, mime_type=None, params=None):\n        self.url = url.rstrip(\"/\")\n        self.file_path = file_path\n        self.mime_type = mime_type\n        self.params = params or {}\n    def load(self) -> list[Document]:\n        with open(self.file_path, \"rb\") as f:\n            files = {\n                \"files\": (",
        "detail": "backend.open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "Loader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.main",
        "description": "backend.open_webui.retrieval.loaders.main",
        "peekOfCode": "class Loader:\n    def __init__(self, engine: str = \"\", **kwargs):\n        self.engine = engine\n        self.kwargs = kwargs\n    def load(\n        self, filename: str, file_content_type: str, file_path: str\n    ) -> list[Document]:\n        loader = self._get_loader(filename, file_content_type, file_path)\n        docs = loader.load()\n        return [",
        "detail": "backend.open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.main",
        "description": "backend.open_webui.retrieval.loaders.main",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nknown_source_ext = [\n    \"go\",\n    \"py\",\n    \"java\",\n    \"sh\",\n    \"bat\",\n    \"ps1\",\n    \"cmd\",",
        "detail": "backend.open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "known_source_ext",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.main",
        "description": "backend.open_webui.retrieval.loaders.main",
        "peekOfCode": "known_source_ext = [\n    \"go\",\n    \"py\",\n    \"java\",\n    \"sh\",\n    \"bat\",\n    \"ps1\",\n    \"cmd\",\n    \"js\",\n    \"ts\",",
        "detail": "backend.open_webui.retrieval.loaders.main",
        "documentation": {}
    },
    {
        "label": "MistralLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.mistral",
        "description": "backend.open_webui.retrieval.loaders.mistral",
        "peekOfCode": "class MistralLoader:\n    \"\"\"\n    Enhanced Mistral OCR loader with both sync and async support.\n    Loads documents by processing them through the Mistral OCR API.\n    Performance Optimizations:\n    - Differentiated timeouts for different operations\n    - Intelligent retry logic with exponential backoff\n    - Memory-efficient file streaming for large files\n    - Connection pooling and keepalive optimization\n    - Semaphore-based concurrency control for batch processing",
        "detail": "backend.open_webui.retrieval.loaders.mistral",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.mistral",
        "description": "backend.open_webui.retrieval.loaders.mistral",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass MistralLoader:\n    \"\"\"\n    Enhanced Mistral OCR loader with both sync and async support.\n    Loads documents by processing them through the Mistral OCR API.\n    Performance Optimizations:\n    - Differentiated timeouts for different operations\n    - Intelligent retry logic with exponential backoff\n    - Memory-efficient file streaming for large files",
        "detail": "backend.open_webui.retrieval.loaders.mistral",
        "documentation": {}
    },
    {
        "label": "TavilyLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.tavily",
        "description": "backend.open_webui.retrieval.loaders.tavily",
        "peekOfCode": "class TavilyLoader(BaseLoader):\n    \"\"\"Extract web page content from URLs using Tavily Extract API.\n    This is a LangChain document loader that uses Tavily's Extract API to\n    retrieve content from web pages and return it as Document objects.\n    Args:\n        urls: URL or list of URLs to extract content from.\n        api_key: The Tavily API key.\n        extract_depth: Depth of extraction, either \"basic\" or \"advanced\".\n        continue_on_failure: Whether to continue if extraction of a URL fails.\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.loaders.tavily",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.tavily",
        "description": "backend.open_webui.retrieval.loaders.tavily",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass TavilyLoader(BaseLoader):\n    \"\"\"Extract web page content from URLs using Tavily Extract API.\n    This is a LangChain document loader that uses Tavily's Extract API to\n    retrieve content from web pages and return it as Document objects.\n    Args:\n        urls: URL or list of URLs to extract content from.\n        api_key: The Tavily API key.\n        extract_depth: Depth of extraction, either \"basic\" or \"advanced\".",
        "detail": "backend.open_webui.retrieval.loaders.tavily",
        "documentation": {}
    },
    {
        "label": "YoutubeLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.loaders.youtube",
        "description": "backend.open_webui.retrieval.loaders.youtube",
        "peekOfCode": "class YoutubeLoader:\n    \"\"\"Load `YouTube` video transcripts.\"\"\"\n    def __init__(\n        self,\n        video_id: str,\n        language: Union[str, Sequence[str]] = \"en\",\n        proxy_url: Optional[str] = None,\n    ):\n        \"\"\"Initialize with YouTube video ID.\"\"\"\n        _video_id = _parse_video_id(video_id)",
        "detail": "backend.open_webui.retrieval.loaders.youtube",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.youtube",
        "description": "backend.open_webui.retrieval.loaders.youtube",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nALLOWED_SCHEMES = {\"http\", \"https\"}\nALLOWED_NETLOCS = {\n    \"youtu.be\",\n    \"m.youtube.com\",\n    \"youtube.com\",\n    \"www.youtube.com\",\n    \"www.youtube-nocookie.com\",\n    \"vid.plus\",",
        "detail": "backend.open_webui.retrieval.loaders.youtube",
        "documentation": {}
    },
    {
        "label": "ALLOWED_SCHEMES",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.youtube",
        "description": "backend.open_webui.retrieval.loaders.youtube",
        "peekOfCode": "ALLOWED_SCHEMES = {\"http\", \"https\"}\nALLOWED_NETLOCS = {\n    \"youtu.be\",\n    \"m.youtube.com\",\n    \"youtube.com\",\n    \"www.youtube.com\",\n    \"www.youtube-nocookie.com\",\n    \"vid.plus\",\n}\ndef _parse_video_id(url: str) -> Optional[str]:",
        "detail": "backend.open_webui.retrieval.loaders.youtube",
        "documentation": {}
    },
    {
        "label": "ALLOWED_NETLOCS",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.loaders.youtube",
        "description": "backend.open_webui.retrieval.loaders.youtube",
        "peekOfCode": "ALLOWED_NETLOCS = {\n    \"youtu.be\",\n    \"m.youtube.com\",\n    \"youtube.com\",\n    \"www.youtube.com\",\n    \"www.youtube-nocookie.com\",\n    \"vid.plus\",\n}\ndef _parse_video_id(url: str) -> Optional[str]:\n    \"\"\"Parse a YouTube URL and return the video ID if valid, otherwise None.\"\"\"",
        "detail": "backend.open_webui.retrieval.loaders.youtube",
        "documentation": {}
    },
    {
        "label": "BaseReranker",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.models.base_reranker",
        "description": "backend.open_webui.retrieval.models.base_reranker",
        "peekOfCode": "class BaseReranker(ABC):\n    @abstractmethod\n    def predict(self, sentences: List[Tuple[str, str]]) -> Optional[List[float]]:\n        pass",
        "detail": "backend.open_webui.retrieval.models.base_reranker",
        "documentation": {}
    },
    {
        "label": "ColBERT",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.models.colbert",
        "description": "backend.open_webui.retrieval.models.colbert",
        "peekOfCode": "class ColBERT(BaseReranker):\n    def __init__(self, name, **kwargs) -> None:\n        log.info(\"ColBERT: Loading model\", name)\n        self.device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        DOCKER = kwargs.get(\"env\") == \"docker\"\n        if DOCKER:\n            # This is a workaround for the issue with the docker container\n            # where the torch extension is not loaded properly\n            # and the following error is thrown:\n            # /root/.cache/torch_extensions/py311_cpu/segmented_maxsim_cpp/segmented_maxsim_cpp.so: cannot open shared object file: No such file or directory",
        "detail": "backend.open_webui.retrieval.models.colbert",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.models.colbert",
        "description": "backend.open_webui.retrieval.models.colbert",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass ColBERT(BaseReranker):\n    def __init__(self, name, **kwargs) -> None:\n        log.info(\"ColBERT: Loading model\", name)\n        self.device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        DOCKER = kwargs.get(\"env\") == \"docker\"\n        if DOCKER:\n            # This is a workaround for the issue with the docker container\n            # where the torch extension is not loaded properly",
        "detail": "backend.open_webui.retrieval.models.colbert",
        "documentation": {}
    },
    {
        "label": "ExternalReranker",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.models.external",
        "description": "backend.open_webui.retrieval.models.external",
        "peekOfCode": "class ExternalReranker(BaseReranker):\n    def __init__(\n        self,\n        api_key: str,\n        url: str = \"http://localhost:8080/v1/rerank\",\n        model: str = \"reranker\",\n    ):\n        self.api_key = api_key\n        self.url = url\n        self.model = model",
        "detail": "backend.open_webui.retrieval.models.external",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.models.external",
        "description": "backend.open_webui.retrieval.models.external",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass ExternalReranker(BaseReranker):\n    def __init__(\n        self,\n        api_key: str,\n        url: str = \"http://localhost:8080/v1/rerank\",\n        model: str = \"reranker\",\n    ):\n        self.api_key = api_key",
        "detail": "backend.open_webui.retrieval.models.external",
        "documentation": {}
    },
    {
        "label": "ChromaClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.chroma",
        "description": "backend.open_webui.retrieval.vector.dbs.chroma",
        "peekOfCode": "class ChromaClient(VectorDBBase):\n    def __init__(self):\n        settings_dict = {\n            \"allow_reset\": True,\n            \"anonymized_telemetry\": False,\n        }\n        if CHROMA_CLIENT_AUTH_PROVIDER is not None:\n            settings_dict[\"chroma_client_auth_provider\"] = CHROMA_CLIENT_AUTH_PROVIDER\n        if CHROMA_CLIENT_AUTH_CREDENTIALS is not None:\n            settings_dict[\"chroma_client_auth_credentials\"] = (",
        "detail": "backend.open_webui.retrieval.vector.dbs.chroma",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.chroma",
        "description": "backend.open_webui.retrieval.vector.dbs.chroma",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass ChromaClient(VectorDBBase):\n    def __init__(self):\n        settings_dict = {\n            \"allow_reset\": True,\n            \"anonymized_telemetry\": False,\n        }\n        if CHROMA_CLIENT_AUTH_PROVIDER is not None:\n            settings_dict[\"chroma_client_auth_provider\"] = CHROMA_CLIENT_AUTH_PROVIDER",
        "detail": "backend.open_webui.retrieval.vector.dbs.chroma",
        "documentation": {}
    },
    {
        "label": "ElasticsearchClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.elasticsearch",
        "description": "backend.open_webui.retrieval.vector.dbs.elasticsearch",
        "peekOfCode": "class ElasticsearchClient(VectorDBBase):\n    \"\"\"\n    Important:\n    in order to reduce the number of indexes and since the embedding vector length is fixed, we avoid creating\n    an index for each file but store it as a text field, while seperating to different index\n    baesd on the embedding length.\n    \"\"\"\n    def __init__(self):\n        self.index_prefix = ELASTICSEARCH_INDEX_PREFIX\n        self.client = Elasticsearch(",
        "detail": "backend.open_webui.retrieval.vector.dbs.elasticsearch",
        "documentation": {}
    },
    {
        "label": "MilvusClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.milvus",
        "description": "backend.open_webui.retrieval.vector.dbs.milvus",
        "peekOfCode": "class MilvusClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open_webui\"\n        if MILVUS_TOKEN is None:\n            self.client = Client(uri=MILVUS_URI, db_name=MILVUS_DB)\n        else:\n            self.client = Client(uri=MILVUS_URI, db_name=MILVUS_DB, token=MILVUS_TOKEN)\n    def _result_to_get_result(self, result) -> GetResult:\n        ids = []\n        documents = []",
        "detail": "backend.open_webui.retrieval.vector.dbs.milvus",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.milvus",
        "description": "backend.open_webui.retrieval.vector.dbs.milvus",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass MilvusClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open_webui\"\n        if MILVUS_TOKEN is None:\n            self.client = Client(uri=MILVUS_URI, db_name=MILVUS_DB)\n        else:\n            self.client = Client(uri=MILVUS_URI, db_name=MILVUS_DB, token=MILVUS_TOKEN)\n    def _result_to_get_result(self, result) -> GetResult:",
        "detail": "backend.open_webui.retrieval.vector.dbs.milvus",
        "documentation": {}
    },
    {
        "label": "OpenSearchClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.opensearch",
        "description": "backend.open_webui.retrieval.vector.dbs.opensearch",
        "peekOfCode": "class OpenSearchClient(VectorDBBase):\n    def __init__(self):\n        self.index_prefix = \"open_webui\"\n        self.client = OpenSearch(\n            hosts=[OPENSEARCH_URI],\n            use_ssl=OPENSEARCH_SSL,\n            verify_certs=OPENSEARCH_CERT_VERIFY,\n            http_auth=(OPENSEARCH_USERNAME, OPENSEARCH_PASSWORD),\n        )\n    def _get_index_name(self, collection_name: str) -> str:",
        "detail": "backend.open_webui.retrieval.vector.dbs.opensearch",
        "documentation": {}
    },
    {
        "label": "DocumentChunk",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "class DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"\n    id = Column(Text, primary_key=True)\n    vector = Column(Vector(dim=VECTOR_LENGTH), nullable=True)\n    collection_name = Column(Text, nullable=False)\n    if PGVECTOR_PGCRYPTO:\n        text = Column(LargeBinary, nullable=True)\n        vmetadata = Column(LargeBinary, nullable=True)\n    else:\n        text = Column(Text, nullable=True)",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "PgvectorClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "class PgvectorClient(VectorDBBase):\n    def __init__(self) -> None:\n        # if no pgvector uri, use the existing database connection\n        if not PGVECTOR_DB_URL:\n            from open_webui.internal.db import Session\n            self.session = Session\n        else:\n            engine = create_engine(\n                PGVECTOR_DB_URL, pool_pre_ping=True, poolclass=NullPool\n            )",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "pgcrypto_encrypt",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "def pgcrypto_encrypt(val, key):\n    return func.pgp_sym_encrypt(val, literal(key))\ndef pgcrypto_decrypt(col, key, outtype=\"text\"):\n    return func.cast(func.pgp_sym_decrypt(col, literal(key)), outtype)\nclass DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"\n    id = Column(Text, primary_key=True)\n    vector = Column(Vector(dim=VECTOR_LENGTH), nullable=True)\n    collection_name = Column(Text, nullable=False)\n    if PGVECTOR_PGCRYPTO:",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "pgcrypto_decrypt",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "def pgcrypto_decrypt(col, key, outtype=\"text\"):\n    return func.cast(func.pgp_sym_decrypt(col, literal(key)), outtype)\nclass DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"\n    id = Column(Text, primary_key=True)\n    vector = Column(Vector(dim=VECTOR_LENGTH), nullable=True)\n    collection_name = Column(Text, nullable=False)\n    if PGVECTOR_PGCRYPTO:\n        text = Column(LargeBinary, nullable=True)\n        vmetadata = Column(LargeBinary, nullable=True)",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "VECTOR_LENGTH",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "VECTOR_LENGTH = PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH\nBase = declarative_base()\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef pgcrypto_encrypt(val, key):\n    return func.pgp_sym_encrypt(val, literal(key))\ndef pgcrypto_decrypt(col, key, outtype=\"text\"):\n    return func.cast(func.pgp_sym_decrypt(col, literal(key)), outtype)\nclass DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "Base = declarative_base()\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef pgcrypto_encrypt(val, key):\n    return func.pgp_sym_encrypt(val, literal(key))\ndef pgcrypto_decrypt(col, key, outtype=\"text\"):\n    return func.cast(func.pgp_sym_decrypt(col, literal(key)), outtype)\nclass DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"\n    id = Column(Text, primary_key=True)",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "description": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef pgcrypto_encrypt(val, key):\n    return func.pgp_sym_encrypt(val, literal(key))\ndef pgcrypto_decrypt(col, key, outtype=\"text\"):\n    return func.cast(func.pgp_sym_decrypt(col, literal(key)), outtype)\nclass DocumentChunk(Base):\n    __tablename__ = \"document_chunk\"\n    id = Column(Text, primary_key=True)\n    vector = Column(Vector(dim=VECTOR_LENGTH), nullable=True)",
        "detail": "backend.open_webui.retrieval.vector.dbs.pgvector",
        "documentation": {}
    },
    {
        "label": "PineconeClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "description": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "peekOfCode": "class PineconeClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        # Validate required configuration\n        self._validate_config()\n        # Store configuration values\n        self.api_key = PINECONE_API_KEY\n        self.environment = PINECONE_ENVIRONMENT\n        self.index_name = PINECONE_INDEX_NAME\n        self.dimension = PINECONE_DIMENSION",
        "detail": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "documentation": {}
    },
    {
        "label": "NO_LIMIT",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "description": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "peekOfCode": "NO_LIMIT = 10000  # Reasonable limit to avoid overwhelming the system\nBATCH_SIZE = 100  # Recommended batch size for Pinecone operations\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass PineconeClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        # Validate required configuration\n        self._validate_config()\n        # Store configuration values",
        "detail": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "documentation": {}
    },
    {
        "label": "BATCH_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "description": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "peekOfCode": "BATCH_SIZE = 100  # Recommended batch size for Pinecone operations\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass PineconeClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        # Validate required configuration\n        self._validate_config()\n        # Store configuration values\n        self.api_key = PINECONE_API_KEY",
        "detail": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "description": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass PineconeClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        # Validate required configuration\n        self._validate_config()\n        # Store configuration values\n        self.api_key = PINECONE_API_KEY\n        self.environment = PINECONE_ENVIRONMENT",
        "detail": "backend.open_webui.retrieval.vector.dbs.pinecone",
        "documentation": {}
    },
    {
        "label": "QdrantClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "peekOfCode": "class QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC\n        self.GRPC_PORT = QDRANT_GRPC_PORT\n        if not self.QDRANT_URI:\n            self.client = None",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "documentation": {}
    },
    {
        "label": "NO_LIMIT",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "peekOfCode": "NO_LIMIT = 999999999\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC\n        self.GRPC_PORT = QDRANT_GRPC_PORT",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant",
        "documentation": {}
    },
    {
        "label": "QdrantClient",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "peekOfCode": "class QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC\n        self.GRPC_PORT = QDRANT_GRPC_PORT\n        if not self.QDRANT_URI:\n            self.client = None",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "documentation": {}
    },
    {
        "label": "NO_LIMIT",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "peekOfCode": "NO_LIMIT = 999999999\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "description": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nclass QdrantClient(VectorDBBase):\n    def __init__(self):\n        self.collection_prefix = \"open-webui\"\n        self.QDRANT_URI = QDRANT_URI\n        self.QDRANT_API_KEY = QDRANT_API_KEY\n        self.QDRANT_ON_DISK = QDRANT_ON_DISK\n        self.PREFER_GRPC = QDRANT_PREFER_GRPC\n        self.GRPC_PORT = QDRANT_GRPC_PORT",
        "detail": "backend.open_webui.retrieval.vector.dbs.qdrant_multitenancy",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.factory",
        "description": "backend.open_webui.retrieval.vector.factory",
        "peekOfCode": "class Vector:\n    @staticmethod\n    def get_vector(vector_type: str) -> VectorDBBase:\n        \"\"\"\n        get vector db instance by vector type\n        \"\"\"\n        match vector_type:\n            case VectorType.MILVUS:\n                from open_webui.retrieval.vector.dbs.milvus import MilvusClient\n                return MilvusClient()",
        "detail": "backend.open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB_CLIENT",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.vector.factory",
        "description": "backend.open_webui.retrieval.vector.factory",
        "peekOfCode": "VECTOR_DB_CLIENT = Vector.get_vector(VECTOR_DB)",
        "detail": "backend.open_webui.retrieval.vector.factory",
        "documentation": {}
    },
    {
        "label": "VectorItem",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.main",
        "description": "backend.open_webui.retrieval.vector.main",
        "peekOfCode": "class VectorItem(BaseModel):\n    id: str\n    text: str\n    vector: List[float | int]\n    metadata: Any\nclass GetResult(BaseModel):\n    ids: Optional[List[List[str]]]\n    documents: Optional[List[List[str]]]\n    metadatas: Optional[List[List[Any]]]\nclass SearchResult(GetResult):",
        "detail": "backend.open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "GetResult",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.main",
        "description": "backend.open_webui.retrieval.vector.main",
        "peekOfCode": "class GetResult(BaseModel):\n    ids: Optional[List[List[str]]]\n    documents: Optional[List[List[str]]]\n    metadatas: Optional[List[List[Any]]]\nclass SearchResult(GetResult):\n    distances: Optional[List[List[float | int]]]\nclass VectorDBBase(ABC):\n    \"\"\"\n    Abstract base class for all vector database backends.\n    Implementations of this class provide methods for collection management,",
        "detail": "backend.open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.main",
        "description": "backend.open_webui.retrieval.vector.main",
        "peekOfCode": "class SearchResult(GetResult):\n    distances: Optional[List[List[float | int]]]\nclass VectorDBBase(ABC):\n    \"\"\"\n    Abstract base class for all vector database backends.\n    Implementations of this class provide methods for collection management,\n    vector insertion, deletion, similarity search, and metadata filtering.\n    Any custom vector database integration must inherit from this class and\n    implement all abstract methods.\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorDBBase",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.main",
        "description": "backend.open_webui.retrieval.vector.main",
        "peekOfCode": "class VectorDBBase(ABC):\n    \"\"\"\n    Abstract base class for all vector database backends.\n    Implementations of this class provide methods for collection management,\n    vector insertion, deletion, similarity search, and metadata filtering.\n    Any custom vector database integration must inherit from this class and\n    implement all abstract methods.\n    \"\"\"\n    @abstractmethod\n    def has_collection(self, collection_name: str) -> bool:",
        "detail": "backend.open_webui.retrieval.vector.main",
        "documentation": {}
    },
    {
        "label": "VectorType",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.vector.type",
        "description": "backend.open_webui.retrieval.vector.type",
        "peekOfCode": "class VectorType(StrEnum):\n    MILVUS = \"milvus\"\n    QDRANT = \"qdrant\"\n    CHROMA = \"chroma\"\n    PINECONE = \"pinecone\"\n    ELASTICSEARCH = \"elasticsearch\"\n    OPENSEARCH = \"opensearch\"\n    PGVECTOR = \"pgvector\"",
        "detail": "backend.open_webui.retrieval.vector.type",
        "documentation": {}
    },
    {
        "label": "search_bing",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.bing",
        "description": "backend.open_webui.retrieval.web.bing",
        "peekOfCode": "def search_bing(\n    subscription_key: str,\n    endpoint: str,\n    locale: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    mkt = locale\n    params = {\"q\": query, \"mkt\": mkt, \"count\": count}",
        "detail": "backend.open_webui.retrieval.web.bing",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.bing",
        "description": "backend.open_webui.retrieval.web.bing",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Search Bing from the command line.\")\n    parser.add_argument(\n        \"query\",\n        type=str,\n        default=\"Top 10 international news today\",\n        help=\"The search query.\",\n    )\n    parser.add_argument(\n        \"--count\", type=int, default=10, help=\"Number of search results to return.\"",
        "detail": "backend.open_webui.retrieval.web.bing",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.bing",
        "description": "backend.open_webui.retrieval.web.bing",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\n\"\"\"\nDocumentation: https://docs.microsoft.com/en-us/bing/search-apis/bing-web-search/overview\n\"\"\"\ndef search_bing(\n    subscription_key: str,\n    endpoint: str,\n    locale: str,\n    query: str,",
        "detail": "backend.open_webui.retrieval.web.bing",
        "documentation": {}
    },
    {
        "label": "search_bocha",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.bocha",
        "description": "backend.open_webui.retrieval.web.bocha",
        "peekOfCode": "def search_bocha(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Bocha's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Bocha Search API key\n        query (str): The query to search for\n    \"\"\"\n    url = \"https://api.bochaai.com/v1/web-search?utm_source=ollama\"\n    headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}",
        "detail": "backend.open_webui.retrieval.web.bocha",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.bocha",
        "description": "backend.open_webui.retrieval.web.bocha",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef _parse_response(response):\n    result = {}\n    if \"data\" in response:\n        data = response[\"data\"]\n        if \"webPages\" in data:\n            webPages = data[\"webPages\"]\n            if \"value\" in webPages:\n                result[\"webpage\"] = [",
        "detail": "backend.open_webui.retrieval.web.bocha",
        "documentation": {}
    },
    {
        "label": "search_brave",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.brave",
        "description": "backend.open_webui.retrieval.web.brave",
        "peekOfCode": "def search_brave(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Brave's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Brave Search API key\n        query (str): The query to search for\n    \"\"\"\n    url = \"https://api.search.brave.com/res/v1/web/search\"\n    headers = {",
        "detail": "backend.open_webui.retrieval.web.brave",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.brave",
        "description": "backend.open_webui.retrieval.web.brave",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_brave(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Brave's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Brave Search API key\n        query (str): The query to search for\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.web.brave",
        "documentation": {}
    },
    {
        "label": "search_duckduckgo",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.duckduckgo",
        "description": "backend.open_webui.retrieval.web.duckduckgo",
        "peekOfCode": "def search_duckduckgo(\n    query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"\n    Search using DuckDuckGo's Search API and return the results as a list of SearchResult objects.\n    Args:\n        query (str): The query to search for\n        count (int): The number of results to return\n    Returns:\n        list[SearchResult]: A list of search results",
        "detail": "backend.open_webui.retrieval.web.duckduckgo",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.duckduckgo",
        "description": "backend.open_webui.retrieval.web.duckduckgo",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_duckduckgo(\n    query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"\n    Search using DuckDuckGo's Search API and return the results as a list of SearchResult objects.\n    Args:\n        query (str): The query to search for\n        count (int): The number of results to return",
        "detail": "backend.open_webui.retrieval.web.duckduckgo",
        "documentation": {}
    },
    {
        "label": "ExaResult",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.exa",
        "description": "backend.open_webui.retrieval.web.exa",
        "peekOfCode": "class ExaResult:\n    url: str\n    title: str\n    text: str\ndef search_exa(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:",
        "detail": "backend.open_webui.retrieval.web.exa",
        "documentation": {}
    },
    {
        "label": "search_exa",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.exa",
        "description": "backend.open_webui.retrieval.web.exa",
        "peekOfCode": "def search_exa(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using Exa Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Exa Search API key\n        query (str): The query to search for",
        "detail": "backend.open_webui.retrieval.web.exa",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.exa",
        "description": "backend.open_webui.retrieval.web.exa",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nEXA_API_BASE = \"https://api.exa.ai\"\n@dataclass\nclass ExaResult:\n    url: str\n    title: str\n    text: str\ndef search_exa(\n    api_key: str,",
        "detail": "backend.open_webui.retrieval.web.exa",
        "documentation": {}
    },
    {
        "label": "EXA_API_BASE",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.exa",
        "description": "backend.open_webui.retrieval.web.exa",
        "peekOfCode": "EXA_API_BASE = \"https://api.exa.ai\"\n@dataclass\nclass ExaResult:\n    url: str\n    title: str\n    text: str\ndef search_exa(\n    api_key: str,\n    query: str,\n    count: int,",
        "detail": "backend.open_webui.retrieval.web.exa",
        "documentation": {}
    },
    {
        "label": "search_external",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.external",
        "description": "backend.open_webui.retrieval.web.external",
        "peekOfCode": "def search_external(\n    external_url: str,\n    external_api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    try:\n        response = requests.post(\n            external_url,",
        "detail": "backend.open_webui.retrieval.web.external",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.external",
        "description": "backend.open_webui.retrieval.web.external",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_external(\n    external_url: str,\n    external_api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    try:",
        "detail": "backend.open_webui.retrieval.web.external",
        "documentation": {}
    },
    {
        "label": "search_firecrawl",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.firecrawl",
        "description": "backend.open_webui.retrieval.web.firecrawl",
        "peekOfCode": "def search_firecrawl(\n    firecrawl_url: str,\n    firecrawl_api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    try:\n        firecrawl_search_url = urljoin(firecrawl_url, \"/v1/search\")\n        response = requests.post(",
        "detail": "backend.open_webui.retrieval.web.firecrawl",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.firecrawl",
        "description": "backend.open_webui.retrieval.web.firecrawl",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_firecrawl(\n    firecrawl_url: str,\n    firecrawl_api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    try:",
        "detail": "backend.open_webui.retrieval.web.firecrawl",
        "documentation": {}
    },
    {
        "label": "search_google_pse",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.google_pse",
        "description": "backend.open_webui.retrieval.web.google_pse",
        "peekOfCode": "def search_google_pse(\n    api_key: str,\n    search_engine_id: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using Google's Programmable Search Engine API and return the results as a list of SearchResult objects.\n    Handles pagination for counts greater than 10.\n    Args:",
        "detail": "backend.open_webui.retrieval.web.google_pse",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.google_pse",
        "description": "backend.open_webui.retrieval.web.google_pse",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_google_pse(\n    api_key: str,\n    search_engine_id: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using Google's Programmable Search Engine API and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.google_pse",
        "documentation": {}
    },
    {
        "label": "search_jina",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.jina_search",
        "description": "backend.open_webui.retrieval.web.jina_search",
        "peekOfCode": "def search_jina(api_key: str, query: str, count: int) -> list[SearchResult]:\n    \"\"\"\n    Search using Jina's Search API and return the results as a list of SearchResult objects.\n    Args:\n        query (str): The query to search for\n        count (int): The number of results to return\n    Returns:\n        list[SearchResult]: A list of search results\n    \"\"\"\n    jina_search_endpoint = \"https://s.jina.ai/\"",
        "detail": "backend.open_webui.retrieval.web.jina_search",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.jina_search",
        "description": "backend.open_webui.retrieval.web.jina_search",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_jina(api_key: str, query: str, count: int) -> list[SearchResult]:\n    \"\"\"\n    Search using Jina's Search API and return the results as a list of SearchResult objects.\n    Args:\n        query (str): The query to search for\n        count (int): The number of results to return\n    Returns:\n        list[SearchResult]: A list of search results",
        "detail": "backend.open_webui.retrieval.web.jina_search",
        "documentation": {}
    },
    {
        "label": "search_kagi",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.kagi",
        "description": "backend.open_webui.retrieval.web.kagi",
        "peekOfCode": "def search_kagi(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Kagi's Search API and return the results as a list of SearchResult objects.\n    The Search API will inherit the settings in your account, including results personalization and snippet length.\n    Args:\n        api_key (str): A Kagi Search API key\n        query (str): The query to search for\n        count (int): The number of results to return\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.web.kagi",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.kagi",
        "description": "backend.open_webui.retrieval.web.kagi",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_kagi(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Kagi's Search API and return the results as a list of SearchResult objects.\n    The Search API will inherit the settings in your account, including results personalization and snippet length.\n    Args:\n        api_key (str): A Kagi Search API key\n        query (str): The query to search for",
        "detail": "backend.open_webui.retrieval.web.kagi",
        "documentation": {}
    },
    {
        "label": "SearchResult",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.main",
        "description": "backend.open_webui.retrieval.web.main",
        "peekOfCode": "class SearchResult(BaseModel):\n    link: str\n    title: Optional[str]\n    snippet: Optional[str]",
        "detail": "backend.open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "get_filtered_results",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.main",
        "description": "backend.open_webui.retrieval.web.main",
        "peekOfCode": "def get_filtered_results(results, filter_list):\n    if not filter_list:\n        return results\n    filtered_results = []\n    for result in results:\n        url = result.get(\"url\") or result.get(\"link\", \"\")\n        if not validators.url(url):\n            continue\n        domain = urlparse(url).netloc\n        if any(domain.endswith(filtered_domain) for filtered_domain in filter_list):",
        "detail": "backend.open_webui.retrieval.web.main",
        "documentation": {}
    },
    {
        "label": "search_mojeek",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.mojeek",
        "description": "backend.open_webui.retrieval.web.mojeek",
        "peekOfCode": "def search_mojeek(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Mojeek's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Mojeek Search API key\n        query (str): The query to search for\n    \"\"\"\n    url = \"https://api.mojeek.com/search\"\n    headers = {",
        "detail": "backend.open_webui.retrieval.web.mojeek",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.mojeek",
        "description": "backend.open_webui.retrieval.web.mojeek",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_mojeek(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using Mojeek's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Mojeek Search API key\n        query (str): The query to search for\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.web.mojeek",
        "documentation": {}
    },
    {
        "label": "search_perplexity",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.perplexity",
        "description": "backend.open_webui.retrieval.web.perplexity",
        "peekOfCode": "def search_perplexity(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    model: MODELS = \"sonar\",\n    search_context_usage: SEARCH_CONTEXT_USAGE_LEVELS = \"medium\",\n) -> list[SearchResult]:\n    \"\"\"Search using Perplexity API and return the results as a list of SearchResult objects.\n    Args:",
        "detail": "backend.open_webui.retrieval.web.perplexity",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.perplexity",
        "description": "backend.open_webui.retrieval.web.perplexity",
        "peekOfCode": "MODELS = Literal[\n    \"sonar\",\n    \"sonar-pro\",\n    \"sonar-reasoning\",\n    \"sonar-reasoning-pro\",\n    \"sonar-deep-research\",\n]\nSEARCH_CONTEXT_USAGE_LEVELS = Literal[\"low\", \"medium\", \"high\"]\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])",
        "detail": "backend.open_webui.retrieval.web.perplexity",
        "documentation": {}
    },
    {
        "label": "SEARCH_CONTEXT_USAGE_LEVELS",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.perplexity",
        "description": "backend.open_webui.retrieval.web.perplexity",
        "peekOfCode": "SEARCH_CONTEXT_USAGE_LEVELS = Literal[\"low\", \"medium\", \"high\"]\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_perplexity(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    model: MODELS = \"sonar\",\n    search_context_usage: SEARCH_CONTEXT_USAGE_LEVELS = \"medium\",",
        "detail": "backend.open_webui.retrieval.web.perplexity",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.perplexity",
        "description": "backend.open_webui.retrieval.web.perplexity",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_perplexity(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    model: MODELS = \"sonar\",\n    search_context_usage: SEARCH_CONTEXT_USAGE_LEVELS = \"medium\",\n) -> list[SearchResult]:",
        "detail": "backend.open_webui.retrieval.web.perplexity",
        "documentation": {}
    },
    {
        "label": "search_searchapi",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.searchapi",
        "description": "backend.open_webui.retrieval.web.searchapi",
        "peekOfCode": "def search_searchapi(\n    api_key: str,\n    engine: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using searchapi.io's API and return the results as a list of SearchResult objects.\n    Args:\n      api_key (str): A searchapi.io API key",
        "detail": "backend.open_webui.retrieval.web.searchapi",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.searchapi",
        "description": "backend.open_webui.retrieval.web.searchapi",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_searchapi(\n    api_key: str,\n    engine: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using searchapi.io's API and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.searchapi",
        "documentation": {}
    },
    {
        "label": "search_searxng",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.searxng",
        "description": "backend.open_webui.retrieval.web.searxng",
        "peekOfCode": "def search_searxng(\n    query_url: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    **kwargs,\n) -> list[SearchResult]:\n    \"\"\"\n    Search a SearXNG instance for a given query and return the results as a list of SearchResult objects.\n    The function allows passing additional parameters such as language or time_range to tailor the search result.",
        "detail": "backend.open_webui.retrieval.web.searxng",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.searxng",
        "description": "backend.open_webui.retrieval.web.searxng",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_searxng(\n    query_url: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    **kwargs,\n) -> list[SearchResult]:\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.web.searxng",
        "documentation": {}
    },
    {
        "label": "search_serpapi",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.serpapi",
        "description": "backend.open_webui.retrieval.web.serpapi",
        "peekOfCode": "def search_serpapi(\n    api_key: str,\n    engine: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using serpapi.com's API and return the results as a list of SearchResult objects.\n    Args:\n      api_key (str): A serpapi.com API key",
        "detail": "backend.open_webui.retrieval.web.serpapi",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.serpapi",
        "description": "backend.open_webui.retrieval.web.serpapi",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_serpapi(\n    api_key: str,\n    engine: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"Search using serpapi.com's API and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.serpapi",
        "documentation": {}
    },
    {
        "label": "search_serper",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.serper",
        "description": "backend.open_webui.retrieval.web.serper",
        "peekOfCode": "def search_serper(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using serper.dev's API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A serper.dev API key\n        query (str): The query to search for\n    \"\"\"\n    url = \"https://google.serper.dev/search\"\n    payload = json.dumps({\"q\": query})",
        "detail": "backend.open_webui.retrieval.web.serper",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.serper",
        "description": "backend.open_webui.retrieval.web.serper",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_serper(\n    api_key: str, query: str, count: int, filter_list: Optional[list[str]] = None\n) -> list[SearchResult]:\n    \"\"\"Search using serper.dev's API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A serper.dev API key\n        query (str): The query to search for\n    \"\"\"",
        "detail": "backend.open_webui.retrieval.web.serper",
        "documentation": {}
    },
    {
        "label": "search_serply",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.serply",
        "description": "backend.open_webui.retrieval.web.serply",
        "peekOfCode": "def search_serply(\n    api_key: str,\n    query: str,\n    count: int,\n    hl: str = \"us\",\n    limit: int = 10,\n    device_type: str = \"desktop\",\n    proxy_location: str = \"US\",\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:",
        "detail": "backend.open_webui.retrieval.web.serply",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.serply",
        "description": "backend.open_webui.retrieval.web.serply",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_serply(\n    api_key: str,\n    query: str,\n    count: int,\n    hl: str = \"us\",\n    limit: int = 10,\n    device_type: str = \"desktop\",\n    proxy_location: str = \"US\",",
        "detail": "backend.open_webui.retrieval.web.serply",
        "documentation": {}
    },
    {
        "label": "search_serpstack",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.serpstack",
        "description": "backend.open_webui.retrieval.web.serpstack",
        "peekOfCode": "def search_serpstack(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    https_enabled: bool = True,\n) -> list[SearchResult]:\n    \"\"\"Search using serpstack.com's and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A serpstack.com API key",
        "detail": "backend.open_webui.retrieval.web.serpstack",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.serpstack",
        "description": "backend.open_webui.retrieval.web.serpstack",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_serpstack(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    https_enabled: bool = True,\n) -> list[SearchResult]:\n    \"\"\"Search using serpstack.com's and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.serpstack",
        "documentation": {}
    },
    {
        "label": "search_sougou",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.sougou",
        "description": "backend.open_webui.retrieval.web.sougou",
        "peekOfCode": "def search_sougou(\n    sougou_api_sid: str,\n    sougou_api_sk: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    from tencentcloud.common.common_client import CommonClient\n    from tencentcloud.common import credential\n    from tencentcloud.common.exception.tencent_cloud_sdk_exception import (",
        "detail": "backend.open_webui.retrieval.web.sougou",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.sougou",
        "description": "backend.open_webui.retrieval.web.sougou",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_sougou(\n    sougou_api_sid: str,\n    sougou_api_sk: str,\n    query: str,\n    count: int,\n    filter_list: Optional[List[str]] = None,\n) -> List[SearchResult]:\n    from tencentcloud.common.common_client import CommonClient",
        "detail": "backend.open_webui.retrieval.web.sougou",
        "documentation": {}
    },
    {
        "label": "search_tavily",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.tavily",
        "description": "backend.open_webui.retrieval.web.tavily",
        "peekOfCode": "def search_tavily(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    # **kwargs,\n) -> list[SearchResult]:\n    \"\"\"Search using Tavily's Search API and return the results as a list of SearchResult objects.\n    Args:\n        api_key (str): A Tavily Search API key",
        "detail": "backend.open_webui.retrieval.web.tavily",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.tavily",
        "description": "backend.open_webui.retrieval.web.tavily",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_tavily(\n    api_key: str,\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n    # **kwargs,\n) -> list[SearchResult]:\n    \"\"\"Search using Tavily's Search API and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.tavily",
        "documentation": {}
    },
    {
        "label": "RateLimitMixin",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class RateLimitMixin:\n    async def _wait_for_rate_limit(self):\n        \"\"\"Wait to respect the rate limit if specified.\"\"\"\n        if self.requests_per_second and self.last_request_time:\n            min_interval = timedelta(seconds=1.0 / self.requests_per_second)\n            time_since_last = datetime.now() - self.last_request_time\n            if time_since_last < min_interval:\n                await asyncio.sleep((min_interval - time_since_last).total_seconds())\n        self.last_request_time = datetime.now()\n    def _sync_wait_for_rate_limit(self):",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "URLProcessingMixin",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class URLProcessingMixin:\n    def _verify_ssl_cert(self, url: str) -> bool:\n        \"\"\"Verify SSL certificate for a URL.\"\"\"\n        return verify_ssl_cert(url)\n    async def _safe_process_url(self, url: str) -> bool:\n        \"\"\"Perform safety checks before processing a URL.\"\"\"\n        if self.verify_ssl and not self._verify_ssl_cert(url):\n            raise ValueError(f\"SSL certificate verification failed for {url}\")\n        await self._wait_for_rate_limit()\n        return True",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "SafeFireCrawlLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class SafeFireCrawlLoader(BaseLoader, RateLimitMixin, URLProcessingMixin):\n    def __init__(\n        self,\n        web_paths,\n        verify_ssl: bool = True,\n        trust_env: bool = False,\n        requests_per_second: Optional[float] = None,\n        continue_on_failure: bool = True,\n        api_key: Optional[str] = None,\n        api_url: Optional[str] = None,",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "SafeTavilyLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class SafeTavilyLoader(BaseLoader, RateLimitMixin, URLProcessingMixin):\n    def __init__(\n        self,\n        web_paths: Union[str, List[str]],\n        api_key: str,\n        extract_depth: Literal[\"basic\", \"advanced\"] = \"basic\",\n        continue_on_failure: bool = True,\n        requests_per_second: Optional[float] = None,\n        verify_ssl: bool = True,\n        trust_env: bool = False,",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "SafePlaywrightURLLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class SafePlaywrightURLLoader(PlaywrightURLLoader, RateLimitMixin, URLProcessingMixin):\n    \"\"\"Load HTML pages safely with Playwright, supporting SSL verification, rate limiting, and remote browser connection.\n    Attributes:\n        web_paths (List[str]): List of URLs to load.\n        verify_ssl (bool): If True, verify SSL certificates.\n        trust_env (bool): If True, use proxy settings from environment variables.\n        requests_per_second (Optional[float]): Number of requests per second to limit to.\n        continue_on_failure (bool): If True, continue loading other URLs on failure.\n        headless (bool): If True, the browser will run in headless mode.\n        proxy (dict): Proxy override settings for the Playwright session.",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "SafeWebBaseLoader",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "class SafeWebBaseLoader(WebBaseLoader):\n    \"\"\"WebBaseLoader with enhanced error handling for URLs.\"\"\"\n    def __init__(self, trust_env: bool = False, *args, **kwargs):\n        \"\"\"Initialize SafeWebBaseLoader\n        Args:\n            trust_env (bool, optional): set to True if using proxy to make web requests, for example\n                using http(s)_proxy environment variables. Defaults to False.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        self.trust_env = trust_env",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "validate_url",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def validate_url(url: Union[str, Sequence[str]]):\n    if isinstance(url, str):\n        if isinstance(validators.url(url), validators.ValidationError):\n            raise ValueError(ERROR_MESSAGES.INVALID_URL)\n        if not ENABLE_RAG_LOCAL_WEB_FETCH:\n            # Local web fetch is disabled, filter out any URLs that resolve to private IP addresses\n            parsed_url = urllib.parse.urlparse(url)\n            # Get IPv4 and IPv6 addresses\n            ipv4_addresses, ipv6_addresses = resolve_hostname(parsed_url.hostname)\n            # Check if any of the resolved addresses are private",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "safe_validate_urls",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def safe_validate_urls(url: Sequence[str]) -> Sequence[str]:\n    valid_urls = []\n    for u in url:\n        try:\n            if validate_url(u):\n                valid_urls.append(u)\n        except ValueError:\n            continue\n    return valid_urls\ndef resolve_hostname(hostname):",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "resolve_hostname",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def resolve_hostname(hostname):\n    # Get address information\n    addr_info = socket.getaddrinfo(hostname, None)\n    # Extract IP addresses from address information\n    ipv4_addresses = [info[4][0] for info in addr_info if info[0] == socket.AF_INET]\n    ipv6_addresses = [info[4][0] for info in addr_info if info[0] == socket.AF_INET6]\n    return ipv4_addresses, ipv6_addresses\ndef extract_metadata(soup, url):\n    metadata = {\"source\": url}\n    if title := soup.find(\"title\"):",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "extract_metadata",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def extract_metadata(soup, url):\n    metadata = {\"source\": url}\n    if title := soup.find(\"title\"):\n        metadata[\"title\"] = title.get_text()\n    if description := soup.find(\"meta\", attrs={\"name\": \"description\"}):\n        metadata[\"description\"] = description.get(\"content\", \"No description found.\")\n    if html := soup.find(\"html\"):\n        metadata[\"language\"] = html.get(\"lang\", \"No language found.\")\n    return metadata\ndef verify_ssl_cert(url: str) -> bool:",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "verify_ssl_cert",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def verify_ssl_cert(url: str) -> bool:\n    \"\"\"Verify SSL certificate for the given URL.\"\"\"\n    if not url.startswith(\"https://\"):\n        return True\n    try:\n        hostname = url.split(\"://\")[-1].split(\"/\")[0]\n        context = ssl.create_default_context(cafile=certifi.where())\n        with context.wrap_socket(ssl.socket(), server_hostname=hostname) as s:\n            s.connect((hostname, 443))\n        return True",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "get_web_loader",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "def get_web_loader(\n    urls: Union[str, Sequence[str]],\n    verify_ssl: bool = True,\n    requests_per_second: int = 2,\n    trust_env: bool = False,\n):\n    # Check if the URLs are valid\n    safe_urls = safe_validate_urls([urls] if isinstance(urls, str) else urls)\n    web_loader_args = {\n        \"web_paths\": safe_urls,",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.utils",
        "description": "backend.open_webui.retrieval.web.utils",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef validate_url(url: Union[str, Sequence[str]]):\n    if isinstance(url, str):\n        if isinstance(validators.url(url), validators.ValidationError):\n            raise ValueError(ERROR_MESSAGES.INVALID_URL)\n        if not ENABLE_RAG_LOCAL_WEB_FETCH:\n            # Local web fetch is disabled, filter out any URLs that resolve to private IP addresses\n            parsed_url = urllib.parse.urlparse(url)\n            # Get IPv4 and IPv6 addresses",
        "detail": "backend.open_webui.retrieval.web.utils",
        "documentation": {}
    },
    {
        "label": "search_yacy",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.web.yacy",
        "description": "backend.open_webui.retrieval.web.yacy",
        "peekOfCode": "def search_yacy(\n    query_url: str,\n    username: Optional[str],\n    password: Optional[str],\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:\n    \"\"\"\n    Search a Yacy instance for a given query and return the results as a list of SearchResult objects.",
        "detail": "backend.open_webui.retrieval.web.yacy",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.web.yacy",
        "description": "backend.open_webui.retrieval.web.yacy",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef search_yacy(\n    query_url: str,\n    username: Optional[str],\n    password: Optional[str],\n    query: str,\n    count: int,\n    filter_list: Optional[list[str]] = None,\n) -> list[SearchResult]:",
        "detail": "backend.open_webui.retrieval.web.yacy",
        "documentation": {}
    },
    {
        "label": "VectorSearchRetriever",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "class VectorSearchRetriever(BaseRetriever):\n    collection_name: Any\n    embedding_function: Any\n    top_k: int\n    def _get_relevant_documents(\n        self,\n        query: str,\n        *,\n        run_manager: CallbackManagerForRetrieverRun,\n    ) -> list[Document]:",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "RerankCompressor",
        "kind": 6,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "class RerankCompressor(BaseDocumentCompressor):\n    embedding_function: Any\n    top_n: int\n    reranking_function: Any\n    r_score: float\n    class Config:\n        extra = \"forbid\"\n        arbitrary_types_allowed = True\n    def compress_documents(\n        self,",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_doc",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def query_doc(\n    collection_name: str, query_embedding: list[float], k: int, user: UserModel = None\n):\n    try:\n        log.debug(f\"query_doc:doc {collection_name}\")\n        result = VECTOR_DB_CLIENT.search(\n            collection_name=collection_name,\n            vectors=[query_embedding],\n            limit=k,\n        )",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_doc",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def get_doc(collection_name: str, user: UserModel = None):\n    try:\n        log.debug(f\"get_doc:doc {collection_name}\")\n        result = VECTOR_DB_CLIENT.get(collection_name=collection_name)\n        if result:\n            log.info(f\"query_doc:result {result.ids} {result.metadatas}\")\n        return result\n    except Exception as e:\n        log.exception(f\"Error getting doc {collection_name}: {e}\")\n        raise e",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_doc_with_hybrid_search",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def query_doc_with_hybrid_search(\n    collection_name: str,\n    collection_result: GetResult,\n    query: str,\n    embedding_function,\n    k: int,\n    reranking_function,\n    k_reranker: int,\n    r: float,\n    hybrid_bm25_weight: float,",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "merge_get_results",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def merge_get_results(get_results: list[dict]) -> dict:\n    # Initialize lists to store combined data\n    combined_documents = []\n    combined_metadatas = []\n    combined_ids = []\n    for data in get_results:\n        combined_documents.extend(data[\"documents\"][0])\n        combined_metadatas.extend(data[\"metadatas\"][0])\n        combined_ids.extend(data[\"ids\"][0])\n    # Create the output dictionary",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "merge_and_sort_query_results",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def merge_and_sort_query_results(query_results: list[dict], k: int) -> dict:\n    # Initialize lists to store combined data\n    combined = dict()  # To store documents with unique document hashes\n    for data in query_results:\n        distances = data[\"distances\"][0]\n        documents = data[\"documents\"][0]\n        metadatas = data[\"metadatas\"][0]\n        for distance, document, metadata in zip(distances, documents, metadatas):\n            if isinstance(document, str):\n                doc_hash = hashlib.sha256(",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_all_items_from_collections",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def get_all_items_from_collections(collection_names: list[str]) -> dict:\n    results = []\n    for collection_name in collection_names:\n        if collection_name:\n            try:\n                result = get_doc(collection_name=collection_name)\n                if result is not None:\n                    results.append(result.model_dump())\n            except Exception as e:\n                log.exception(f\"Error when querying the collection: {e}\")",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_collection",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def query_collection(\n    collection_names: list[str],\n    queries: list[str],\n    embedding_function,\n    k: int,\n) -> dict:\n    results = []\n    error = False\n    def process_query_collection(collection_name, query_embedding):\n        try:",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "query_collection_with_hybrid_search",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def query_collection_with_hybrid_search(\n    collection_names: list[str],\n    queries: list[str],\n    embedding_function,\n    k: int,\n    reranking_function,\n    k_reranker: int,\n    r: float,\n    hybrid_bm25_weight: float,\n) -> dict:",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_embedding_function",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def get_embedding_function(\n    embedding_engine,\n    embedding_model,\n    embedding_function,\n    url,\n    key,\n    embedding_batch_size,\n    azure_api_version=None,\n):\n    if embedding_engine == \"\":",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_sources_from_files",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def get_sources_from_files(\n    request,\n    files,\n    queries,\n    embedding_function,\n    k,\n    reranking_function,\n    k_reranker,\n    r,\n    hybrid_bm25_weight,",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "get_model_path",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def get_model_path(model: str, update_model: bool = False):\n    # Construct huggingface_hub kwargs with local_files_only to return the snapshot path\n    cache_dir = os.getenv(\"SENTENCE_TRANSFORMERS_HOME\")\n    local_files_only = not update_model\n    if OFFLINE_MODE:\n        local_files_only = True\n    snapshot_kwargs = {\n        \"cache_dir\": cache_dir,\n        \"local_files_only\": local_files_only,\n    }",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "generate_openai_batch_embeddings",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def generate_openai_batch_embeddings(\n    model: str,\n    texts: list[str],\n    url: str = \"https://api.openai.com/v1\",\n    key: str = \"\",\n    prefix: str = None,\n    user: UserModel = None,\n) -> Optional[list[list[float]]]:\n    try:\n        log.debug(",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "generate_azure_openai_batch_embeddings",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def generate_azure_openai_batch_embeddings(\n    model: str,\n    texts: list[str],\n    url: str,\n    key: str = \"\",\n    version: str = \"\",\n    prefix: str = None,\n    user: UserModel = None,\n) -> Optional[list[list[float]]]:\n    try:",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "generate_ollama_batch_embeddings",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def generate_ollama_batch_embeddings(\n    model: str,\n    texts: list[str],\n    url: str,\n    key: str = \"\",\n    prefix: str = None,\n    user: UserModel = None,\n) -> Optional[list[list[float]]]:\n    try:\n        log.debug(",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "generate_embeddings",
        "kind": 2,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "def generate_embeddings(\n    engine: str,\n    model: str,\n    text: Union[str, list[str]],\n    prefix: Union[str, None] = None,\n    **kwargs,\n):\n    url = kwargs.get(\"url\", \"\")\n    key = kwargs.get(\"key\", \"\")\n    user = kwargs.get(\"user\")",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.retrieval.utils",
        "description": "backend.open_webui.retrieval.utils",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\nfrom typing import Any\nfrom langchain_core.callbacks import CallbackManagerForRetrieverRun\nfrom langchain_core.retrievers import BaseRetriever\nclass VectorSearchRetriever(BaseRetriever):\n    collection_name: Any\n    embedding_function: Any\n    top_k: int\n    def _get_relevant_documents(",
        "detail": "backend.open_webui.retrieval.utils",
        "documentation": {}
    },
    {
        "label": "TTSConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "class TTSConfigForm(BaseModel):\n    OPENAI_API_BASE_URL: str\n    OPENAI_API_KEY: str\n    API_KEY: str\n    ENGINE: str\n    MODEL: str\n    VOICE: str\n    SPLIT_ON: str\n    AZURE_SPEECH_REGION: str\n    AZURE_SPEECH_BASE_URL: str",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "STTConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "class STTConfigForm(BaseModel):\n    OPENAI_API_BASE_URL: str\n    OPENAI_API_KEY: str\n    ENGINE: str\n    MODEL: str\n    WHISPER_MODEL: str\n    DEEPGRAM_API_KEY: str\n    AZURE_API_KEY: str\n    AZURE_REGION: str\n    AZURE_LOCALES: str",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "AudioConfigUpdateForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "class AudioConfigUpdateForm(BaseModel):\n    tts: TTSConfigForm\n    stt: STTConfigForm\n@router.get(\"/config\")\nasync def get_audio_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"tts\": {\n            \"OPENAI_API_BASE_URL\": request.app.state.config.TTS_OPENAI_API_BASE_URL,\n            \"OPENAI_API_KEY\": request.app.state.config.TTS_OPENAI_API_KEY,\n            \"API_KEY\": request.app.state.config.TTS_API_KEY,",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "is_audio_conversion_required",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def is_audio_conversion_required(file_path):\n    \"\"\"\n    Check if the given audio file needs conversion to mp3.\n    \"\"\"\n    SUPPORTED_FORMATS = {\"flac\", \"m4a\", \"mp3\", \"mp4\", \"mpeg\", \"wav\", \"webm\"}\n    if not os.path.isfile(file_path):\n        log.error(f\"File not found: {file_path}\")\n        return False\n    try:\n        info = mediainfo(file_path)",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "convert_audio_to_mp3",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def convert_audio_to_mp3(file_path):\n    \"\"\"Convert audio file to mp3 format.\"\"\"\n    try:\n        output_path = os.path.splitext(file_path)[0] + \".mp3\"\n        audio = AudioSegment.from_file(file_path)\n        audio.export(output_path, format=\"mp3\")\n        log.info(f\"Converted {file_path} to {output_path}\")\n        return output_path\n    except Exception as e:\n        log.error(f\"Error converting audio file: {e}\")",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "set_faster_whisper_model",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def set_faster_whisper_model(model: str, auto_update: bool = False):\n    whisper_model = None\n    if model:\n        from faster_whisper import WhisperModel\n        faster_whisper_kwargs = {\n            \"model_size_or_path\": model,\n            \"device\": DEVICE_TYPE if DEVICE_TYPE and DEVICE_TYPE == \"cuda\" else \"cpu\",\n            \"compute_type\": \"int8\",\n            \"download_root\": WHISPER_MODEL_DIR,\n            \"local_files_only\": not auto_update,",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "load_speech_pipeline",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def load_speech_pipeline(request):\n    from transformers import pipeline\n    from datasets import load_dataset\n    if request.app.state.speech_synthesiser is None:\n        request.app.state.speech_synthesiser = pipeline(\n            \"text-to-speech\", \"microsoft/speecht5_tts\"\n        )\n    if request.app.state.speech_speaker_embeddings_dataset is None:\n        request.app.state.speech_speaker_embeddings_dataset = load_dataset(\n            \"Matthijs/cmu-arctic-xvectors\", split=\"validation\"",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "transcription_handler",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def transcription_handler(request, file_path, metadata):\n    filename = os.path.basename(file_path)\n    file_dir = os.path.dirname(file_path)\n    id = filename.split(\".\")[0]\n    metadata = metadata or {}\n    if request.app.state.config.STT_ENGINE == \"\":\n        if request.app.state.faster_whisper_model is None:\n            request.app.state.faster_whisper_model = set_faster_whisper_model(\n                request.app.state.config.WHISPER_MODEL\n            )",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "transcribe",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def transcribe(request: Request, file_path: str, metadata: Optional[dict] = None):\n    log.info(f\"transcribe: {file_path} {metadata}\")\n    if is_audio_conversion_required(file_path):\n        file_path = convert_audio_to_mp3(file_path)\n    try:\n        file_path = compress_audio(file_path)\n    except Exception as e:\n        log.exception(e)\n    # Always produce a list of chunk paths (could be one entry if small)\n    try:",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "compress_audio",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def compress_audio(file_path):\n    if os.path.getsize(file_path) > MAX_FILE_SIZE:\n        id = os.path.splitext(os.path.basename(file_path))[\n            0\n        ]  # Handles names with multiple dots\n        file_dir = os.path.dirname(file_path)\n        audio = AudioSegment.from_file(file_path)\n        audio = audio.set_frame_rate(16000).set_channels(1)  # Compress audio\n        compressed_path = os.path.join(file_dir, f\"{id}_compressed.mp3\")\n        audio.export(compressed_path, format=\"mp3\", bitrate=\"32k\")",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "split_audio",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def split_audio(file_path, max_bytes, format=\"mp3\", bitrate=\"32k\"):\n    \"\"\"\n    Splits audio into chunks not exceeding max_bytes.\n    Returns a list of chunk file paths. If audio fits, returns list with original path.\n    \"\"\"\n    file_size = os.path.getsize(file_path)\n    if file_size <= max_bytes:\n        return [file_path]  # Nothing to split\n    audio = AudioSegment.from_file(file_path)\n    duration_ms = len(audio)",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "transcription",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def transcription(\n    request: Request,\n    file: UploadFile = File(...),\n    language: Optional[str] = Form(None),\n    user=Depends(get_verified_user),\n):\n    log.info(f\"file.content_type: {file.content_type}\")\n    SUPPORTED_CONTENT_TYPES = {\"video/webm\"}  # Extend if you add more video types!\n    if not (\n        file.content_type.startswith(\"audio/\")",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "get_available_models",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def get_available_models(request: Request) -> list[dict]:\n    available_models = []\n    if request.app.state.config.TTS_ENGINE == \"openai\":\n        # Use custom endpoint if not using the official OpenAI API URL\n        if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\n            \"https://api.openai.com\"\n        ):\n            try:\n                response = requests.get(\n                    f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "get_available_voices",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def get_available_voices(request) -> dict:\n    \"\"\"Returns {voice_id: voice_name} dict\"\"\"\n    available_voices = {}\n    if request.app.state.config.TTS_ENGINE == \"openai\":\n        # Use custom endpoint if not using the official OpenAI API URL\n        if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\n            \"https://api.openai.com\"\n        ):\n            try:\n                response = requests.get(",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "get_elevenlabs_voices",
        "kind": 2,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "def get_elevenlabs_voices(api_key: str) -> dict:\n    \"\"\"\n    Note, set the following in your .env file to use Elevenlabs:\n    AUDIO_TTS_ENGINE=elevenlabs\n    AUDIO_TTS_API_KEY=sk_...  # Your Elevenlabs API key\n    AUDIO_TTS_VOICE=EXAVITQu4vr4xnSDxMaL  # From https://api.elevenlabs.io/v1/voices\n    AUDIO_TTS_MODEL=eleven_multilingual_v2\n    \"\"\"\n    try:\n        # TODO: Add retries",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "router = APIRouter()\n# Constants\nMAX_FILE_SIZE_MB = 20\nMAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nAZURE_MAX_FILE_SIZE_MB = 200\nAZURE_MAX_FILE_SIZE = AZURE_MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE_MB",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "MAX_FILE_SIZE_MB = 20\nMAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nAZURE_MAX_FILE_SIZE_MB = 200\nAZURE_MAX_FILE_SIZE = AZURE_MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nAZURE_MAX_FILE_SIZE_MB = 200\nAZURE_MAX_FILE_SIZE = AZURE_MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#\n# Utility functions",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "AZURE_MAX_FILE_SIZE_MB",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "AZURE_MAX_FILE_SIZE_MB = 200\nAZURE_MAX_FILE_SIZE = AZURE_MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#\n# Utility functions\n#",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "AZURE_MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "AZURE_MAX_FILE_SIZE = AZURE_MAX_FILE_SIZE_MB * 1024 * 1024  # Convert MB to bytes\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#\n# Utility functions\n#\n##########################################",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"AUDIO\"])\nSPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#\n# Utility functions\n#\n##########################################\nfrom pydub import AudioSegment",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "SPEECH_CACHE_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.routers.audio",
        "description": "backend.open_webui.routers.audio",
        "peekOfCode": "SPEECH_CACHE_DIR = CACHE_DIR / \"audio\" / \"speech\"\nSPEECH_CACHE_DIR.mkdir(parents=True, exist_ok=True)\n##########################################\n#\n# Utility functions\n#\n##########################################\nfrom pydub import AudioSegment\nfrom pydub.utils import mediainfo\ndef is_audio_conversion_required(file_path):",
        "detail": "backend.open_webui.routers.audio",
        "documentation": {}
    },
    {
        "label": "SessionUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "class SessionUserResponse(Token, UserResponse):\n    expires_at: Optional[int] = None\n    permissions: Optional[dict] = None\n@router.get(\"/\", response_model=SessionUserResponse)\nasync def get_session_user(\n    request: Request, response: Response, user=Depends(get_current_user)\n):\n    auth_header = request.headers.get(\"Authorization\")\n    auth_token = get_http_authorization_cred(auth_header)\n    token = auth_token.credentials",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "AdminConfig",
        "kind": 6,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "class AdminConfig(BaseModel):\n    SHOW_ADMIN_DETAILS: bool\n    WEBUI_URL: str\n    ENABLE_SIGNUP: bool\n    ENABLE_API_KEY: bool\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS: bool\n    API_KEY_ALLOWED_ENDPOINTS: str\n    DEFAULT_USER_ROLE: str\n    JWT_EXPIRES_IN: str\n    ENABLE_COMMUNITY_SHARING: bool",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "LdapServerConfig",
        "kind": 6,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "class LdapServerConfig(BaseModel):\n    label: str\n    host: str\n    port: Optional[int] = None\n    attribute_for_mail: str = \"mail\"\n    attribute_for_username: str = \"uid\"\n    app_dn: str\n    app_dn_password: str\n    search_base: str\n    search_filters: str = \"\"",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "LdapConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "class LdapConfigForm(BaseModel):\n    enable_ldap: Optional[bool] = None\n@router.post(\"/admin/config/ldap\")\nasync def update_ldap_config(\n    request: Request, form_data: LdapConfigForm, user=Depends(get_admin_user)\n):\n    request.app.state.config.ENABLE_LDAP = form_data.enable_ldap\n    return {\"ENABLE_LDAP\": request.app.state.config.ENABLE_LDAP}\n############################\n# API Key",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "router = APIRouter()\nlog = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\n############################\n# GetSessionUser\n############################\nclass SessionUserResponse(Token, UserResponse):\n    expires_at: Optional[int] = None\n    permissions: Optional[dict] = None\n@router.get(\"/\", response_model=SessionUserResponse)",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.auths",
        "description": "backend.open_webui.routers.auths",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\n############################\n# GetSessionUser\n############################\nclass SessionUserResponse(Token, UserResponse):\n    expires_at: Optional[int] = None\n    permissions: Optional[dict] = None\n@router.get(\"/\", response_model=SessionUserResponse)\nasync def get_session_user(",
        "detail": "backend.open_webui.routers.auths",
        "documentation": {}
    },
    {
        "label": "MessageUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.channels",
        "description": "backend.open_webui.routers.channels",
        "peekOfCode": "class MessageUserResponse(MessageResponse):\n    user: UserNameResponse\n@router.get(\"/{id}/messages\", response_model=list[MessageUserResponse])\nasync def get_channel_messages(\n    id: str, skip: int = 0, limit: int = 50, user=Depends(get_verified_user)\n):\n    channel = Channels.get_channel_by_id(id)\n    if not channel:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=ERROR_MESSAGES.NOT_FOUND",
        "detail": "backend.open_webui.routers.channels",
        "documentation": {}
    },
    {
        "label": "ReactionForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.channels",
        "description": "backend.open_webui.routers.channels",
        "peekOfCode": "class ReactionForm(BaseModel):\n    name: str\n@router.post(\"/{id}/messages/{message_id}/reactions/add\", response_model=bool)\nasync def add_reaction_to_message(\n    id: str, message_id: str, form_data: ReactionForm, user=Depends(get_verified_user)\n):\n    channel = Channels.get_channel_by_id(id)\n    if not channel:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=ERROR_MESSAGES.NOT_FOUND",
        "detail": "backend.open_webui.routers.channels",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.channels",
        "description": "backend.open_webui.routers.channels",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# GetChatList\n############################\n@router.get(\"/\", response_model=list[ChannelModel])\nasync def get_channels(user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        return Channels.get_channels()",
        "detail": "backend.open_webui.routers.channels",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.channels",
        "description": "backend.open_webui.routers.channels",
        "peekOfCode": "router = APIRouter()\n############################\n# GetChatList\n############################\n@router.get(\"/\", response_model=list[ChannelModel])\nasync def get_channels(user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        return Channels.get_channels()\n    else:\n        return Channels.get_channels_by_user_id(user.id)",
        "detail": "backend.open_webui.routers.channels",
        "documentation": {}
    },
    {
        "label": "TagForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class TagForm(BaseModel):\n    name: str\nclass TagFilterForm(TagForm):\n    skip: Optional[int] = 0\n    limit: Optional[int] = 50\n@router.post(\"/tags\", response_model=list[ChatTitleIdResponse])\nasync def get_user_chat_list_by_tag_name(\n    form_data: TagFilterForm, user=Depends(get_verified_user)\n):\n    chats = Chats.get_chat_list_by_user_id_and_tag_name(",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "TagFilterForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class TagFilterForm(TagForm):\n    skip: Optional[int] = 0\n    limit: Optional[int] = 50\n@router.post(\"/tags\", response_model=list[ChatTitleIdResponse])\nasync def get_user_chat_list_by_tag_name(\n    form_data: TagFilterForm, user=Depends(get_verified_user)\n):\n    chats = Chats.get_chat_list_by_user_id_and_tag_name(\n        user.id, form_data.name, form_data.skip, form_data.limit\n    )",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "MessageForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class MessageForm(BaseModel):\n    content: str\n@router.post(\"/{id}/messages/{message_id}\", response_model=Optional[ChatResponse])\nasync def update_chat_message_by_id(\n    id: str, message_id: str, form_data: MessageForm, user=Depends(get_verified_user)\n):\n    chat = Chats.get_chat_by_id(id)\n    if not chat:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "EventForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class EventForm(BaseModel):\n    type: str\n    data: dict\n@router.post(\"/{id}/messages/{message_id}/event\", response_model=Optional[bool])\nasync def send_chat_message_event_by_id(\n    id: str, message_id: str, form_data: EventForm, user=Depends(get_verified_user)\n):\n    chat = Chats.get_chat_by_id(id)\n    if not chat:\n        raise HTTPException(",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "CloneForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class CloneForm(BaseModel):\n    title: Optional[str] = None\n@router.post(\"/{id}/clone\", response_model=Optional[ChatResponse])\nasync def clone_chat_by_id(\n    form_data: CloneForm, id: str, user=Depends(get_verified_user)\n):\n    chat = Chats.get_chat_by_id_and_user_id(id, user.id)\n    if chat:\n        updated_chat = {\n            **chat.chat,",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "ChatFolderIdForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "class ChatFolderIdForm(BaseModel):\n    folder_id: Optional[str] = None\n@router.post(\"/{id}/folder\", response_model=Optional[ChatResponse])\nasync def update_chat_folder_id_by_id(\n    id: str, form_data: ChatFolderIdForm, user=Depends(get_verified_user)\n):\n    chat = Chats.get_chat_by_id_and_user_id(id, user.id)\n    if chat:\n        chat = Chats.update_chat_folder_id_by_id_and_user_id(\n            id, user.id, form_data.folder_id",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# GetChatList\n############################\n@router.get(\"/\", response_model=list[ChatTitleIdResponse])\n@router.get(\"/list\", response_model=list[ChatTitleIdResponse])\nasync def get_session_user_chat_list(\n    user=Depends(get_verified_user), page: Optional[int] = None",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.chats",
        "description": "backend.open_webui.routers.chats",
        "peekOfCode": "router = APIRouter()\n############################\n# GetChatList\n############################\n@router.get(\"/\", response_model=list[ChatTitleIdResponse])\n@router.get(\"/list\", response_model=list[ChatTitleIdResponse])\nasync def get_session_user_chat_list(\n    user=Depends(get_verified_user), page: Optional[int] = None\n):\n    if page is not None:",
        "detail": "backend.open_webui.routers.chats",
        "documentation": {}
    },
    {
        "label": "ImportConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class ImportConfigForm(BaseModel):\n    config: dict\n@router.post(\"/import\", response_model=dict)\nasync def import_config(form_data: ImportConfigForm, user=Depends(get_admin_user)):\n    save_config(form_data.config)\n    return get_config()\n############################\n# ExportConfig\n############################\n@router.get(\"/export\", response_model=dict)",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "DirectConnectionsConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class DirectConnectionsConfigForm(BaseModel):\n    ENABLE_DIRECT_CONNECTIONS: bool\n@router.get(\"/direct_connections\", response_model=DirectConnectionsConfigForm)\nasync def get_direct_connections_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"ENABLE_DIRECT_CONNECTIONS\": request.app.state.config.ENABLE_DIRECT_CONNECTIONS,\n    }\n@router.post(\"/direct_connections\", response_model=DirectConnectionsConfigForm)\nasync def set_direct_connections_config(\n    request: Request,",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "ToolServerConnection",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class ToolServerConnection(BaseModel):\n    url: str\n    path: str\n    auth_type: Optional[str]\n    key: Optional[str]\n    config: Optional[dict]\n    model_config = ConfigDict(extra=\"allow\")\nclass ToolServersConfigForm(BaseModel):\n    TOOL_SERVER_CONNECTIONS: list[ToolServerConnection]\n@router.get(\"/tool_servers\", response_model=ToolServersConfigForm)",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "ToolServersConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class ToolServersConfigForm(BaseModel):\n    TOOL_SERVER_CONNECTIONS: list[ToolServerConnection]\n@router.get(\"/tool_servers\", response_model=ToolServersConfigForm)\nasync def get_tool_servers_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"TOOL_SERVER_CONNECTIONS\": request.app.state.config.TOOL_SERVER_CONNECTIONS,\n    }\n@router.post(\"/tool_servers\", response_model=ToolServersConfigForm)\nasync def set_tool_servers_config(\n    request: Request,",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "CodeInterpreterConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class CodeInterpreterConfigForm(BaseModel):\n    ENABLE_CODE_EXECUTION: bool\n    CODE_EXECUTION_ENGINE: str\n    CODE_EXECUTION_JUPYTER_URL: Optional[str]\n    CODE_EXECUTION_JUPYTER_AUTH: Optional[str]\n    CODE_EXECUTION_JUPYTER_AUTH_TOKEN: Optional[str]\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD: Optional[str]\n    CODE_EXECUTION_JUPYTER_TIMEOUT: Optional[int]\n    ENABLE_CODE_INTERPRETER: bool\n    CODE_INTERPRETER_ENGINE: str",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "ModelsConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class ModelsConfigForm(BaseModel):\n    DEFAULT_MODELS: Optional[str]\n    MODEL_ORDER_LIST: Optional[list[str]]\n@router.get(\"/models\", response_model=ModelsConfigForm)\nasync def get_models_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"DEFAULT_MODELS\": request.app.state.config.DEFAULT_MODELS,\n        \"MODEL_ORDER_LIST\": request.app.state.config.MODEL_ORDER_LIST,\n    }\n@router.post(\"/models\", response_model=ModelsConfigForm)",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "PromptSuggestion",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class PromptSuggestion(BaseModel):\n    title: list[str]\n    content: str\nclass SetDefaultSuggestionsForm(BaseModel):\n    suggestions: list[PromptSuggestion]\n@router.post(\"/suggestions\", response_model=list[PromptSuggestion])\nasync def set_default_suggestions(\n    request: Request,\n    form_data: SetDefaultSuggestionsForm,\n    user=Depends(get_admin_user),",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "SetDefaultSuggestionsForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class SetDefaultSuggestionsForm(BaseModel):\n    suggestions: list[PromptSuggestion]\n@router.post(\"/suggestions\", response_model=list[PromptSuggestion])\nasync def set_default_suggestions(\n    request: Request,\n    form_data: SetDefaultSuggestionsForm,\n    user=Depends(get_admin_user),\n):\n    data = form_data.model_dump()\n    request.app.state.config.DEFAULT_PROMPT_SUGGESTIONS = data[\"suggestions\"]",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "SetBannersForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "class SetBannersForm(BaseModel):\n    banners: list[BannerModel]\n@router.post(\"/banners\", response_model=list[BannerModel])\nasync def set_banners(\n    request: Request,\n    form_data: SetBannersForm,\n    user=Depends(get_admin_user),\n):\n    data = form_data.model_dump()\n    request.app.state.config.BANNERS = data[\"banners\"]",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.configs",
        "description": "backend.open_webui.routers.configs",
        "peekOfCode": "router = APIRouter()\n############################\n# ImportConfig\n############################\nclass ImportConfigForm(BaseModel):\n    config: dict\n@router.post(\"/import\", response_model=dict)\nasync def import_config(form_data: ImportConfigForm, user=Depends(get_admin_user)):\n    save_config(form_data.config)\n    return get_config()",
        "detail": "backend.open_webui.routers.configs",
        "documentation": {}
    },
    {
        "label": "UpdateConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.evaluations",
        "description": "backend.open_webui.routers.evaluations",
        "peekOfCode": "class UpdateConfigForm(BaseModel):\n    ENABLE_EVALUATION_ARENA_MODELS: Optional[bool] = None\n    EVALUATION_ARENA_MODELS: Optional[list[dict]] = None\n@router.post(\"/config\")\nasync def update_config(\n    request: Request,\n    form_data: UpdateConfigForm,\n    user=Depends(get_admin_user),\n):\n    config = request.app.state.config",
        "detail": "backend.open_webui.routers.evaluations",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.evaluations",
        "description": "backend.open_webui.routers.evaluations",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: str\n    name: str\n    email: str\n    role: str = \"pending\"\n    last_active_at: int  # timestamp in epoch\n    updated_at: int  # timestamp in epoch\n    created_at: int  # timestamp in epoch\nclass FeedbackUserResponse(FeedbackResponse):\n    user: Optional[UserResponse] = None",
        "detail": "backend.open_webui.routers.evaluations",
        "documentation": {}
    },
    {
        "label": "FeedbackUserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.evaluations",
        "description": "backend.open_webui.routers.evaluations",
        "peekOfCode": "class FeedbackUserResponse(FeedbackResponse):\n    user: Optional[UserResponse] = None\n@router.get(\"/feedbacks/all\", response_model=list[FeedbackUserResponse])\nasync def get_all_feedbacks(user=Depends(get_admin_user)):\n    feedbacks = Feedbacks.get_all_feedbacks()\n    feedback_list = []\n    for feedback in feedbacks:\n        user = Users.get_user_by_id(feedback.user_id)\n        feedback_list.append(\n            FeedbackUserResponse(",
        "detail": "backend.open_webui.routers.evaluations",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.evaluations",
        "description": "backend.open_webui.routers.evaluations",
        "peekOfCode": "router = APIRouter()\n############################\n# GetConfig\n############################\n@router.get(\"/config\")\nasync def get_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"ENABLE_EVALUATION_ARENA_MODELS\": request.app.state.config.ENABLE_EVALUATION_ARENA_MODELS,\n        \"EVALUATION_ARENA_MODELS\": request.app.state.config.EVALUATION_ARENA_MODELS,\n    }",
        "detail": "backend.open_webui.routers.evaluations",
        "documentation": {}
    },
    {
        "label": "ContentForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.files",
        "description": "backend.open_webui.routers.files",
        "peekOfCode": "class ContentForm(BaseModel):\n    content: str\n@router.post(\"/{id}/data/content/update\")\nasync def update_file_data_content_by_id(\n    request: Request, id: str, form_data: ContentForm, user=Depends(get_verified_user)\n):\n    file = Files.get_file_by_id(id)\n    if not file:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "backend.open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "has_access_to_file",
        "kind": 2,
        "importPath": "backend.open_webui.routers.files",
        "description": "backend.open_webui.routers.files",
        "peekOfCode": "def has_access_to_file(\n    file_id: Optional[str], access_type: str, user=Depends(get_verified_user)\n) -> bool:\n    file = Files.get_file_by_id(file_id)\n    log.debug(f\"Checking if user has {access_type} access to file\")\n    if not file:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=ERROR_MESSAGES.NOT_FOUND,\n        )",
        "detail": "backend.open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "backend.open_webui.routers.files",
        "description": "backend.open_webui.routers.files",
        "peekOfCode": "def upload_file(\n    request: Request,\n    file: UploadFile = File(...),\n    metadata: Optional[dict | str] = Form(None),\n    process: bool = Query(True),\n    internal: bool = False,\n    user=Depends(get_verified_user),\n):\n    log.info(f\"file.content_type: {file.content_type}\")\n    if isinstance(metadata, str):",
        "detail": "backend.open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.files",
        "description": "backend.open_webui.routers.files",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# Check if the current user has access to a file through any knowledge bases the user may be in.\n############################\ndef has_access_to_file(\n    file_id: Optional[str], access_type: str, user=Depends(get_verified_user)\n) -> bool:\n    file = Files.get_file_by_id(file_id)",
        "detail": "backend.open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.files",
        "description": "backend.open_webui.routers.files",
        "peekOfCode": "router = APIRouter()\n############################\n# Check if the current user has access to a file through any knowledge bases the user may be in.\n############################\ndef has_access_to_file(\n    file_id: Optional[str], access_type: str, user=Depends(get_verified_user)\n) -> bool:\n    file = Files.get_file_by_id(file_id)\n    log.debug(f\"Checking if user has {access_type} access to file\")\n    if not file:",
        "detail": "backend.open_webui.routers.files",
        "documentation": {}
    },
    {
        "label": "FolderParentIdForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.folders",
        "description": "backend.open_webui.routers.folders",
        "peekOfCode": "class FolderParentIdForm(BaseModel):\n    parent_id: Optional[str] = None\n@router.post(\"/{id}/update/parent\")\nasync def update_folder_parent_id_by_id(\n    id: str, form_data: FolderParentIdForm, user=Depends(get_verified_user)\n):\n    folder = Folders.get_folder_by_id_and_user_id(id, user.id)\n    if folder:\n        existing_folder = Folders.get_folder_by_parent_id_and_user_id_and_name(\n            form_data.parent_id, user.id, folder.name",
        "detail": "backend.open_webui.routers.folders",
        "documentation": {}
    },
    {
        "label": "FolderIsExpandedForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.folders",
        "description": "backend.open_webui.routers.folders",
        "peekOfCode": "class FolderIsExpandedForm(BaseModel):\n    is_expanded: bool\n@router.post(\"/{id}/update/expanded\")\nasync def update_folder_is_expanded_by_id(\n    id: str, form_data: FolderIsExpandedForm, user=Depends(get_verified_user)\n):\n    folder = Folders.get_folder_by_id_and_user_id(id, user.id)\n    if folder:\n        try:\n            folder = Folders.update_folder_is_expanded_by_id_and_user_id(",
        "detail": "backend.open_webui.routers.folders",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "backend.open_webui.routers.folders",
        "description": "backend.open_webui.routers.folders",
        "peekOfCode": "def create_folder(form_data: FolderForm, user=Depends(get_verified_user)):\n    folder = Folders.get_folder_by_parent_id_and_user_id_and_name(\n        None, user.id, form_data.name\n    )\n    if folder:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=ERROR_MESSAGES.DEFAULT(\"Folder already exists\"),\n        )\n    try:",
        "detail": "backend.open_webui.routers.folders",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.folders",
        "description": "backend.open_webui.routers.folders",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# Get Folders\n############################\n@router.get(\"/\", response_model=list[FolderModel])\nasync def get_folders(user=Depends(get_verified_user)):\n    folders = Folders.get_folders_by_user_id(user.id)\n    return [",
        "detail": "backend.open_webui.routers.folders",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.folders",
        "description": "backend.open_webui.routers.folders",
        "peekOfCode": "router = APIRouter()\n############################\n# Get Folders\n############################\n@router.get(\"/\", response_model=list[FolderModel])\nasync def get_folders(user=Depends(get_verified_user)):\n    folders = Folders.get_folders_by_user_id(user.id)\n    return [\n        {\n            **folder.model_dump(),",
        "detail": "backend.open_webui.routers.folders",
        "documentation": {}
    },
    {
        "label": "LoadUrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.functions",
        "description": "backend.open_webui.routers.functions",
        "peekOfCode": "class LoadUrlForm(BaseModel):\n    url: HttpUrl\ndef github_url_to_raw_url(url: str) -> str:\n    # Handle 'tree' (folder) URLs (add main.py at the end)\n    m1 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/tree/([^/]+)/(.*)\", url)\n    if m1:\n        org, repo, branch, path = m1.groups()\n        return f\"https://raw.githubusercontent.com/{org}/{repo}/refs/heads/{branch}/{path.rstrip('/')}/main.py\"\n    # Handle 'blob' (file) URLs\n    m2 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)\", url)",
        "detail": "backend.open_webui.routers.functions",
        "documentation": {}
    },
    {
        "label": "SyncFunctionsForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.functions",
        "description": "backend.open_webui.routers.functions",
        "peekOfCode": "class SyncFunctionsForm(FunctionForm):\n    functions: list[FunctionModel] = []\n@router.post(\"/sync\", response_model=Optional[FunctionModel])\nasync def sync_functions(\n    request: Request, form_data: SyncFunctionsForm, user=Depends(get_admin_user)\n):\n    return Functions.sync_functions(user.id, form_data.functions)\n############################\n# CreateNewFunction\n############################",
        "detail": "backend.open_webui.routers.functions",
        "documentation": {}
    },
    {
        "label": "github_url_to_raw_url",
        "kind": 2,
        "importPath": "backend.open_webui.routers.functions",
        "description": "backend.open_webui.routers.functions",
        "peekOfCode": "def github_url_to_raw_url(url: str) -> str:\n    # Handle 'tree' (folder) URLs (add main.py at the end)\n    m1 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/tree/([^/]+)/(.*)\", url)\n    if m1:\n        org, repo, branch, path = m1.groups()\n        return f\"https://raw.githubusercontent.com/{org}/{repo}/refs/heads/{branch}/{path.rstrip('/')}/main.py\"\n    # Handle 'blob' (file) URLs\n    m2 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)\", url)\n    if m2:\n        org, repo, branch, path = m2.groups()",
        "detail": "backend.open_webui.routers.functions",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.functions",
        "description": "backend.open_webui.routers.functions",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nrouter = APIRouter()\n############################\n# GetFunctions\n############################\n@router.get(\"/\", response_model=list[FunctionResponse])\nasync def get_functions(user=Depends(get_verified_user)):\n    return Functions.get_functions()\n############################",
        "detail": "backend.open_webui.routers.functions",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.functions",
        "description": "backend.open_webui.routers.functions",
        "peekOfCode": "router = APIRouter()\n############################\n# GetFunctions\n############################\n@router.get(\"/\", response_model=list[FunctionResponse])\nasync def get_functions(user=Depends(get_verified_user)):\n    return Functions.get_functions()\n############################\n# ExportFunctions\n############################",
        "detail": "backend.open_webui.routers.functions",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.groups",
        "description": "backend.open_webui.routers.groups",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nrouter = APIRouter()\n############################\n# GetFunctions\n############################\n@router.get(\"/\", response_model=list[GroupResponse])\nasync def get_groups(user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        return Groups.get_groups()",
        "detail": "backend.open_webui.routers.groups",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.groups",
        "description": "backend.open_webui.routers.groups",
        "peekOfCode": "router = APIRouter()\n############################\n# GetFunctions\n############################\n@router.get(\"/\", response_model=list[GroupResponse])\nasync def get_groups(user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        return Groups.get_groups()\n    else:\n        return Groups.get_groups_by_member_id(user.id)",
        "detail": "backend.open_webui.routers.groups",
        "documentation": {}
    },
    {
        "label": "OpenAIConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class OpenAIConfigForm(BaseModel):\n    OPENAI_API_BASE_URL: str\n    OPENAI_API_KEY: str\nclass Automatic1111ConfigForm(BaseModel):\n    AUTOMATIC1111_BASE_URL: str\n    AUTOMATIC1111_API_AUTH: str\n    AUTOMATIC1111_CFG_SCALE: Optional[str | float | int]\n    AUTOMATIC1111_SAMPLER: Optional[str]\n    AUTOMATIC1111_SCHEDULER: Optional[str]\nclass ComfyUIConfigForm(BaseModel):",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "Automatic1111ConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class Automatic1111ConfigForm(BaseModel):\n    AUTOMATIC1111_BASE_URL: str\n    AUTOMATIC1111_API_AUTH: str\n    AUTOMATIC1111_CFG_SCALE: Optional[str | float | int]\n    AUTOMATIC1111_SAMPLER: Optional[str]\n    AUTOMATIC1111_SCHEDULER: Optional[str]\nclass ComfyUIConfigForm(BaseModel):\n    COMFYUI_BASE_URL: str\n    COMFYUI_API_KEY: str\n    COMFYUI_WORKFLOW: str",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "ComfyUIConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class ComfyUIConfigForm(BaseModel):\n    COMFYUI_BASE_URL: str\n    COMFYUI_API_KEY: str\n    COMFYUI_WORKFLOW: str\n    COMFYUI_WORKFLOW_NODES: list[dict]\nclass GeminiConfigForm(BaseModel):\n    GEMINI_API_BASE_URL: str\n    GEMINI_API_KEY: str\nclass ConfigForm(BaseModel):\n    enabled: bool",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "GeminiConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class GeminiConfigForm(BaseModel):\n    GEMINI_API_BASE_URL: str\n    GEMINI_API_KEY: str\nclass ConfigForm(BaseModel):\n    enabled: bool\n    engine: str\n    prompt_generation: bool\n    openai: OpenAIConfigForm\n    automatic1111: Automatic1111ConfigForm\n    comfyui: ComfyUIConfigForm",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "ConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class ConfigForm(BaseModel):\n    enabled: bool\n    engine: str\n    prompt_generation: bool\n    openai: OpenAIConfigForm\n    automatic1111: Automatic1111ConfigForm\n    comfyui: ComfyUIConfigForm\n    gemini: GeminiConfigForm\n@router.post(\"/config/update\")\nasync def update_config(",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "ImageConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class ImageConfigForm(BaseModel):\n    MODEL: str\n    IMAGE_SIZE: str\n    IMAGE_STEPS: int\n@router.get(\"/image/config\")\nasync def get_image_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"MODEL\": request.app.state.config.IMAGE_GENERATION_MODEL,\n        \"IMAGE_SIZE\": request.app.state.config.IMAGE_SIZE,\n        \"IMAGE_STEPS\": request.app.state.config.IMAGE_STEPS,",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "GenerateImageForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "class GenerateImageForm(BaseModel):\n    model: Optional[str] = None\n    prompt: str\n    size: Optional[str] = None\n    n: int = 1\n    negative_prompt: Optional[str] = None\ndef load_b64_image_data(b64_str):\n    try:\n        if \",\" in b64_str:\n            header, encoded = b64_str.split(\",\", 1)",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "get_automatic1111_api_auth",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def get_automatic1111_api_auth(request: Request):\n    if request.app.state.config.AUTOMATIC1111_API_AUTH is None:\n        return \"\"\n    else:\n        auth1111_byte_string = request.app.state.config.AUTOMATIC1111_API_AUTH.encode(\n            \"utf-8\"\n        )\n        auth1111_base64_encoded_bytes = base64.b64encode(auth1111_byte_string)\n        auth1111_base64_encoded_string = auth1111_base64_encoded_bytes.decode(\"utf-8\")\n        return f\"Basic {auth1111_base64_encoded_string}\"",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "set_image_model",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def set_image_model(request: Request, model: str):\n    log.info(f\"Setting image model to {model}\")\n    request.app.state.config.IMAGE_GENERATION_MODEL = model\n    if request.app.state.config.IMAGE_GENERATION_ENGINE in [\"\", \"automatic1111\"]:\n        api_auth = get_automatic1111_api_auth(request)\n        r = requests.get(\n            url=f\"{request.app.state.config.AUTOMATIC1111_BASE_URL}/sdapi/v1/options\",\n            headers={\"authorization\": api_auth},\n        )\n        options = r.json()",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "get_image_model",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def get_image_model(request):\n    if request.app.state.config.IMAGE_GENERATION_ENGINE == \"openai\":\n        return (\n            request.app.state.config.IMAGE_GENERATION_MODEL\n            if request.app.state.config.IMAGE_GENERATION_MODEL\n            else \"dall-e-2\"\n        )\n    elif request.app.state.config.IMAGE_GENERATION_ENGINE == \"gemini\":\n        return (\n            request.app.state.config.IMAGE_GENERATION_MODEL",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "get_models",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def get_models(request: Request, user=Depends(get_verified_user)):\n    try:\n        if request.app.state.config.IMAGE_GENERATION_ENGINE == \"openai\":\n            return [\n                {\"id\": \"dall-e-2\", \"name\": \"DALL·E 2\"},\n                {\"id\": \"dall-e-3\", \"name\": \"DALL·E 3\"},\n                {\"id\": \"gpt-image-1\", \"name\": \"GPT-IMAGE 1\"},\n            ]\n        elif request.app.state.config.IMAGE_GENERATION_ENGINE == \"gemini\":\n            return [",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "load_b64_image_data",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def load_b64_image_data(b64_str):\n    try:\n        if \",\" in b64_str:\n            header, encoded = b64_str.split(\",\", 1)\n            mime_type = header.split(\";\")[0].lstrip(\"data:\")\n            img_data = base64.b64decode(encoded)\n        else:\n            mime_type = \"image/png\"\n            img_data = base64.b64decode(b64_str)\n        return img_data, mime_type",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "load_url_image_data",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def load_url_image_data(url, headers=None):\n    try:\n        if headers:\n            r = requests.get(url, headers=headers)\n        else:\n            r = requests.get(url)\n        r.raise_for_status()\n        if r.headers[\"content-type\"].split(\"/\")[0] == \"image\":\n            mime_type = r.headers[\"content-type\"]\n            return r.content, mime_type",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "upload_image",
        "kind": 2,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "def upload_image(request, image_data, content_type, metadata, user):\n    image_format = mimetypes.guess_extension(content_type)\n    file = UploadFile(\n        file=io.BytesIO(image_data),\n        filename=f\"generated-image{image_format}\",  # will be converted to a unique ID on upload_file\n        headers={\n            \"content-type\": content_type,\n        },\n    )\n    file_item = upload_file(request, file, metadata=metadata, internal=True, user=user)",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"IMAGES\"])\nIMAGE_CACHE_DIR = CACHE_DIR / \"image\" / \"generations\"\nIMAGE_CACHE_DIR.mkdir(parents=True, exist_ok=True)\nrouter = APIRouter()\n@router.get(\"/config\")\nasync def get_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"enabled\": request.app.state.config.ENABLE_IMAGE_GENERATION,\n        \"engine\": request.app.state.config.IMAGE_GENERATION_ENGINE,",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "IMAGE_CACHE_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "IMAGE_CACHE_DIR = CACHE_DIR / \"image\" / \"generations\"\nIMAGE_CACHE_DIR.mkdir(parents=True, exist_ok=True)\nrouter = APIRouter()\n@router.get(\"/config\")\nasync def get_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"enabled\": request.app.state.config.ENABLE_IMAGE_GENERATION,\n        \"engine\": request.app.state.config.IMAGE_GENERATION_ENGINE,\n        \"prompt_generation\": request.app.state.config.ENABLE_IMAGE_PROMPT_GENERATION,\n        \"openai\": {",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.images",
        "description": "backend.open_webui.routers.images",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/config\")\nasync def get_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"enabled\": request.app.state.config.ENABLE_IMAGE_GENERATION,\n        \"engine\": request.app.state.config.IMAGE_GENERATION_ENGINE,\n        \"prompt_generation\": request.app.state.config.ENABLE_IMAGE_PROMPT_GENERATION,\n        \"openai\": {\n            \"OPENAI_API_BASE_URL\": request.app.state.config.IMAGES_OPENAI_API_BASE_URL,\n            \"OPENAI_API_KEY\": request.app.state.config.IMAGES_OPENAI_API_KEY,",
        "detail": "backend.open_webui.routers.images",
        "documentation": {}
    },
    {
        "label": "KnowledgeFilesResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "class KnowledgeFilesResponse(KnowledgeResponse):\n    files: list[FileMetadataResponse]\n@router.get(\"/{id}\", response_model=Optional[KnowledgeFilesResponse])\nasync def get_knowledge_by_id(id: str, user=Depends(get_verified_user)):\n    knowledge = Knowledges.get_knowledge_by_id(id=id)\n    if knowledge:\n        if (\n            user.role == \"admin\"\n            or knowledge.user_id == user.id\n            or has_access(user.id, \"read\", knowledge.access_control)",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "KnowledgeFileIdForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "class KnowledgeFileIdForm(BaseModel):\n    file_id: str\n@router.post(\"/{id}/file/add\", response_model=Optional[KnowledgeFilesResponse])\ndef add_file_to_knowledge_by_id(\n    request: Request,\n    id: str,\n    form_data: KnowledgeFileIdForm,\n    user=Depends(get_verified_user),\n):\n    knowledge = Knowledges.get_knowledge_by_id(id=id)",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "add_file_to_knowledge_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "def add_file_to_knowledge_by_id(\n    request: Request,\n    id: str,\n    form_data: KnowledgeFileIdForm,\n    user=Depends(get_verified_user),\n):\n    knowledge = Knowledges.get_knowledge_by_id(id=id)\n    if not knowledge:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "update_file_from_knowledge_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "def update_file_from_knowledge_by_id(\n    request: Request,\n    id: str,\n    form_data: KnowledgeFileIdForm,\n    user=Depends(get_verified_user),\n):\n    knowledge = Knowledges.get_knowledge_by_id(id=id)\n    if not knowledge:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "remove_file_from_knowledge_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "def remove_file_from_knowledge_by_id(\n    id: str,\n    form_data: KnowledgeFileIdForm,\n    user=Depends(get_verified_user),\n):\n    knowledge = Knowledges.get_knowledge_by_id(id=id)\n    if not knowledge:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=ERROR_MESSAGES.NOT_FOUND,",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "add_files_to_knowledge_batch",
        "kind": 2,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "def add_files_to_knowledge_batch(\n    request: Request,\n    id: str,\n    form_data: list[KnowledgeFileIdForm],\n    user=Depends(get_verified_user),\n):\n    \"\"\"\n    Add multiple files to a knowledge base\n    \"\"\"\n    knowledge = Knowledges.get_knowledge_by_id(id=id)",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# getKnowledgeBases\n############################\n@router.get(\"/\", response_model=list[KnowledgeUserResponse])\nasync def get_knowledge(user=Depends(get_verified_user)):\n    knowledge_bases = []\n    if user.role == \"admin\":",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.knowledge",
        "description": "backend.open_webui.routers.knowledge",
        "peekOfCode": "router = APIRouter()\n############################\n# getKnowledgeBases\n############################\n@router.get(\"/\", response_model=list[KnowledgeUserResponse])\nasync def get_knowledge(user=Depends(get_verified_user)):\n    knowledge_bases = []\n    if user.role == \"admin\":\n        knowledge_bases = Knowledges.get_knowledge_bases()\n    else:",
        "detail": "backend.open_webui.routers.knowledge",
        "documentation": {}
    },
    {
        "label": "AddMemoryForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.memories",
        "description": "backend.open_webui.routers.memories",
        "peekOfCode": "class AddMemoryForm(BaseModel):\n    content: str\nclass MemoryUpdateModel(BaseModel):\n    content: Optional[str] = None\n@router.post(\"/add\", response_model=Optional[MemoryModel])\nasync def add_memory(\n    request: Request,\n    form_data: AddMemoryForm,\n    user=Depends(get_verified_user),\n):",
        "detail": "backend.open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "MemoryUpdateModel",
        "kind": 6,
        "importPath": "backend.open_webui.routers.memories",
        "description": "backend.open_webui.routers.memories",
        "peekOfCode": "class MemoryUpdateModel(BaseModel):\n    content: Optional[str] = None\n@router.post(\"/add\", response_model=Optional[MemoryModel])\nasync def add_memory(\n    request: Request,\n    form_data: AddMemoryForm,\n    user=Depends(get_verified_user),\n):\n    memory = Memories.insert_new_memory(user.id, form_data.content)\n    VECTOR_DB_CLIENT.upsert(",
        "detail": "backend.open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "QueryMemoryForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.memories",
        "description": "backend.open_webui.routers.memories",
        "peekOfCode": "class QueryMemoryForm(BaseModel):\n    content: str\n    k: Optional[int] = 1\n@router.post(\"/query\")\nasync def query_memory(\n    request: Request, form_data: QueryMemoryForm, user=Depends(get_verified_user)\n):\n    results = VECTOR_DB_CLIENT.search(\n        collection_name=f\"user-memory-{user.id}\",\n        vectors=[request.app.state.EMBEDDING_FUNCTION(form_data.content, user=user)],",
        "detail": "backend.open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.memories",
        "description": "backend.open_webui.routers.memories",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n@router.get(\"/ef\")\nasync def get_embeddings(request: Request):\n    return {\"result\": request.app.state.EMBEDDING_FUNCTION(\"hello world\")}\n############################\n# GetMemories\n############################\n@router.get(\"/\", response_model=list[MemoryModel])",
        "detail": "backend.open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.memories",
        "description": "backend.open_webui.routers.memories",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/ef\")\nasync def get_embeddings(request: Request):\n    return {\"result\": request.app.state.EMBEDDING_FUNCTION(\"hello world\")}\n############################\n# GetMemories\n############################\n@router.get(\"/\", response_model=list[MemoryModel])\nasync def get_memories(user=Depends(get_verified_user)):\n    return Memories.get_memories_by_user_id(user.id)",
        "detail": "backend.open_webui.routers.memories",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.models",
        "description": "backend.open_webui.routers.models",
        "peekOfCode": "router = APIRouter()\n###########################\n# GetModels\n###########################\n@router.get(\"/\", response_model=list[ModelUserResponse])\nasync def get_models(id: Optional[str] = None, user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        return Models.get_models()\n    else:\n        return Models.get_models_by_user_id(user.id)",
        "detail": "backend.open_webui.routers.models",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.notes",
        "description": "backend.open_webui.routers.notes",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# GetNotes\n############################\n@router.get(\"/\", response_model=list[NoteUserResponse])\nasync def get_notes(request: Request, user=Depends(get_verified_user)):\n    if user.role != \"admin\" and not has_permission(\n        user.id, \"features.notes\", request.app.state.config.USER_PERMISSIONS",
        "detail": "backend.open_webui.routers.notes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.notes",
        "description": "backend.open_webui.routers.notes",
        "peekOfCode": "router = APIRouter()\n############################\n# GetNotes\n############################\n@router.get(\"/\", response_model=list[NoteUserResponse])\nasync def get_notes(request: Request, user=Depends(get_verified_user)):\n    if user.role != \"admin\" and not has_permission(\n        user.id, \"features.notes\", request.app.state.config.USER_PERMISSIONS\n    ):\n        raise HTTPException(",
        "detail": "backend.open_webui.routers.notes",
        "documentation": {}
    },
    {
        "label": "ConnectionVerificationForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class ConnectionVerificationForm(BaseModel):\n    url: str\n    key: Optional[str] = None\n@router.post(\"/verify\")\nasync def verify_connection(\n    form_data: ConnectionVerificationForm, user=Depends(get_admin_user)\n):\n    url = form_data.url\n    key = form_data.key\n    async with aiohttp.ClientSession(",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OllamaConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class OllamaConfigForm(BaseModel):\n    ENABLE_OLLAMA_API: Optional[bool] = None\n    OLLAMA_BASE_URLS: list[str]\n    OLLAMA_API_CONFIGS: dict\n@router.post(\"/config/update\")\nasync def update_config(\n    request: Request, form_data: OllamaConfigForm, user=Depends(get_admin_user)\n):\n    request.app.state.config.ENABLE_OLLAMA_API = form_data.ENABLE_OLLAMA_API\n    request.app.state.config.OLLAMA_BASE_URLS = form_data.OLLAMA_BASE_URLS",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "ModelNameForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class ModelNameForm(BaseModel):\n    name: str\n@router.post(\"/api/unload\")\nasync def unload_model(\n    request: Request,\n    form_data: ModelNameForm,\n    user=Depends(get_admin_user),\n):\n    model_name = form_data.name\n    if not model_name:",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "PushModelForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class PushModelForm(BaseModel):\n    name: str\n    insecure: Optional[bool] = None\n    stream: Optional[bool] = None\n@router.delete(\"/api/push\")\n@router.delete(\"/api/push/{url_idx}\")\nasync def push_model(\n    request: Request,\n    form_data: PushModelForm,\n    url_idx: Optional[int] = None,",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "CreateModelForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class CreateModelForm(BaseModel):\n    model: Optional[str] = None\n    stream: Optional[bool] = None\n    path: Optional[str] = None\n    model_config = ConfigDict(extra=\"allow\")\n@router.post(\"/api/create\")\n@router.post(\"/api/create/{url_idx}\")\nasync def create_model(\n    request: Request,\n    form_data: CreateModelForm,",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "CopyModelForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class CopyModelForm(BaseModel):\n    source: str\n    destination: str\n@router.post(\"/api/copy\")\n@router.post(\"/api/copy/{url_idx}\")\nasync def copy_model(\n    request: Request,\n    form_data: CopyModelForm,\n    url_idx: Optional[int] = None,\n    user=Depends(get_admin_user),",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "GenerateEmbedForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class GenerateEmbedForm(BaseModel):\n    model: str\n    input: list[str] | str\n    truncate: Optional[bool] = None\n    options: Optional[dict] = None\n    keep_alive: Optional[Union[int, str]] = None\n@router.post(\"/api/embed\")\n@router.post(\"/api/embed/{url_idx}\")\nasync def embed(\n    request: Request,",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "GenerateEmbeddingsForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class GenerateEmbeddingsForm(BaseModel):\n    model: str\n    prompt: str\n    options: Optional[dict] = None\n    keep_alive: Optional[Union[int, str]] = None\n@router.post(\"/api/embeddings\")\n@router.post(\"/api/embeddings/{url_idx}\")\nasync def embeddings(\n    request: Request,\n    form_data: GenerateEmbeddingsForm,",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "GenerateCompletionForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class GenerateCompletionForm(BaseModel):\n    model: str\n    prompt: str\n    suffix: Optional[str] = None\n    images: Optional[list[str]] = None\n    format: Optional[Union[dict, str]] = None\n    options: Optional[dict] = None\n    system: Optional[str] = None\n    template: Optional[str] = None\n    context: Optional[list[int]] = None",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class ChatMessage(BaseModel):\n    role: str\n    content: Optional[str] = None\n    tool_calls: Optional[list[dict]] = None\n    images: Optional[list[str]] = None\n    @validator(\"content\", pre=True)\n    @classmethod\n    def check_at_least_one_field(cls, field_value, values, **kwargs):\n        # Raise an error if both 'content' and 'tool_calls' are None\n        if field_value is None and (",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "GenerateChatCompletionForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class GenerateChatCompletionForm(BaseModel):\n    model: str\n    messages: list[ChatMessage]\n    format: Optional[Union[dict, str]] = None\n    options: Optional[dict] = None\n    template: Optional[str] = None\n    stream: Optional[bool] = True\n    keep_alive: Optional[Union[int, str]] = None\n    tools: Optional[list[dict]] = None\n    model_config = ConfigDict(",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAIChatMessageContent",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class OpenAIChatMessageContent(BaseModel):\n    type: str\n    model_config = ConfigDict(extra=\"allow\")\nclass OpenAIChatMessage(BaseModel):\n    role: str\n    content: Union[Optional[str], list[OpenAIChatMessageContent]]\n    model_config = ConfigDict(extra=\"allow\")\nclass OpenAIChatCompletionForm(BaseModel):\n    model: str\n    messages: list[OpenAIChatMessage]",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAIChatMessage",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class OpenAIChatMessage(BaseModel):\n    role: str\n    content: Union[Optional[str], list[OpenAIChatMessageContent]]\n    model_config = ConfigDict(extra=\"allow\")\nclass OpenAIChatCompletionForm(BaseModel):\n    model: str\n    messages: list[OpenAIChatMessage]\n    model_config = ConfigDict(extra=\"allow\")\nclass OpenAICompletionForm(BaseModel):\n    model: str",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAIChatCompletionForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class OpenAIChatCompletionForm(BaseModel):\n    model: str\n    messages: list[OpenAIChatMessage]\n    model_config = ConfigDict(extra=\"allow\")\nclass OpenAICompletionForm(BaseModel):\n    model: str\n    prompt: str\n    model_config = ConfigDict(extra=\"allow\")\n@router.post(\"/v1/completions\")\n@router.post(\"/v1/completions/{url_idx}\")",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAICompletionForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class OpenAICompletionForm(BaseModel):\n    model: str\n    prompt: str\n    model_config = ConfigDict(extra=\"allow\")\n@router.post(\"/v1/completions\")\n@router.post(\"/v1/completions/{url_idx}\")\nasync def generate_openai_completion(\n    request: Request,\n    form_data: dict,\n    url_idx: Optional[int] = None,",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "UrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class UrlForm(BaseModel):\n    url: str\nclass UploadBlobForm(BaseModel):\n    filename: str\ndef parse_huggingface_url(hf_url):\n    try:\n        # Parse the URL\n        parsed_url = urlparse(hf_url)\n        # Get the path and split it into components\n        path_components = parsed_url.path.split(\"/\")",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "UploadBlobForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "class UploadBlobForm(BaseModel):\n    filename: str\ndef parse_huggingface_url(hf_url):\n    try:\n        # Parse the URL\n        parsed_url = urlparse(hf_url)\n        # Get the path and split it into components\n        path_components = parsed_url.path.split(\"/\")\n        # Extract the desired output\n        model_file = path_components[-1]",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "get_api_key",
        "kind": 2,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "def get_api_key(idx, url, configs):\n    parsed_url = urlparse(url)\n    base_url = f\"{parsed_url.scheme}://{parsed_url.netloc}\"\n    return configs.get(str(idx), configs.get(base_url, {})).get(\n        \"key\", None\n    )  # Legacy support\n##########################################\n#\n# API routes\n#",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "merge_ollama_models_lists",
        "kind": 2,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "def merge_ollama_models_lists(model_lists):\n    merged_models = {}\n    for idx, model_list in enumerate(model_lists):\n        if model_list is not None:\n            for model in model_list:\n                id = model[\"model\"]\n                if id not in merged_models:\n                    model[\"urls\"] = [idx]\n                    merged_models[id] = model\n                else:",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "parse_huggingface_url",
        "kind": 2,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "def parse_huggingface_url(hf_url):\n    try:\n        # Parse the URL\n        parsed_url = urlparse(hf_url)\n        # Get the path and split it into components\n        path_components = parsed_url.path.split(\"/\")\n        # Extract the desired output\n        model_file = path_components[-1]\n        return model_file\n    except ValueError:",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"OLLAMA\"])\n##########################################\n#\n# Utility functions\n#\n##########################################\nasync def send_get_request(url, key=None, user: UserModel = None):\n    timeout = aiohttp.ClientTimeout(total=AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST)\n    try:",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.ollama",
        "description": "backend.open_webui.routers.ollama",
        "peekOfCode": "router = APIRouter()\n@router.head(\"/\")\n@router.get(\"/\")\nasync def get_status():\n    return {\"status\": True}\nclass ConnectionVerificationForm(BaseModel):\n    url: str\n    key: Optional[str] = None\n@router.post(\"/verify\")\nasync def verify_connection(",
        "detail": "backend.open_webui.routers.ollama",
        "documentation": {}
    },
    {
        "label": "OpenAIConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "class OpenAIConfigForm(BaseModel):\n    ENABLE_OPENAI_API: Optional[bool] = None\n    OPENAI_API_BASE_URLS: list[str]\n    OPENAI_API_KEYS: list[str]\n    OPENAI_API_CONFIGS: dict\n@router.post(\"/config/update\")\nasync def update_config(\n    request: Request, form_data: OpenAIConfigForm, user=Depends(get_admin_user)\n):\n    request.app.state.config.ENABLE_OPENAI_API = form_data.ENABLE_OPENAI_API",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "ConnectionVerificationForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "class ConnectionVerificationForm(BaseModel):\n    url: str\n    key: str\n    config: Optional[dict] = None\n@router.post(\"/verify\")\nasync def verify_connection(\n    form_data: ConnectionVerificationForm, user=Depends(get_admin_user)\n):\n    url = form_data.url\n    key = form_data.key",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "openai_o_series_handler",
        "kind": 2,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "def openai_o_series_handler(payload):\n    \"\"\"\n    Handle \"o\" series specific parameters\n    \"\"\"\n    if \"max_tokens\" in payload:\n        # Convert \"max_tokens\" to \"max_completion_tokens\" for all o-series models\n        payload[\"max_completion_tokens\"] = payload[\"max_tokens\"]\n        del payload[\"max_tokens\"]\n    # Handle system role conversion based on model type\n    if payload[\"messages\"][0][\"role\"] == \"system\":",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "convert_to_azure_payload",
        "kind": 2,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "def convert_to_azure_payload(\n    url,\n    payload: dict,\n):\n    model = payload.get(\"model\", \"\")\n    # Filter allowed parameters based on Azure OpenAI API\n    allowed_params = {\n        \"messages\",\n        \"temperature\",\n        \"role\",",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"OPENAI\"])\n##########################################\n#\n# Utility functions\n#\n##########################################\nasync def send_get_request(url, key=None, user: UserModel = None):\n    timeout = aiohttp.ClientTimeout(total=AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST)\n    try:",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.openai",
        "description": "backend.open_webui.routers.openai",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/config\")\nasync def get_config(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"ENABLE_OPENAI_API\": request.app.state.config.ENABLE_OPENAI_API,\n        \"OPENAI_API_BASE_URLS\": request.app.state.config.OPENAI_API_BASE_URLS,\n        \"OPENAI_API_KEYS\": request.app.state.config.OPENAI_API_KEYS,\n        \"OPENAI_API_CONFIGS\": request.app.state.config.OPENAI_API_CONFIGS,\n    }\nclass OpenAIConfigForm(BaseModel):",
        "detail": "backend.open_webui.routers.openai",
        "documentation": {}
    },
    {
        "label": "AddPipelineForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.pipelines",
        "description": "backend.open_webui.routers.pipelines",
        "peekOfCode": "class AddPipelineForm(BaseModel):\n    url: str\n    urlIdx: int\n@router.post(\"/add\")\nasync def add_pipeline(\n    request: Request, form_data: AddPipelineForm, user=Depends(get_admin_user)\n):\n    r = None\n    try:\n        urlIdx = form_data.urlIdx",
        "detail": "backend.open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "DeletePipelineForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.pipelines",
        "description": "backend.open_webui.routers.pipelines",
        "peekOfCode": "class DeletePipelineForm(BaseModel):\n    id: str\n    urlIdx: int\n@router.delete(\"/delete\")\nasync def delete_pipeline(\n    request: Request, form_data: DeletePipelineForm, user=Depends(get_admin_user)\n):\n    r = None\n    try:\n        urlIdx = form_data.urlIdx",
        "detail": "backend.open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "get_sorted_filters",
        "kind": 2,
        "importPath": "backend.open_webui.routers.pipelines",
        "description": "backend.open_webui.routers.pipelines",
        "peekOfCode": "def get_sorted_filters(model_id, models):\n    filters = [\n        model\n        for model in models.values()\n        if \"pipeline\" in model\n        and \"type\" in model[\"pipeline\"]\n        and model[\"pipeline\"][\"type\"] == \"filter\"\n        and (\n            model[\"pipeline\"][\"pipelines\"] == [\"*\"]\n            or any(",
        "detail": "backend.open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.pipelines",
        "description": "backend.open_webui.routers.pipelines",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\n##################################\n#\n# Pipeline Middleware\n#\n##################################\ndef get_sorted_filters(model_id, models):\n    filters = [\n        model",
        "detail": "backend.open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.pipelines",
        "description": "backend.open_webui.routers.pipelines",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/list\")\nasync def get_pipelines_list(request: Request, user=Depends(get_admin_user)):\n    responses = await get_all_models_responses(request, user)\n    log.debug(f\"get_pipelines_list: get_openai_models_responses returned {responses}\")\n    urlIdxs = [\n        idx\n        for idx, response in enumerate(responses)\n        if response is not None and \"pipelines\" in response\n    ]",
        "detail": "backend.open_webui.routers.pipelines",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.prompts",
        "description": "backend.open_webui.routers.prompts",
        "peekOfCode": "router = APIRouter()\n############################\n# GetPrompts\n############################\n@router.get(\"/\", response_model=list[PromptModel])\nasync def get_prompts(user=Depends(get_verified_user)):\n    if user.role == \"admin\":\n        prompts = Prompts.get_prompts()\n    else:\n        prompts = Prompts.get_prompts_by_user_id(user.id, \"read\")",
        "detail": "backend.open_webui.routers.prompts",
        "documentation": {}
    },
    {
        "label": "CollectionNameForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class CollectionNameForm(BaseModel):\n    collection_name: Optional[str] = None\nclass ProcessUrlForm(CollectionNameForm):\n    url: str\nclass SearchForm(BaseModel):\n    queries: List[str]\n@router.get(\"/\")\nasync def get_status(request: Request):\n    return {\n        \"status\": True,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "ProcessUrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class ProcessUrlForm(CollectionNameForm):\n    url: str\nclass SearchForm(BaseModel):\n    queries: List[str]\n@router.get(\"/\")\nasync def get_status(request: Request):\n    return {\n        \"status\": True,\n        \"chunk_size\": request.app.state.config.CHUNK_SIZE,\n        \"chunk_overlap\": request.app.state.config.CHUNK_OVERLAP,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "SearchForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class SearchForm(BaseModel):\n    queries: List[str]\n@router.get(\"/\")\nasync def get_status(request: Request):\n    return {\n        \"status\": True,\n        \"chunk_size\": request.app.state.config.CHUNK_SIZE,\n        \"chunk_overlap\": request.app.state.config.CHUNK_OVERLAP,\n        \"template\": request.app.state.config.RAG_TEMPLATE,\n        \"embedding_engine\": request.app.state.config.RAG_EMBEDDING_ENGINE,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "OpenAIConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class OpenAIConfigForm(BaseModel):\n    url: str\n    key: str\nclass OllamaConfigForm(BaseModel):\n    url: str\n    key: str\nclass AzureOpenAIConfigForm(BaseModel):\n    url: str\n    key: str\n    version: str",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "OllamaConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class OllamaConfigForm(BaseModel):\n    url: str\n    key: str\nclass AzureOpenAIConfigForm(BaseModel):\n    url: str\n    key: str\n    version: str\nclass EmbeddingModelUpdateForm(BaseModel):\n    openai_config: Optional[OpenAIConfigForm] = None\n    ollama_config: Optional[OllamaConfigForm] = None",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "AzureOpenAIConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class AzureOpenAIConfigForm(BaseModel):\n    url: str\n    key: str\n    version: str\nclass EmbeddingModelUpdateForm(BaseModel):\n    openai_config: Optional[OpenAIConfigForm] = None\n    ollama_config: Optional[OllamaConfigForm] = None\n    azure_openai_config: Optional[AzureOpenAIConfigForm] = None\n    embedding_engine: str\n    embedding_model: str",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "EmbeddingModelUpdateForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class EmbeddingModelUpdateForm(BaseModel):\n    openai_config: Optional[OpenAIConfigForm] = None\n    ollama_config: Optional[OllamaConfigForm] = None\n    azure_openai_config: Optional[AzureOpenAIConfigForm] = None\n    embedding_engine: str\n    embedding_model: str\n    embedding_batch_size: Optional[int] = 1\n@router.post(\"/embedding/update\")\nasync def update_embedding_config(\n    request: Request, form_data: EmbeddingModelUpdateForm, user=Depends(get_admin_user)",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "WebConfig",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class WebConfig(BaseModel):\n    ENABLE_WEB_SEARCH: Optional[bool] = None\n    WEB_SEARCH_ENGINE: Optional[str] = None\n    WEB_SEARCH_TRUST_ENV: Optional[bool] = None\n    WEB_SEARCH_RESULT_COUNT: Optional[int] = None\n    WEB_SEARCH_CONCURRENT_REQUESTS: Optional[int] = None\n    WEB_SEARCH_DOMAIN_FILTER_LIST: Optional[List[str]] = []\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL: Optional[bool] = None\n    BYPASS_WEB_SEARCH_WEB_LOADER: Optional[bool] = None\n    SEARXNG_QUERY_URL: Optional[str] = None",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "ConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class ConfigForm(BaseModel):\n    # RAG settings\n    RAG_TEMPLATE: Optional[str] = None\n    TOP_K: Optional[int] = None\n    BYPASS_EMBEDDING_AND_RETRIEVAL: Optional[bool] = None\n    RAG_FULL_CONTEXT: Optional[bool] = None\n    # Hybrid search settings\n    ENABLE_RAG_HYBRID_SEARCH: Optional[bool] = None\n    TOP_K_RERANKER: Optional[int] = None\n    RELEVANCE_THRESHOLD: Optional[float] = None",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "ProcessFileForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class ProcessFileForm(BaseModel):\n    file_id: str\n    content: Optional[str] = None\n    collection_name: Optional[str] = None\n@router.post(\"/process/file\")\ndef process_file(\n    request: Request,\n    form_data: ProcessFileForm,\n    user=Depends(get_verified_user),\n):",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "ProcessTextForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class ProcessTextForm(BaseModel):\n    name: str\n    content: str\n    collection_name: Optional[str] = None\n@router.post(\"/process/text\")\ndef process_text(\n    request: Request,\n    form_data: ProcessTextForm,\n    user=Depends(get_verified_user),\n):",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "QueryDocForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class QueryDocForm(BaseModel):\n    collection_name: str\n    query: str\n    k: Optional[int] = None\n    k_reranker: Optional[int] = None\n    r: Optional[float] = None\n    hybrid: Optional[bool] = None\n@router.post(\"/query/doc\")\ndef query_doc_handler(\n    request: Request,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "QueryCollectionsForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class QueryCollectionsForm(BaseModel):\n    collection_names: list[str]\n    query: str\n    k: Optional[int] = None\n    k_reranker: Optional[int] = None\n    r: Optional[float] = None\n    hybrid: Optional[bool] = None\n    hybrid_bm25_weight: Optional[float] = None\n@router.post(\"/query/collection\")\ndef query_collection_handler(",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "DeleteForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class DeleteForm(BaseModel):\n    collection_name: str\n    file_id: str\n@router.post(\"/delete\")\ndef delete_entries_from_collection(form_data: DeleteForm, user=Depends(get_admin_user)):\n    try:\n        if VECTOR_DB_CLIENT.has_collection(collection_name=form_data.collection_name):\n            file = Files.get_file_by_id(form_data.file_id)\n            hash = file.hash\n            VECTOR_DB_CLIENT.delete(",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "BatchProcessFilesForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class BatchProcessFilesForm(BaseModel):\n    files: List[FileModel]\n    collection_name: str\nclass BatchProcessFilesResult(BaseModel):\n    file_id: str\n    status: str\n    error: Optional[str] = None\nclass BatchProcessFilesResponse(BaseModel):\n    results: List[BatchProcessFilesResult]\n    errors: List[BatchProcessFilesResult]",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "BatchProcessFilesResult",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class BatchProcessFilesResult(BaseModel):\n    file_id: str\n    status: str\n    error: Optional[str] = None\nclass BatchProcessFilesResponse(BaseModel):\n    results: List[BatchProcessFilesResult]\n    errors: List[BatchProcessFilesResult]\n@router.post(\"/process/files/batch\")\ndef process_files_batch(\n    request: Request,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "BatchProcessFilesResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "class BatchProcessFilesResponse(BaseModel):\n    results: List[BatchProcessFilesResult]\n    errors: List[BatchProcessFilesResult]\n@router.post(\"/process/files/batch\")\ndef process_files_batch(\n    request: Request,\n    form_data: BatchProcessFilesForm,\n    user=Depends(get_verified_user),\n) -> BatchProcessFilesResponse:\n    \"\"\"",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "get_ef",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def get_ef(\n    engine: str,\n    embedding_model: str,\n    auto_update: bool = False,\n):\n    ef = None\n    if embedding_model and engine == \"\":\n        from sentence_transformers import SentenceTransformer\n        try:\n            ef = SentenceTransformer(",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "get_rf",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def get_rf(\n    engine: str = \"\",\n    reranking_model: Optional[str] = None,\n    external_reranker_url: str = \"\",\n    external_reranker_api_key: str = \"\",\n    auto_update: bool = False,\n):\n    rf = None\n    if reranking_model:\n        if any(model in reranking_model for model in [\"jinaai/jina-colbert-v2\"]):",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "save_docs_to_vector_db",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def save_docs_to_vector_db(\n    request: Request,\n    docs,\n    collection_name,\n    metadata: Optional[dict] = None,\n    overwrite: bool = False,\n    split: bool = True,\n    add: bool = False,\n    user=None,\n) -> bool:",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_file",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def process_file(\n    request: Request,\n    form_data: ProcessFileForm,\n    user=Depends(get_verified_user),\n):\n    try:\n        file = Files.get_file_by_id(form_data.file_id)\n        collection_name = form_data.collection_name\n        if collection_name is None:\n            collection_name = f\"file-{file.id}\"",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_text",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def process_text(\n    request: Request,\n    form_data: ProcessTextForm,\n    user=Depends(get_verified_user),\n):\n    collection_name = form_data.collection_name\n    if collection_name is None:\n        collection_name = calculate_sha256_string(form_data.content)\n    docs = [\n        Document(",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_youtube_video",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def process_youtube_video(\n    request: Request, form_data: ProcessUrlForm, user=Depends(get_verified_user)\n):\n    try:\n        collection_name = form_data.collection_name\n        if not collection_name:\n            collection_name = calculate_sha256_string(form_data.url)[:63]\n        loader = YoutubeLoader(\n            form_data.url,\n            language=request.app.state.config.YOUTUBE_LOADER_LANGUAGE,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_web",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def process_web(\n    request: Request, form_data: ProcessUrlForm, user=Depends(get_verified_user)\n):\n    try:\n        collection_name = form_data.collection_name\n        if not collection_name:\n            collection_name = calculate_sha256_string(form_data.url)[:63]\n        loader = get_web_loader(\n            form_data.url,\n            verify_ssl=request.app.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "search_web",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def search_web(request: Request, engine: str, query: str) -> list[SearchResult]:\n    \"\"\"Search the web using a search engine and return the results as a list of SearchResult objects.\n    Will look for a search engine API key in environment variables in the following order:\n    - SEARXNG_QUERY_URL\n    - YACY_QUERY_URL + YACY_USERNAME + YACY_PASSWORD\n    - GOOGLE_PSE_API_KEY + GOOGLE_PSE_ENGINE_ID\n    - BRAVE_SEARCH_API_KEY\n    - KAGI_SEARCH_API_KEY\n    - MOJEEK_SEARCH_API_KEY\n    - BOCHA_SEARCH_API_KEY",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "query_doc_handler",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def query_doc_handler(\n    request: Request,\n    form_data: QueryDocForm,\n    user=Depends(get_verified_user),\n):\n    try:\n        if request.app.state.config.ENABLE_RAG_HYBRID_SEARCH:\n            collection_results = {}\n            collection_results[form_data.collection_name] = VECTOR_DB_CLIENT.get(\n                collection_name=form_data.collection_name",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "query_collection_handler",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def query_collection_handler(\n    request: Request,\n    form_data: QueryCollectionsForm,\n    user=Depends(get_verified_user),\n):\n    try:\n        if request.app.state.config.ENABLE_RAG_HYBRID_SEARCH:\n            return query_collection_with_hybrid_search(\n                collection_names=form_data.collection_names,\n                queries=[form_data.query],",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "delete_entries_from_collection",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def delete_entries_from_collection(form_data: DeleteForm, user=Depends(get_admin_user)):\n    try:\n        if VECTOR_DB_CLIENT.has_collection(collection_name=form_data.collection_name):\n            file = Files.get_file_by_id(form_data.file_id)\n            hash = file.hash\n            VECTOR_DB_CLIENT.delete(\n                collection_name=form_data.collection_name,\n                metadata={\"hash\": hash},\n            )\n            return {\"status\": True}",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "reset_vector_db",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def reset_vector_db(user=Depends(get_admin_user)):\n    VECTOR_DB_CLIENT.reset()\n    Knowledges.delete_all_knowledge()\n@router.post(\"/reset/uploads\")\ndef reset_upload_dir(user=Depends(get_admin_user)) -> bool:\n    folder = f\"{UPLOAD_DIR}\"\n    try:\n        # Check if the directory exists\n        if os.path.exists(folder):\n            # Iterate over all the files and directories in the specified directory",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "reset_upload_dir",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def reset_upload_dir(user=Depends(get_admin_user)) -> bool:\n    folder = f\"{UPLOAD_DIR}\"\n    try:\n        # Check if the directory exists\n        if os.path.exists(folder):\n            # Iterate over all the files and directories in the specified directory\n            for filename in os.listdir(folder):\n                file_path = os.path.join(folder, filename)\n                try:\n                    if os.path.isfile(file_path) or os.path.islink(file_path):",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "process_files_batch",
        "kind": 2,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "def process_files_batch(\n    request: Request,\n    form_data: BatchProcessFilesForm,\n    user=Depends(get_verified_user),\n) -> BatchProcessFilesResponse:\n    \"\"\"\n    Process a batch of files and save them to the vector database.\n    \"\"\"\n    results: List[BatchProcessFilesResult] = []\n    errors: List[BatchProcessFilesResult] = []",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\n##########################################\n#\n# Utility functions\n#\n##########################################\ndef get_ef(\n    engine: str,\n    embedding_model: str,",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.retrieval",
        "description": "backend.open_webui.routers.retrieval",
        "peekOfCode": "router = APIRouter()\nclass CollectionNameForm(BaseModel):\n    collection_name: Optional[str] = None\nclass ProcessUrlForm(CollectionNameForm):\n    url: str\nclass SearchForm(BaseModel):\n    queries: List[str]\n@router.get(\"/\")\nasync def get_status(request: Request):\n    return {",
        "detail": "backend.open_webui.routers.retrieval",
        "documentation": {}
    },
    {
        "label": "TaskConfigForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.tasks",
        "description": "backend.open_webui.routers.tasks",
        "peekOfCode": "class TaskConfigForm(BaseModel):\n    TASK_MODEL: Optional[str]\n    TASK_MODEL_EXTERNAL: Optional[str]\n    ENABLE_TITLE_GENERATION: bool\n    TITLE_GENERATION_PROMPT_TEMPLATE: str\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE: str\n    ENABLE_AUTOCOMPLETE_GENERATION: bool\n    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH: int\n    TAGS_GENERATION_PROMPT_TEMPLATE: str\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE: str",
        "detail": "backend.open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.tasks",
        "description": "backend.open_webui.routers.tasks",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n##################################\n#\n# Task Endpoints\n#\n##################################\n@router.get(\"/config\")\nasync def get_task_config(request: Request, user=Depends(get_verified_user)):",
        "detail": "backend.open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.tasks",
        "description": "backend.open_webui.routers.tasks",
        "peekOfCode": "router = APIRouter()\n##################################\n#\n# Task Endpoints\n#\n##################################\n@router.get(\"/config\")\nasync def get_task_config(request: Request, user=Depends(get_verified_user)):\n    return {\n        \"TASK_MODEL\": request.app.state.config.TASK_MODEL,",
        "detail": "backend.open_webui.routers.tasks",
        "documentation": {}
    },
    {
        "label": "LoadUrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.tools",
        "description": "backend.open_webui.routers.tools",
        "peekOfCode": "class LoadUrlForm(BaseModel):\n    url: HttpUrl\ndef github_url_to_raw_url(url: str) -> str:\n    # Handle 'tree' (folder) URLs (add main.py at the end)\n    m1 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/tree/([^/]+)/(.*)\", url)\n    if m1:\n        org, repo, branch, path = m1.groups()\n        return f\"https://raw.githubusercontent.com/{org}/{repo}/refs/heads/{branch}/{path.rstrip('/')}/main.py\"\n    # Handle 'blob' (file) URLs\n    m2 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)\", url)",
        "detail": "backend.open_webui.routers.tools",
        "documentation": {}
    },
    {
        "label": "github_url_to_raw_url",
        "kind": 2,
        "importPath": "backend.open_webui.routers.tools",
        "description": "backend.open_webui.routers.tools",
        "peekOfCode": "def github_url_to_raw_url(url: str) -> str:\n    # Handle 'tree' (folder) URLs (add main.py at the end)\n    m1 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/tree/([^/]+)/(.*)\", url)\n    if m1:\n        org, repo, branch, path = m1.groups()\n        return f\"https://raw.githubusercontent.com/{org}/{repo}/refs/heads/{branch}/{path.rstrip('/')}/main.py\"\n    # Handle 'blob' (file) URLs\n    m2 = re.match(r\"https://github\\.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)\", url)\n    if m2:\n        org, repo, branch, path = m2.groups()",
        "detail": "backend.open_webui.routers.tools",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.tools",
        "description": "backend.open_webui.routers.tools",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nrouter = APIRouter()\n############################\n# GetTools\n############################\n@router.get(\"/\", response_model=list[ToolUserResponse])\nasync def get_tools(request: Request, user=Depends(get_verified_user)):\n    if not request.app.state.TOOL_SERVERS:\n        # If the tool servers are not set, we need to set them",
        "detail": "backend.open_webui.routers.tools",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.tools",
        "description": "backend.open_webui.routers.tools",
        "peekOfCode": "router = APIRouter()\n############################\n# GetTools\n############################\n@router.get(\"/\", response_model=list[ToolUserResponse])\nasync def get_tools(request: Request, user=Depends(get_verified_user)):\n    if not request.app.state.TOOL_SERVERS:\n        # If the tool servers are not set, we need to set them\n        # This is done only once when the server starts\n        # This is done to avoid loading the tool servers every time",
        "detail": "backend.open_webui.routers.tools",
        "documentation": {}
    },
    {
        "label": "WorkspacePermissions",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class WorkspacePermissions(BaseModel):\n    models: bool = False\n    knowledge: bool = False\n    prompts: bool = False\n    tools: bool = False\nclass SharingPermissions(BaseModel):\n    public_models: bool = True\n    public_knowledge: bool = True\n    public_prompts: bool = True\n    public_tools: bool = True",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "SharingPermissions",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class SharingPermissions(BaseModel):\n    public_models: bool = True\n    public_knowledge: bool = True\n    public_prompts: bool = True\n    public_tools: bool = True\nclass ChatPermissions(BaseModel):\n    controls: bool = True\n    file_upload: bool = True\n    delete: bool = True\n    edit: bool = True",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "ChatPermissions",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class ChatPermissions(BaseModel):\n    controls: bool = True\n    file_upload: bool = True\n    delete: bool = True\n    edit: bool = True\n    share: bool = True\n    export: bool = True\n    stt: bool = True\n    tts: bool = True\n    call: bool = True",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "FeaturesPermissions",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class FeaturesPermissions(BaseModel):\n    direct_tool_servers: bool = False\n    web_search: bool = True\n    image_generation: bool = True\n    code_interpreter: bool = True\n    notes: bool = True\nclass UserPermissions(BaseModel):\n    workspace: WorkspacePermissions\n    sharing: SharingPermissions\n    chat: ChatPermissions",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "UserPermissions",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class UserPermissions(BaseModel):\n    workspace: WorkspacePermissions\n    sharing: SharingPermissions\n    chat: ChatPermissions\n    features: FeaturesPermissions\n@router.get(\"/default/permissions\", response_model=UserPermissions)\nasync def get_default_user_permissions(request: Request, user=Depends(get_admin_user)):\n    return {\n        \"workspace\": WorkspacePermissions(\n            **request.app.state.config.USER_PERMISSIONS.get(\"workspace\", {})",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "class UserResponse(BaseModel):\n    name: str\n    profile_image_url: str\n    active: Optional[bool] = None\n@router.get(\"/{user_id}\", response_model=UserResponse)\nasync def get_user_by_id(user_id: str, user=Depends(get_verified_user)):\n    # Check if user_id is a shared chat\n    # If it is, get the user_id from the chat\n    if user_id.startswith(\"shared-\"):\n        chat_id = user_id.replace(\"shared-\", \"\")",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\nrouter = APIRouter()\n############################\n# GetUsers\n############################\nPAGE_ITEM_COUNT = 30\n@router.get(\"/\", response_model=UserListResponse)\nasync def get_users(\n    query: Optional[str] = None,",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "router = APIRouter()\n############################\n# GetUsers\n############################\nPAGE_ITEM_COUNT = 30\n@router.get(\"/\", response_model=UserListResponse)\nasync def get_users(\n    query: Optional[str] = None,\n    order_by: Optional[str] = None,\n    direction: Optional[str] = None,",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "PAGE_ITEM_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.routers.users",
        "description": "backend.open_webui.routers.users",
        "peekOfCode": "PAGE_ITEM_COUNT = 30\n@router.get(\"/\", response_model=UserListResponse)\nasync def get_users(\n    query: Optional[str] = None,\n    order_by: Optional[str] = None,\n    direction: Optional[str] = None,\n    page: Optional[int] = 1,\n    user=Depends(get_admin_user),\n):\n    limit = PAGE_ITEM_COUNT",
        "detail": "backend.open_webui.routers.users",
        "documentation": {}
    },
    {
        "label": "CodeForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.utils",
        "description": "backend.open_webui.routers.utils",
        "peekOfCode": "class CodeForm(BaseModel):\n    code: str\n@router.post(\"/code/format\")\nasync def format_code(form_data: CodeForm, user=Depends(get_admin_user)):\n    try:\n        formatted_code = black.format_str(form_data.code, mode=black.Mode())\n        return {\"code\": formatted_code}\n    except black.NothingChanged:\n        return {\"code\": form_data.code}\n    except Exception as e:",
        "detail": "backend.open_webui.routers.utils",
        "documentation": {}
    },
    {
        "label": "MarkdownForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.utils",
        "description": "backend.open_webui.routers.utils",
        "peekOfCode": "class MarkdownForm(BaseModel):\n    md: str\n@router.post(\"/markdown\")\nasync def get_html_from_markdown(\n    form_data: MarkdownForm, user=Depends(get_verified_user)\n):\n    return {\"html\": markdown.markdown(form_data.md)}\nclass ChatForm(BaseModel):\n    title: str\n    messages: list[dict]",
        "detail": "backend.open_webui.routers.utils",
        "documentation": {}
    },
    {
        "label": "ChatForm",
        "kind": 6,
        "importPath": "backend.open_webui.routers.utils",
        "description": "backend.open_webui.routers.utils",
        "peekOfCode": "class ChatForm(BaseModel):\n    title: str\n    messages: list[dict]\n@router.post(\"/pdf\")\nasync def download_chat_as_pdf(\n    form_data: ChatTitleMessagesForm, user=Depends(get_verified_user)\n):\n    try:\n        pdf_bytes = PDFGenerator(form_data).generate_chat_pdf()\n        return Response(",
        "detail": "backend.open_webui.routers.utils",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.routers.utils",
        "description": "backend.open_webui.routers.utils",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nrouter = APIRouter()\n@router.get(\"/gravatar\")\nasync def get_gravatar(email: str, user=Depends(get_verified_user)):\n    return get_gravatar_url(email)\nclass CodeForm(BaseModel):\n    code: str\n@router.post(\"/code/format\")\nasync def format_code(form_data: CodeForm, user=Depends(get_admin_user)):",
        "detail": "backend.open_webui.routers.utils",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.open_webui.routers.utils",
        "description": "backend.open_webui.routers.utils",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/gravatar\")\nasync def get_gravatar(email: str, user=Depends(get_verified_user)):\n    return get_gravatar_url(email)\nclass CodeForm(BaseModel):\n    code: str\n@router.post(\"/code/format\")\nasync def format_code(form_data: CodeForm, user=Depends(get_admin_user)):\n    try:\n        formatted_code = black.format_str(form_data.code, mode=black.Mode())",
        "detail": "backend.open_webui.routers.utils",
        "documentation": {}
    },
    {
        "label": "get_models_in_use",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_models_in_use():\n    # List models that are currently in use\n    models_in_use = list(USAGE_POOL.keys())\n    return models_in_use\n@sio.on(\"usage\")\nasync def usage(sid, data):\n    if sid in SESSION_POOL:\n        model_id = data[\"model\"]\n        # Record the timestamp for the last update\n        current_time = int(time.time())",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_emitter",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_event_emitter(request_info, update_db=True):\n    async def __event_emitter__(event_data):\n        user_id = request_info[\"user_id\"]\n        session_ids = list(\n            set(\n                USER_POOL.get(user_id, [])\n                + (\n                    [request_info.get(\"session_id\")]\n                    if request_info.get(\"session_id\")\n                    else []",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_call",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_event_call(request_info):\n    async def __event_caller__(event_data):\n        response = await sio.call(\n            \"chat-events\",\n            {\n                \"chat_id\": request_info.get(\"chat_id\", None),\n                \"message_id\": request_info.get(\"message_id\", None),\n                \"data\": event_data,\n            },\n            to=request_info[\"session_id\"],",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_user_id_from_session_pool",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_user_id_from_session_pool(sid):\n    user = SESSION_POOL.get(sid)\n    if user:\n        return user[\"id\"]\n    return None\ndef get_user_ids_from_room(room):\n    active_session_ids = sio.manager.get_participants(\n        namespace=\"/\",\n        room=room,\n    )",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_user_ids_from_room",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_user_ids_from_room(room):\n    active_session_ids = sio.manager.get_participants(\n        namespace=\"/\",\n        room=room,\n    )\n    active_user_ids = list(\n        set(\n            [SESSION_POOL.get(session_id[0])[\"id\"] for session_id in active_session_ids]\n        )\n    )",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_active_status_by_user_id",
        "kind": 2,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "def get_active_status_by_user_id(user_id):\n    if user_id in USER_POOL:\n        return True\n    return False",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"SOCKET\"])\nif WEBSOCKET_MANAGER == \"redis\":\n    if WEBSOCKET_SENTINEL_HOSTS:\n        mgr = socketio.AsyncRedisManager(\n            get_sentinel_url_from_env(\n                WEBSOCKET_REDIS_URL, WEBSOCKET_SENTINEL_HOSTS, WEBSOCKET_SENTINEL_PORT\n            )\n        )\n    else:",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_DURATION",
        "kind": 5,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "TIMEOUT_DURATION = 3\n# Dictionary to maintain the user pool\nif WEBSOCKET_MANAGER == \"redis\":\n    log.debug(\"Using Redis to manage websockets.\")\n    redis_sentinels = get_sentinels_from_env(\n        WEBSOCKET_SENTINEL_HOSTS, WEBSOCKET_SENTINEL_PORT\n    )\n    SESSION_POOL = RedisDict(\n        \"open-webui:session_pool\",\n        redis_url=WEBSOCKET_REDIS_URL,",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "app = socketio.ASGIApp(\n    sio,\n    socketio_path=\"/ws/socket.io\",\n)\ndef get_models_in_use():\n    # List models that are currently in use\n    models_in_use = list(USAGE_POOL.keys())\n    return models_in_use\n@sio.on(\"usage\")\nasync def usage(sid, data):",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "get_event_caller",
        "kind": 5,
        "importPath": "backend.open_webui.socket.main",
        "description": "backend.open_webui.socket.main",
        "peekOfCode": "get_event_caller = get_event_call\ndef get_user_id_from_session_pool(sid):\n    user = SESSION_POOL.get(sid)\n    if user:\n        return user[\"id\"]\n    return None\ndef get_user_ids_from_room(room):\n    active_session_ids = sio.manager.get_participants(\n        namespace=\"/\",\n        room=room,",
        "detail": "backend.open_webui.socket.main",
        "documentation": {}
    },
    {
        "label": "RedisLock",
        "kind": 6,
        "importPath": "backend.open_webui.socket.utils",
        "description": "backend.open_webui.socket.utils",
        "peekOfCode": "class RedisLock:\n    def __init__(self, redis_url, lock_name, timeout_secs, redis_sentinels=[]):\n        self.lock_name = lock_name\n        self.lock_id = str(uuid.uuid4())\n        self.timeout_secs = timeout_secs\n        self.lock_obtained = False\n        self.redis = get_redis_connection(\n            redis_url, redis_sentinels, decode_responses=True\n        )\n    def aquire_lock(self):",
        "detail": "backend.open_webui.socket.utils",
        "documentation": {}
    },
    {
        "label": "RedisDict",
        "kind": 6,
        "importPath": "backend.open_webui.socket.utils",
        "description": "backend.open_webui.socket.utils",
        "peekOfCode": "class RedisDict:\n    def __init__(self, name, redis_url, redis_sentinels=[]):\n        self.name = name\n        self.redis = get_redis_connection(\n            redis_url, redis_sentinels, decode_responses=True\n        )\n    def __setitem__(self, key, value):\n        serialized_value = json.dumps(value)\n        self.redis.hset(self.name, key, serialized_value)\n    def __getitem__(self, key):",
        "detail": "backend.open_webui.socket.utils",
        "documentation": {}
    },
    {
        "label": "StorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "class StorageProvider(ABC):\n    @abstractmethod\n    def get_file(self, file_path: str) -> str:\n        pass\n    @abstractmethod\n    def upload_file(\n        self, file: BinaryIO, filename: str, tags: Dict[str, str]\n    ) -> Tuple[bytes, str]:\n        pass\n    @abstractmethod",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "LocalStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "class LocalStorageProvider(StorageProvider):\n    @staticmethod\n    def upload_file(\n        file: BinaryIO, filename: str, tags: Dict[str, str]\n    ) -> Tuple[bytes, str]:\n        contents = file.read()\n        if not contents:\n            raise ValueError(ERROR_MESSAGES.EMPTY_CONTENT)\n        file_path = f\"{UPLOAD_DIR}/{filename}\"\n        with open(file_path, \"wb\") as f:",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "S3StorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "class S3StorageProvider(StorageProvider):\n    def __init__(self):\n        config = Config(\n            s3={\n                \"use_accelerate_endpoint\": S3_USE_ACCELERATE_ENDPOINT,\n                \"addressing_style\": S3_ADDRESSING_STYLE,\n            },\n        )\n        # If access key and secret are provided, use them for authentication\n        if S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY:",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "GCSStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "class GCSStorageProvider(StorageProvider):\n    def __init__(self):\n        self.bucket_name = GCS_BUCKET_NAME\n        if GOOGLE_APPLICATION_CREDENTIALS_JSON:\n            self.gcs_client = storage.Client.from_service_account_info(\n                info=json.loads(GOOGLE_APPLICATION_CREDENTIALS_JSON)\n            )\n        else:\n            # if no credentials json is provided, credentials will be picked up from the environment\n            # if running on local environment, credentials would be user credentials",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "AzureStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "class AzureStorageProvider(StorageProvider):\n    def __init__(self):\n        self.endpoint = AZURE_STORAGE_ENDPOINT\n        self.container_name = AZURE_STORAGE_CONTAINER_NAME\n        storage_key = AZURE_STORAGE_KEY\n        if storage_key:\n            # Configure using the Azure Storage Account Endpoint and Key\n            self.blob_service_client = BlobServiceClient(\n                account_url=self.endpoint, credential=storage_key\n            )",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "get_storage_provider",
        "kind": 2,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "def get_storage_provider(storage_provider: str):\n    if storage_provider == \"local\":\n        Storage = LocalStorageProvider()\n    elif storage_provider == \"s3\":\n        Storage = S3StorageProvider()\n    elif storage_provider == \"gcs\":\n        Storage = GCSStorageProvider()\n    elif storage_provider == \"azure\":\n        Storage = AzureStorageProvider()\n    else:",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nclass StorageProvider(ABC):\n    @abstractmethod\n    def get_file(self, file_path: str) -> str:\n        pass\n    @abstractmethod\n    def upload_file(\n        self, file: BinaryIO, filename: str, tags: Dict[str, str]\n    ) -> Tuple[bytes, str]:",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "Storage",
        "kind": 5,
        "importPath": "backend.open_webui.storage.provider",
        "description": "backend.open_webui.storage.provider",
        "peekOfCode": "Storage = get_storage_provider(STORAGE_PROVIDER)",
        "detail": "backend.open_webui.storage.provider",
        "documentation": {}
    },
    {
        "label": "TestAuths",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.routers.test_auths",
        "description": "backend.open_webui.test.apps.webui.routers.test_auths",
        "peekOfCode": "class TestAuths(AbstractPostgresTest):\n    BASE_PATH = \"/api/v1/auths\"\n    def setup_class(cls):\n        super().setup_class()\n        from open_webui.models.auths import Auths\n        from open_webui.models.users import Users\n        cls.users = Users\n        cls.auths = Auths\n    def test_get_session_user(self):\n        with mock_webui_user():",
        "detail": "backend.open_webui.test.apps.webui.routers.test_auths",
        "documentation": {}
    },
    {
        "label": "TestChats",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.routers.test_chats",
        "description": "backend.open_webui.test.apps.webui.routers.test_chats",
        "peekOfCode": "class TestChats(AbstractPostgresTest):\n    BASE_PATH = \"/api/v1/chats\"\n    def setup_class(cls):\n        super().setup_class()\n    def setup_method(self):\n        super().setup_method()\n        from open_webui.models.chats import ChatForm, Chats\n        self.chats = Chats\n        self.chats.insert_new_chat(\n            \"2\",",
        "detail": "backend.open_webui.test.apps.webui.routers.test_chats",
        "documentation": {}
    },
    {
        "label": "TestModels",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.routers.test_models",
        "description": "backend.open_webui.test.apps.webui.routers.test_models",
        "peekOfCode": "class TestModels(AbstractPostgresTest):\n    BASE_PATH = \"/api/v1/models\"\n    def setup_class(cls):\n        super().setup_class()\n        from open_webui.models.models import Model\n        cls.models = Model\n    def test_models(self):\n        with mock_webui_user(id=\"2\"):\n            response = self.fast_api_client.get(self.create_url(\"/\"))\n        assert response.status_code == 200",
        "detail": "backend.open_webui.test.apps.webui.routers.test_models",
        "documentation": {}
    },
    {
        "label": "TestPrompts",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.routers.test_prompts",
        "description": "backend.open_webui.test.apps.webui.routers.test_prompts",
        "peekOfCode": "class TestPrompts(AbstractPostgresTest):\n    BASE_PATH = \"/api/v1/prompts\"\n    def test_prompts(self):\n        # Get all prompts\n        with mock_webui_user(id=\"2\"):\n            response = self.fast_api_client.get(self.create_url(\"/\"))\n        assert response.status_code == 200\n        assert len(response.json()) == 0\n        # Create a two new prompts\n        with mock_webui_user(id=\"2\"):",
        "detail": "backend.open_webui.test.apps.webui.routers.test_prompts",
        "documentation": {}
    },
    {
        "label": "TestUsers",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.routers.test_users",
        "description": "backend.open_webui.test.apps.webui.routers.test_users",
        "peekOfCode": "class TestUsers(AbstractPostgresTest):\n    BASE_PATH = \"/api/v1/users\"\n    def setup_class(cls):\n        super().setup_class()\n        from open_webui.models.users import Users\n        cls.users = Users\n    def setup_method(self):\n        super().setup_method()\n        self.users.insert_new_user(\n            id=\"1\",",
        "detail": "backend.open_webui.test.apps.webui.routers.test_users",
        "documentation": {}
    },
    {
        "label": "TestLocalStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "class TestLocalStorageProvider:\n    Storage = provider.LocalStorageProvider()\n    file_content = b\"test content\"\n    file_bytesio = io.BytesIO(file_content)\n    filename = \"test.txt\"\n    filename_extra = \"test_exyta.txt\"\n    file_bytesio_empty = io.BytesIO()\n    def test_upload_file(self, monkeypatch, tmp_path):\n        upload_dir = mock_upload_dir(monkeypatch, tmp_path)\n        contents, file_path = self.Storage.upload_file(self.file_bytesio, self.filename)",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "TestS3StorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "class TestS3StorageProvider:\n    def __init__(self):\n        self.Storage = provider.S3StorageProvider()\n        self.Storage.bucket_name = \"my-bucket\"\n        self.s3_client = boto3.resource(\"s3\", region_name=\"us-east-1\")\n        self.file_content = b\"test content\"\n        self.filename = \"test.txt\"\n        self.filename_extra = \"test_exyta.txt\"\n        self.file_bytesio_empty = io.BytesIO()\n        super().__init__()",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "TestGCSStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "class TestGCSStorageProvider:\n    Storage = provider.GCSStorageProvider()\n    Storage.bucket_name = \"my-bucket\"\n    file_content = b\"test content\"\n    filename = \"test.txt\"\n    filename_extra = \"test_exyta.txt\"\n    file_bytesio_empty = io.BytesIO()\n    @pytest.fixture(scope=\"class\")\n    def setup(self):\n        host, port = \"localhost\", 9023",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "TestAzureStorageProvider",
        "kind": 6,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "class TestAzureStorageProvider:\n    def __init__(self):\n        super().__init__()\n    @pytest.fixture(scope=\"class\")\n    def setup_storage(self, monkeypatch):\n        # Create mock Blob Service Client and related clients\n        mock_blob_service_client = MagicMock()\n        mock_container_client = MagicMock()\n        mock_blob_client = MagicMock()\n        # Set up return values for the mock",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "mock_upload_dir",
        "kind": 2,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "def mock_upload_dir(monkeypatch, tmp_path):\n    \"\"\"Fixture to monkey-patch the UPLOAD_DIR and create a temporary directory.\"\"\"\n    directory = tmp_path / \"uploads\"\n    directory.mkdir()\n    monkeypatch.setattr(provider, \"UPLOAD_DIR\", str(directory))\n    return directory\ndef test_imports():\n    provider.StorageProvider\n    provider.LocalStorageProvider\n    provider.S3StorageProvider",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "test_imports",
        "kind": 2,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "def test_imports():\n    provider.StorageProvider\n    provider.LocalStorageProvider\n    provider.S3StorageProvider\n    provider.GCSStorageProvider\n    provider.AzureStorageProvider\n    provider.Storage\ndef test_get_storage_provider():\n    Storage = provider.get_storage_provider(\"local\")\n    assert isinstance(Storage, provider.LocalStorageProvider)",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "test_get_storage_provider",
        "kind": 2,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "def test_get_storage_provider():\n    Storage = provider.get_storage_provider(\"local\")\n    assert isinstance(Storage, provider.LocalStorageProvider)\n    Storage = provider.get_storage_provider(\"s3\")\n    assert isinstance(Storage, provider.S3StorageProvider)\n    Storage = provider.get_storage_provider(\"gcs\")\n    assert isinstance(Storage, provider.GCSStorageProvider)\n    Storage = provider.get_storage_provider(\"azure\")\n    assert isinstance(Storage, provider.AzureStorageProvider)\n    with pytest.raises(RuntimeError):",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "test_class_instantiation",
        "kind": 2,
        "importPath": "backend.open_webui.test.apps.webui.storage.test_provider",
        "description": "backend.open_webui.test.apps.webui.storage.test_provider",
        "peekOfCode": "def test_class_instantiation():\n    with pytest.raises(TypeError):\n        provider.StorageProvider()\n    with pytest.raises(TypeError):\n        class Test(provider.StorageProvider):\n            pass\n        Test()\n    provider.LocalStorageProvider()\n    provider.S3StorageProvider()\n    provider.GCSStorageProvider()",
        "detail": "backend.open_webui.test.apps.webui.storage.test_provider",
        "documentation": {}
    },
    {
        "label": "AbstractIntegrationTest",
        "kind": 6,
        "importPath": "backend.open_webui.test.util.abstract_integration_test",
        "description": "backend.open_webui.test.util.abstract_integration_test",
        "peekOfCode": "class AbstractIntegrationTest:\n    BASE_PATH = None\n    def create_url(self, path=\"\", query_params=None):\n        if self.BASE_PATH is None:\n            raise Exception(\"BASE_PATH is not set\")\n        parts = self.BASE_PATH.split(\"/\")\n        parts = [part.strip() for part in parts if part.strip() != \"\"]\n        path_parts = path.split(\"/\")\n        path_parts = [part.strip() for part in path_parts if part.strip() != \"\"]\n        query_parts = \"\"",
        "detail": "backend.open_webui.test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "AbstractPostgresTest",
        "kind": 6,
        "importPath": "backend.open_webui.test.util.abstract_integration_test",
        "description": "backend.open_webui.test.util.abstract_integration_test",
        "peekOfCode": "class AbstractPostgresTest(AbstractIntegrationTest):\n    DOCKER_CONTAINER_NAME = \"postgres-test-container-will-get-deleted\"\n    docker_client: DockerClient\n    @classmethod\n    def _create_db_url(cls, env_vars_postgres: dict) -> str:\n        host = get_docker_ip()\n        user = env_vars_postgres[\"POSTGRES_USER\"]\n        pw = env_vars_postgres[\"POSTGRES_PASSWORD\"]\n        port = 8081\n        db = env_vars_postgres[\"POSTGRES_DB\"]",
        "detail": "backend.open_webui.test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "get_fast_api_client",
        "kind": 2,
        "importPath": "backend.open_webui.test.util.abstract_integration_test",
        "description": "backend.open_webui.test.util.abstract_integration_test",
        "peekOfCode": "def get_fast_api_client():\n    from main import app\n    with TestClient(app) as c:\n        return c\nclass AbstractIntegrationTest:\n    BASE_PATH = None\n    def create_url(self, path=\"\", query_params=None):\n        if self.BASE_PATH is None:\n            raise Exception(\"BASE_PATH is not set\")\n        parts = self.BASE_PATH.split(\"/\")",
        "detail": "backend.open_webui.test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.test.util.abstract_integration_test",
        "description": "backend.open_webui.test.util.abstract_integration_test",
        "peekOfCode": "log = logging.getLogger(__name__)\ndef get_fast_api_client():\n    from main import app\n    with TestClient(app) as c:\n        return c\nclass AbstractIntegrationTest:\n    BASE_PATH = None\n    def create_url(self, path=\"\", query_params=None):\n        if self.BASE_PATH is None:\n            raise Exception(\"BASE_PATH is not set\")",
        "detail": "backend.open_webui.test.util.abstract_integration_test",
        "documentation": {}
    },
    {
        "label": "mock_webui_user",
        "kind": 2,
        "importPath": "backend.open_webui.test.util.mock_user",
        "description": "backend.open_webui.test.util.mock_user",
        "peekOfCode": "def mock_webui_user(**kwargs):\n    from open_webui.routers.webui import app\n    with mock_user(app, **kwargs):\n        yield\n@contextmanager\ndef mock_user(app: FastAPI, **kwargs):\n    from open_webui.utils.auth import (\n        get_current_user,\n        get_verified_user,\n        get_admin_user,",
        "detail": "backend.open_webui.test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "mock_user",
        "kind": 2,
        "importPath": "backend.open_webui.test.util.mock_user",
        "description": "backend.open_webui.test.util.mock_user",
        "peekOfCode": "def mock_user(app: FastAPI, **kwargs):\n    from open_webui.utils.auth import (\n        get_current_user,\n        get_verified_user,\n        get_admin_user,\n        get_current_user_by_api_key,\n    )\n    from open_webui.models.users import User\n    def create_user():\n        user_parameters = {",
        "detail": "backend.open_webui.test.util.mock_user",
        "documentation": {}
    },
    {
        "label": "ComfyUINodeInput",
        "kind": 6,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "class ComfyUINodeInput(BaseModel):\n    type: Optional[str] = None\n    node_ids: list[str] = []\n    key: Optional[str] = \"text\"\n    value: Optional[str] = None\nclass ComfyUIWorkflow(BaseModel):\n    workflow: str\n    nodes: list[ComfyUINodeInput]\nclass ComfyUIGenerateImageForm(BaseModel):\n    workflow: ComfyUIWorkflow",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "ComfyUIWorkflow",
        "kind": 6,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "class ComfyUIWorkflow(BaseModel):\n    workflow: str\n    nodes: list[ComfyUINodeInput]\nclass ComfyUIGenerateImageForm(BaseModel):\n    workflow: ComfyUIWorkflow\n    prompt: str\n    negative_prompt: Optional[str] = None\n    width: int\n    height: int\n    n: int = 1",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "ComfyUIGenerateImageForm",
        "kind": 6,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "class ComfyUIGenerateImageForm(BaseModel):\n    workflow: ComfyUIWorkflow\n    prompt: str\n    negative_prompt: Optional[str] = None\n    width: int\n    height: int\n    n: int = 1\n    steps: Optional[int] = None\n    seed: Optional[int] = None\nasync def comfyui_generate_image(",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "queue_prompt",
        "kind": 2,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "def queue_prompt(prompt, client_id, base_url, api_key):\n    log.info(\"queue_prompt\")\n    p = {\"prompt\": prompt, \"client_id\": client_id}\n    data = json.dumps(p).encode(\"utf-8\")\n    log.debug(f\"queue_prompt data: {data}\")\n    try:\n        req = urllib.request.Request(\n            f\"{base_url}/prompt\",\n            data=data,\n            headers={**default_headers, \"Authorization\": f\"Bearer {api_key}\"},",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "def get_image(filename, subfolder, folder_type, base_url, api_key):\n    log.info(\"get_image\")\n    data = {\"filename\": filename, \"subfolder\": subfolder, \"type\": folder_type}\n    url_values = urllib.parse.urlencode(data)\n    req = urllib.request.Request(\n        f\"{base_url}/view?{url_values}\",\n        headers={**default_headers, \"Authorization\": f\"Bearer {api_key}\"},\n    )\n    with urllib.request.urlopen(req) as response:\n        return response.read()",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "get_image_url",
        "kind": 2,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "def get_image_url(filename, subfolder, folder_type, base_url):\n    log.info(\"get_image\")\n    data = {\"filename\": filename, \"subfolder\": subfolder, \"type\": folder_type}\n    url_values = urllib.parse.urlencode(data)\n    return f\"{base_url}/view?{url_values}\"\ndef get_history(prompt_id, base_url, api_key):\n    log.info(\"get_history\")\n    req = urllib.request.Request(\n        f\"{base_url}/history/{prompt_id}\",\n        headers={**default_headers, \"Authorization\": f\"Bearer {api_key}\"},",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "get_history",
        "kind": 2,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "def get_history(prompt_id, base_url, api_key):\n    log.info(\"get_history\")\n    req = urllib.request.Request(\n        f\"{base_url}/history/{prompt_id}\",\n        headers={**default_headers, \"Authorization\": f\"Bearer {api_key}\"},\n    )\n    with urllib.request.urlopen(req) as response:\n        return json.loads(response.read())\ndef get_images(ws, prompt, client_id, base_url, api_key):\n    prompt_id = queue_prompt(prompt, client_id, base_url, api_key)[\"prompt_id\"]",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "get_images",
        "kind": 2,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "def get_images(ws, prompt, client_id, base_url, api_key):\n    prompt_id = queue_prompt(prompt, client_id, base_url, api_key)[\"prompt_id\"]\n    output_images = []\n    while True:\n        out = ws.recv()\n        if isinstance(out, str):\n            message = json.loads(out)\n            if message[\"type\"] == \"executing\":\n                data = message[\"data\"]\n                if data[\"node\"] is None and data[\"prompt_id\"] == prompt_id:",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"COMFYUI\"])\ndefault_headers = {\"User-Agent\": \"Mozilla/5.0\"}\ndef queue_prompt(prompt, client_id, base_url, api_key):\n    log.info(\"queue_prompt\")\n    p = {\"prompt\": prompt, \"client_id\": client_id}\n    data = json.dumps(p).encode(\"utf-8\")\n    log.debug(f\"queue_prompt data: {data}\")\n    try:\n        req = urllib.request.Request(",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "default_headers",
        "kind": 5,
        "importPath": "backend.open_webui.utils.images.comfyui",
        "description": "backend.open_webui.utils.images.comfyui",
        "peekOfCode": "default_headers = {\"User-Agent\": \"Mozilla/5.0\"}\ndef queue_prompt(prompt, client_id, base_url, api_key):\n    log.info(\"queue_prompt\")\n    p = {\"prompt\": prompt, \"client_id\": client_id}\n    data = json.dumps(p).encode(\"utf-8\")\n    log.debug(f\"queue_prompt data: {data}\")\n    try:\n        req = urllib.request.Request(\n            f\"{base_url}/prompt\",\n            data=data,",
        "detail": "backend.open_webui.utils.images.comfyui",
        "documentation": {}
    },
    {
        "label": "SpanAttributes",
        "kind": 6,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "class SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"\n    DB_TYPE = \"db.type\"\n    DB_IP = \"db.ip\"\n    DB_PORT = \"db.port\"\n    ERROR_KIND = \"error.kind\"\n    ERROR_OBJECT = \"error.object\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_DB_TYPE",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_DB_TYPE = \"mysql\"\nSPAN_REDIS_TYPE = \"redis\"\nSPAN_DURATION = \"duration\"\nSPAN_SQL_STR = \"sql\"\nSPAN_SQL_EXPLAIN = \"explain\"\nSPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_REDIS_TYPE",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_REDIS_TYPE = \"redis\"\nSPAN_DURATION = \"duration\"\nSPAN_SQL_STR = \"sql\"\nSPAN_SQL_EXPLAIN = \"explain\"\nSPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_DURATION",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_DURATION = \"duration\"\nSPAN_SQL_STR = \"sql\"\nSPAN_SQL_EXPLAIN = \"explain\"\nSPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"\n    DB_TYPE = \"db.type\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_SQL_STR",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_SQL_STR = \"sql\"\nSPAN_SQL_EXPLAIN = \"explain\"\nSPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"\n    DB_TYPE = \"db.type\"\n    DB_IP = \"db.ip\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_SQL_EXPLAIN",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_SQL_EXPLAIN = \"explain\"\nSPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"\n    DB_TYPE = \"db.type\"\n    DB_IP = \"db.ip\"\n    DB_PORT = \"db.port\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "SPAN_ERROR_TYPE",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.constants",
        "description": "backend.open_webui.utils.telemetry.constants",
        "peekOfCode": "SPAN_ERROR_TYPE = \"error\"\nclass SpanAttributes(_SpanAttributes):\n    \"\"\"\n    Span Attributes\n    \"\"\"\n    DB_INSTANCE = \"db.instance\"\n    DB_TYPE = \"db.type\"\n    DB_IP = \"db.ip\"\n    DB_PORT = \"db.port\"\n    ERROR_KIND = \"error.kind\"",
        "detail": "backend.open_webui.utils.telemetry.constants",
        "documentation": {}
    },
    {
        "label": "LazyBatchSpanProcessor",
        "kind": 6,
        "importPath": "backend.open_webui.utils.telemetry.exporters",
        "description": "backend.open_webui.utils.telemetry.exporters",
        "peekOfCode": "class LazyBatchSpanProcessor(BatchSpanProcessor):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.done = True\n        with self.condition:\n            self.condition.notify_all()\n        self.worker_thread.join()\n        self.done = False\n        self.worker_thread = None\n    def on_end(self, span: ReadableSpan) -> None:",
        "detail": "backend.open_webui.utils.telemetry.exporters",
        "documentation": {}
    },
    {
        "label": "Instrumentor",
        "kind": 6,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "class Instrumentor(BaseInstrumentor):\n    \"\"\"\n    Instrument OT\n    \"\"\"\n    def __init__(self, app: FastAPI, db_engine: Engine):\n        self.app = app\n        self.db_engine = db_engine\n    def instrumentation_dependencies(self) -> Collection[str]:\n        return []\n    def _instrument(self, **kwargs):",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "requests_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def requests_hook(span: Span, request: PreparedRequest):\n    \"\"\"\n    Http Request Hook\n    \"\"\"\n    span.update_name(f\"{request.method} {request.url}\")\n    span.set_attributes(\n        attributes={\n            SpanAttributes.HTTP_URL: request.url,\n            SpanAttributes.HTTP_METHOD: request.method,\n        }",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "response_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def response_hook(span: Span, request: PreparedRequest, response: Response):\n    \"\"\"\n    HTTP Response Hook\n    \"\"\"\n    span.set_attributes(\n        attributes={\n            SpanAttributes.HTTP_STATUS_CODE: response.status_code,\n        }\n    )\n    span.set_status(StatusCode.ERROR if response.status_code >= 400 else StatusCode.OK)",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "redis_request_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def redis_request_hook(span: Span, instance: Redis, args, kwargs):\n    \"\"\"\n    Redis Request Hook\n    \"\"\"\n    try:\n        connection_kwargs: dict = instance.connection_pool.connection_kwargs\n        host = connection_kwargs.get(\"host\")\n        port = connection_kwargs.get(\"port\")\n        db = connection_kwargs.get(\"db\")\n        span.set_attributes(",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "httpx_request_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def httpx_request_hook(span: Span, request: RequestInfo):\n    \"\"\"\n    HTTPX Request Hook\n    \"\"\"\n    span.update_name(f\"{request.method.decode()} {str(request.url)}\")\n    span.set_attributes(\n        attributes={\n            SpanAttributes.HTTP_URL: str(request.url),\n            SpanAttributes.HTTP_METHOD: request.method.decode(),\n        }",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "httpx_response_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def httpx_response_hook(span: Span, request: RequestInfo, response: ResponseInfo):\n    \"\"\"\n    HTTPX Response Hook\n    \"\"\"\n    span.set_attribute(SpanAttributes.HTTP_STATUS_CODE, response.status_code)\n    span.set_status(\n        StatusCode.ERROR\n        if response.status_code >= status.HTTP_400_BAD_REQUEST\n        else StatusCode.OK\n    )",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "aiohttp_request_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def aiohttp_request_hook(span: Span, request: TraceRequestStartParams):\n    \"\"\"\n    Aiohttp Request Hook\n    \"\"\"\n    span.update_name(f\"{request.method} {str(request.url)}\")\n    span.set_attributes(\n        attributes={\n            SpanAttributes.HTTP_URL: str(request.url),\n            SpanAttributes.HTTP_METHOD: request.method,\n        }",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "aiohttp_response_hook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "def aiohttp_response_hook(\n    span: Span, response: Union[TraceRequestExceptionParams, TraceRequestEndParams]\n):\n    \"\"\"\n    Aiohttp Response Hook\n    \"\"\"\n    if isinstance(response, TraceRequestEndParams):\n        span.set_attribute(SpanAttributes.HTTP_STATUS_CODE, response.response.status)\n        span.set_status(\n            StatusCode.ERROR",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.open_webui.utils.telemetry.instrumentors",
        "description": "backend.open_webui.utils.telemetry.instrumentors",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\ndef requests_hook(span: Span, request: PreparedRequest):\n    \"\"\"\n    Http Request Hook\n    \"\"\"\n    span.update_name(f\"{request.method} {request.url}\")\n    span.set_attributes(\n        attributes={\n            SpanAttributes.HTTP_URL: request.url,",
        "detail": "backend.open_webui.utils.telemetry.instrumentors",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "backend.open_webui.utils.telemetry.setup",
        "description": "backend.open_webui.utils.telemetry.setup",
        "peekOfCode": "def setup(app: FastAPI, db_engine: Engine):\n    # set up trace\n    trace.set_tracer_provider(\n        TracerProvider(\n            resource=Resource.create(attributes={SERVICE_NAME: OTEL_SERVICE_NAME})\n        )\n    )\n    # otlp export\n    exporter = OTLPSpanExporter(endpoint=OTEL_EXPORTER_OTLP_ENDPOINT)\n    trace.get_tracer_provider().add_span_processor(LazyBatchSpanProcessor(exporter))",
        "detail": "backend.open_webui.utils.telemetry.setup",
        "documentation": {}
    },
    {
        "label": "fill_missing_permissions",
        "kind": 2,
        "importPath": "backend.open_webui.utils.access_control",
        "description": "backend.open_webui.utils.access_control",
        "peekOfCode": "def fill_missing_permissions(\n    permissions: Dict[str, Any], default_permissions: Dict[str, Any]\n) -> Dict[str, Any]:\n    \"\"\"\n    Recursively fills in missing properties in the permissions dictionary\n    using the default permissions as a template.\n    \"\"\"\n    for key, value in default_permissions.items():\n        if key not in permissions:\n            permissions[key] = value",
        "detail": "backend.open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "kind": 2,
        "importPath": "backend.open_webui.utils.access_control",
        "description": "backend.open_webui.utils.access_control",
        "peekOfCode": "def get_permissions(\n    user_id: str,\n    default_permissions: Dict[str, Any],\n) -> Dict[str, Any]:\n    \"\"\"\n    Get all permissions for a user by combining the permissions of all groups the user is a member of.\n    If a permission is defined in multiple groups, the most permissive value is used (True > False).\n    Permissions are nested in a dict with the permission key as the key and a boolean as the value.\n    \"\"\"\n    def combine_permissions(",
        "detail": "backend.open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "kind": 2,
        "importPath": "backend.open_webui.utils.access_control",
        "description": "backend.open_webui.utils.access_control",
        "peekOfCode": "def has_permission(\n    user_id: str,\n    permission_key: str,\n    default_permissions: Dict[str, Any] = {},\n) -> bool:\n    \"\"\"\n    Check if a user has a specific permission by checking the group permissions\n    and fall back to default permissions if not found in any group.\n    Permission keys can be hierarchical and separated by dots ('.').\n    \"\"\"",
        "detail": "backend.open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "has_access",
        "kind": 2,
        "importPath": "backend.open_webui.utils.access_control",
        "description": "backend.open_webui.utils.access_control",
        "peekOfCode": "def has_access(\n    user_id: str,\n    type: str = \"write\",\n    access_control: Optional[dict] = None,\n) -> bool:\n    if access_control is None:\n        return type == \"read\"\n    user_groups = Groups.get_groups_by_member_id(user_id)\n    user_group_ids = [group.id for group in user_groups]\n    permission_access = access_control.get(type, {})",
        "detail": "backend.open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "get_users_with_access",
        "kind": 2,
        "importPath": "backend.open_webui.utils.access_control",
        "description": "backend.open_webui.utils.access_control",
        "peekOfCode": "def get_users_with_access(\n    type: str = \"write\", access_control: Optional[dict] = None\n) -> List[UserModel]:\n    if access_control is None:\n        return Users.get_users()\n    permission_access = access_control.get(type, {})\n    permitted_group_ids = permission_access.get(\"group_ids\", [])\n    permitted_user_ids = permission_access.get(\"user_ids\", [])\n    user_ids_with_access = set(permitted_user_ids)\n    for group_id in permitted_group_ids:",
        "detail": "backend.open_webui.utils.access_control",
        "documentation": {}
    },
    {
        "label": "AuditLogEntry",
        "kind": 6,
        "importPath": "backend.open_webui.utils.audit",
        "description": "backend.open_webui.utils.audit",
        "peekOfCode": "class AuditLogEntry:\n    # `Metadata` audit level properties\n    id: str\n    user: Optional[dict[str, Any]]\n    audit_level: str\n    verb: str\n    request_uri: str\n    user_agent: Optional[str] = None\n    source_ip: Optional[str] = None\n    # `Request` audit level properties",
        "detail": "backend.open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "AuditLevel",
        "kind": 6,
        "importPath": "backend.open_webui.utils.audit",
        "description": "backend.open_webui.utils.audit",
        "peekOfCode": "class AuditLevel(str, Enum):\n    NONE = \"NONE\"\n    METADATA = \"METADATA\"\n    REQUEST = \"REQUEST\"\n    REQUEST_RESPONSE = \"REQUEST_RESPONSE\"\nclass AuditLogger:\n    \"\"\"\n    A helper class that encapsulates audit logging functionality. It uses Loguru’s logger with an auditable binding to ensure that audit log entries are filtered correctly.\n    Parameters:\n    logger (Logger): An instance of Loguru’s logger.",
        "detail": "backend.open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "AuditLogger",
        "kind": 6,
        "importPath": "backend.open_webui.utils.audit",
        "description": "backend.open_webui.utils.audit",
        "peekOfCode": "class AuditLogger:\n    \"\"\"\n    A helper class that encapsulates audit logging functionality. It uses Loguru’s logger with an auditable binding to ensure that audit log entries are filtered correctly.\n    Parameters:\n    logger (Logger): An instance of Loguru’s logger.\n    \"\"\"\n    def __init__(self, logger: \"Logger\"):\n        self.logger = logger.bind(auditable=True)\n    def write(\n        self,",
        "detail": "backend.open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "AuditContext",
        "kind": 6,
        "importPath": "backend.open_webui.utils.audit",
        "description": "backend.open_webui.utils.audit",
        "peekOfCode": "class AuditContext:\n    \"\"\"\n    Captures and aggregates the HTTP request and response bodies during the processing of a request. It ensures that only a configurable maximum amount of data is stored to prevent excessive memory usage.\n    Attributes:\n    request_body (bytearray): Accumulated request payload.\n    response_body (bytearray): Accumulated response payload.\n    max_body_size (int): Maximum number of bytes to capture.\n    metadata (Dict[str, Any]): A dictionary to store additional audit metadata (user, http verb, user agent, etc.).\n    \"\"\"\n    def __init__(self, max_body_size: int = MAX_BODY_LOG_SIZE):",
        "detail": "backend.open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "AuditLoggingMiddleware",
        "kind": 6,
        "importPath": "backend.open_webui.utils.audit",
        "description": "backend.open_webui.utils.audit",
        "peekOfCode": "class AuditLoggingMiddleware:\n    \"\"\"\n    ASGI middleware that intercepts HTTP requests and responses to perform audit logging. It captures request/response bodies (depending on audit level), headers, HTTP methods, and user information, then logs a structured audit entry at the end of the request cycle.\n    \"\"\"\n    AUDITED_METHODS = {\"PUT\", \"PATCH\", \"DELETE\", \"POST\"}\n    def __init__(\n        self,\n        app: ASGI3Application,\n        *,\n        excluded_paths: Optional[list[str]] = None,",
        "detail": "backend.open_webui.utils.audit",
        "documentation": {}
    },
    {
        "label": "verify_signature",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def verify_signature(payload: str, signature: str) -> bool:\n    \"\"\"\n    Verifies the HMAC signature of the received payload.\n    \"\"\"\n    try:\n        expected_signature = base64.b64encode(\n            hmac.new(TRUSTED_SIGNATURE_KEY, payload.encode(), hashlib.sha256).digest()\n        ).decode()\n        # Compare securely to prevent timing attacks\n        return hmac.compare_digest(expected_signature, signature)",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "override_static",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def override_static(path: str, content: str):\n    # Ensure path is safe\n    if \"/\" in path or \"..\" in path:\n        log.error(f\"Invalid path: {path}\")\n        return\n    file_path = os.path.join(STATIC_DIR, path)\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    with open(file_path, \"wb\") as f:\n        f.write(base64.b64decode(content))  # Convert Base64 back to raw binary\ndef get_license_data(app, key):",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_license_data",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_license_data(app, key):\n    if key:\n        try:\n            res = requests.post(\n                \"https://api.openwebui.com/api/v1/license/\",\n                json={\"key\": key, \"version\": \"1\"},\n                timeout=5,\n            )\n            if getattr(res, \"ok\", False):\n                payload = getattr(res, \"json\", lambda: {})()",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return (\n        pwd_context.verify(plain_password, hashed_password) if hashed_password else None\n    )\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_token(data: dict, expires_delta: Union[timedelta, None] = None) -> str:\n    payload = data.copy()\n    if expires_delta:\n        expire = datetime.now(UTC) + expires_delta",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_token(data: dict, expires_delta: Union[timedelta, None] = None) -> str:\n    payload = data.copy()\n    if expires_delta:\n        expire = datetime.now(UTC) + expires_delta\n        payload.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(payload, SESSION_SECRET, algorithm=ALGORITHM)\n    return encoded_jwt\ndef decode_token(token: str) -> Optional[dict]:",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_token",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def create_token(data: dict, expires_delta: Union[timedelta, None] = None) -> str:\n    payload = data.copy()\n    if expires_delta:\n        expire = datetime.now(UTC) + expires_delta\n        payload.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(payload, SESSION_SECRET, algorithm=ALGORITHM)\n    return encoded_jwt\ndef decode_token(token: str) -> Optional[dict]:\n    try:\n        decoded = jwt.decode(token, SESSION_SECRET, algorithms=[ALGORITHM])",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def decode_token(token: str) -> Optional[dict]:\n    try:\n        decoded = jwt.decode(token, SESSION_SECRET, algorithms=[ALGORITHM])\n        return decoded\n    except Exception:\n        return None\ndef extract_token_from_auth_header(auth_header: str):\n    return auth_header[len(\"Bearer \") :]\ndef create_api_key():\n    key = str(uuid.uuid4()).replace(\"-\", \"\")",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "extract_token_from_auth_header",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def extract_token_from_auth_header(auth_header: str):\n    return auth_header[len(\"Bearer \") :]\ndef create_api_key():\n    key = str(uuid.uuid4()).replace(\"-\", \"\")\n    return f\"sk-{key}\"\ndef get_http_authorization_cred(auth_header: Optional[str]):\n    if not auth_header:\n        return None\n    try:\n        scheme, credentials = auth_header.split(\" \")",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "create_api_key",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def create_api_key():\n    key = str(uuid.uuid4()).replace(\"-\", \"\")\n    return f\"sk-{key}\"\ndef get_http_authorization_cred(auth_header: Optional[str]):\n    if not auth_header:\n        return None\n    try:\n        scheme, credentials = auth_header.split(\" \")\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n    except Exception:",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_http_authorization_cred",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_http_authorization_cred(auth_header: Optional[str]):\n    if not auth_header:\n        return None\n    try:\n        scheme, credentials = auth_header.split(\" \")\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n    except Exception:\n        return None\ndef get_current_user(\n    request: Request,",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_current_user(\n    request: Request,\n    response: Response,\n    background_tasks: BackgroundTasks,\n    auth_token: HTTPAuthorizationCredentials = Depends(bearer_security),\n):\n    token = None\n    if auth_token is not None:\n        token = auth_token.credentials\n    if token is None and \"token\" in request.cookies:",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user_by_api_key",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_current_user_by_api_key(api_key: str):\n    user = Users.get_user_by_api_key(api_key)\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=ERROR_MESSAGES.INVALID_TOKEN,\n        )\n    else:\n        # Add user info to current span\n        current_span = trace.get_current_span()",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_verified_user",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_verified_user(user=Depends(get_current_user)):\n    if user.role not in {\"user\", \"admin\"}:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=ERROR_MESSAGES.ACCESS_PROHIBITED,\n        )\n    return user\ndef get_admin_user(user=Depends(get_current_user)):\n    if user.role != \"admin\":\n        raise HTTPException(",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "kind": 2,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "def get_admin_user(user=Depends(get_current_user)):\n    if user.role != \"admin\":\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=ERROR_MESSAGES.ACCESS_PROHIBITED,\n        )\n    return user",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"OAUTH\"])\nSESSION_SECRET = WEBUI_SECRET_KEY\nALGORITHM = \"HS256\"\n##############\n# Auth Utils\n##############\ndef verify_signature(payload: str, signature: str) -> bool:\n    \"\"\"\n    Verifies the HMAC signature of the received payload.",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "SESSION_SECRET",
        "kind": 5,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "SESSION_SECRET = WEBUI_SECRET_KEY\nALGORITHM = \"HS256\"\n##############\n# Auth Utils\n##############\ndef verify_signature(payload: str, signature: str) -> bool:\n    \"\"\"\n    Verifies the HMAC signature of the received payload.\n    \"\"\"\n    try:",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "ALGORITHM = \"HS256\"\n##############\n# Auth Utils\n##############\ndef verify_signature(payload: str, signature: str) -> bool:\n    \"\"\"\n    Verifies the HMAC signature of the received payload.\n    \"\"\"\n    try:\n        expected_signature = base64.b64encode(",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "bearer_security",
        "kind": 5,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "bearer_security = HTTPBearer(auto_error=False)\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return (\n        pwd_context.verify(plain_password, hashed_password) if hashed_password else None\n    )\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_token(data: dict, expires_delta: Union[timedelta, None] = None) -> str:\n    payload = data.copy()",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.open_webui.utils.auth",
        "description": "backend.open_webui.utils.auth",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return (\n        pwd_context.verify(plain_password, hashed_password) if hashed_password else None\n    )\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_token(data: dict, expires_delta: Union[timedelta, None] = None) -> str:\n    payload = data.copy()\n    if expires_delta:",
        "detail": "backend.open_webui.utils.auth",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.chat",
        "description": "backend.open_webui.utils.chat",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nasync def generate_direct_chat_completion(\n    request: Request,\n    form_data: dict,\n    user: Any,\n    models: dict,\n):\n    log.info(\"generate_direct_chat_completion\")\n    metadata = form_data.pop(\"metadata\", {})",
        "detail": "backend.open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "chat_completion",
        "kind": 5,
        "importPath": "backend.open_webui.utils.chat",
        "description": "backend.open_webui.utils.chat",
        "peekOfCode": "chat_completion = generate_chat_completion\nasync def chat_completed(request: Request, form_data: dict, user: Any):\n    if not request.app.state.MODELS:\n        await get_all_models(request, user=user)\n    if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):\n        models = {\n            request.state.model[\"id\"]: request.state.model,\n        }\n    else:\n        models = request.app.state.MODELS",
        "detail": "backend.open_webui.utils.chat",
        "documentation": {}
    },
    {
        "label": "ResultModel",
        "kind": 6,
        "importPath": "backend.open_webui.utils.code_interpreter",
        "description": "backend.open_webui.utils.code_interpreter",
        "peekOfCode": "class ResultModel(BaseModel):\n    \"\"\"\n    Execute Code Result Model\n    \"\"\"\n    stdout: Optional[str] = \"\"\n    stderr: Optional[str] = \"\"\n    result: Optional[str] = \"\"\nclass JupyterCodeExecuter:\n    \"\"\"\n    Execute code in jupyter notebook",
        "detail": "backend.open_webui.utils.code_interpreter",
        "documentation": {}
    },
    {
        "label": "JupyterCodeExecuter",
        "kind": 6,
        "importPath": "backend.open_webui.utils.code_interpreter",
        "description": "backend.open_webui.utils.code_interpreter",
        "peekOfCode": "class JupyterCodeExecuter:\n    \"\"\"\n    Execute code in jupyter notebook\n    \"\"\"\n    def __init__(\n        self,\n        base_url: str,\n        code: str,\n        token: str = \"\",\n        password: str = \"\",",
        "detail": "backend.open_webui.utils.code_interpreter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.open_webui.utils.code_interpreter",
        "description": "backend.open_webui.utils.code_interpreter",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nclass ResultModel(BaseModel):\n    \"\"\"\n    Execute Code Result Model\n    \"\"\"\n    stdout: Optional[str] = \"\"\n    stderr: Optional[str] = \"\"\n    result: Optional[str] = \"\"\nclass JupyterCodeExecuter:",
        "detail": "backend.open_webui.utils.code_interpreter",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.embeddings",
        "description": "backend.open_webui.utils.embeddings",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nasync def generate_embeddings(\n    request: Request,\n    form_data: dict,\n    user: UserModel,\n    bypass_filter: bool = False,\n):\n    \"\"\"\n    Dispatch and handle embeddings generation based on the model type (OpenAI, Ollama).",
        "detail": "backend.open_webui.utils.embeddings",
        "documentation": {}
    },
    {
        "label": "get_function_module",
        "kind": 2,
        "importPath": "backend.open_webui.utils.filter",
        "description": "backend.open_webui.utils.filter",
        "peekOfCode": "def get_function_module(request, function_id, load_from_db=True):\n    \"\"\"\n    Get the function module by its ID.\n    \"\"\"\n    function_module, _, _ = get_function_module_from_cache(\n        request, function_id, load_from_db\n    )\n    return function_module\ndef get_sorted_filter_ids(request, model: dict, enabled_filter_ids: list = None):\n    def get_priority(function_id):",
        "detail": "backend.open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "get_sorted_filter_ids",
        "kind": 2,
        "importPath": "backend.open_webui.utils.filter",
        "description": "backend.open_webui.utils.filter",
        "peekOfCode": "def get_sorted_filter_ids(request, model: dict, enabled_filter_ids: list = None):\n    def get_priority(function_id):\n        function = Functions.get_function_by_id(function_id)\n        if function is not None:\n            valves = Functions.get_function_valves_by_id(function_id)\n            return valves.get(\"priority\", 0) if valves else 0\n        return 0\n    filter_ids = [function.id for function in Functions.get_global_filter_functions()]\n    if \"info\" in model and \"meta\" in model[\"info\"]:\n        filter_ids.extend(model[\"info\"][\"meta\"].get(\"filterIds\", []))",
        "detail": "backend.open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.filter",
        "description": "backend.open_webui.utils.filter",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\ndef get_function_module(request, function_id, load_from_db=True):\n    \"\"\"\n    Get the function module by its ID.\n    \"\"\"\n    function_module, _, _ = get_function_module_from_cache(\n        request, function_id, load_from_db\n    )\n    return function_module",
        "detail": "backend.open_webui.utils.filter",
        "documentation": {}
    },
    {
        "label": "InterceptHandler",
        "kind": 6,
        "importPath": "backend.open_webui.utils.logger",
        "description": "backend.open_webui.utils.logger",
        "peekOfCode": "class InterceptHandler(logging.Handler):\n    \"\"\"\n    Intercepts log records from Python's standard logging module\n    and redirects them to Loguru's logger.\n    \"\"\"\n    def emit(self, record):\n        \"\"\"\n        Called by the standard logging module for each log event.\n        It transforms the standard `LogRecord` into a format compatible with Loguru\n        and passes it to Loguru's logger.",
        "detail": "backend.open_webui.utils.logger",
        "documentation": {}
    },
    {
        "label": "stdout_format",
        "kind": 2,
        "importPath": "backend.open_webui.utils.logger",
        "description": "backend.open_webui.utils.logger",
        "peekOfCode": "def stdout_format(record: \"Record\") -> str:\n    \"\"\"\n    Generates a formatted string for log records that are output to the console. This format includes a timestamp, log level, source location (module, function, and line), the log message, and any extra data (serialized as JSON).\n    Parameters:\n    record (Record): A Loguru record that contains logging details including time, level, name, function, line, message, and any extra context.\n    Returns:\n    str: A formatted log string intended for stdout.\n    \"\"\"\n    record[\"extra\"][\"extra_json\"] = json.dumps(record[\"extra\"])\n    return (",
        "detail": "backend.open_webui.utils.logger",
        "documentation": {}
    },
    {
        "label": "file_format",
        "kind": 2,
        "importPath": "backend.open_webui.utils.logger",
        "description": "backend.open_webui.utils.logger",
        "peekOfCode": "def file_format(record: \"Record\"):\n    \"\"\"\n    Formats audit log records into a structured JSON string for file output.\n    Parameters:\n    record (Record): A Loguru record containing extra audit data.\n    Returns:\n    str: A JSON-formatted string representing the audit data.\n    \"\"\"\n    audit_data = {\n        \"id\": record[\"extra\"].get(\"id\", \"\"),",
        "detail": "backend.open_webui.utils.logger",
        "documentation": {}
    },
    {
        "label": "start_logger",
        "kind": 2,
        "importPath": "backend.open_webui.utils.logger",
        "description": "backend.open_webui.utils.logger",
        "peekOfCode": "def start_logger():\n    \"\"\"\n    Initializes and configures Loguru's logger with distinct handlers:\n    A console (stdout) handler for general log messages (excluding those marked as auditable).\n    An optional file handler for audit logs if audit logging is enabled.\n    Additionally, this function reconfigures Python’s standard logging to route through Loguru and adjusts logging levels for Uvicorn.\n    Parameters:\n    enable_audit_logging (bool): Determines whether audit-specific log entries should be recorded to file.\n    \"\"\"\n    logger.remove()",
        "detail": "backend.open_webui.utils.logger",
        "documentation": {}
    },
    {
        "label": "apply_params_to_form_data",
        "kind": 2,
        "importPath": "backend.open_webui.utils.middleware",
        "description": "backend.open_webui.utils.middleware",
        "peekOfCode": "def apply_params_to_form_data(form_data, model):\n    params = form_data.pop(\"params\", {})\n    custom_params = params.pop(\"custom_params\", {})\n    open_webui_params = {\n        \"stream_response\": bool,\n        \"function_calling\": str,\n        \"system\": str,\n    }\n    for key in list(params.keys()):\n        if key in open_webui_params:",
        "detail": "backend.open_webui.utils.middleware",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.middleware",
        "description": "backend.open_webui.utils.middleware",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nasync def chat_completion_tools_handler(\n    request: Request, body: dict, extra_params: dict, user: UserModel, models, tools\n) -> tuple[dict, dict]:\n    async def get_content_from_response(response) -> Optional[str]:\n        content = None\n        if hasattr(response, \"body_iterator\"):\n            async for chunk in response.body_iterator:\n                data = json.loads(chunk.decode(\"utf-8\"))",
        "detail": "backend.open_webui.utils.middleware",
        "documentation": {}
    },
    {
        "label": "deep_update",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def deep_update(d, u):\n    for k, v in u.items():\n        if isinstance(v, collections.abc.Mapping):\n            d[k] = deep_update(d.get(k, {}), v)\n        else:\n            d[k] = v\n    return d\ndef get_message_list(messages, message_id):\n    \"\"\"\n    Reconstructs a list of messages in order up to the specified message_id.",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_message_list",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_message_list(messages, message_id):\n    \"\"\"\n    Reconstructs a list of messages in order up to the specified message_id.\n    :param message_id: ID of the message to reconstruct the chain\n    :param messages: Message history dict containing all messages\n    :return: List of ordered messages starting from the root to the given message\n    \"\"\"\n    # Handle case where messages is None\n    if not messages:\n        return []  # Return empty list instead of None to prevent iteration errors",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_messages_content",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_messages_content(messages: list[dict]) -> str:\n    return \"\\n\".join(\n        [\n            f\"{message['role'].upper()}: {get_content_from_message(message)}\"\n            for message in messages\n        ]\n    )\ndef get_last_user_message_item(messages: list[dict]) -> Optional[dict]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"user\":",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_user_message_item",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_last_user_message_item(messages: list[dict]) -> Optional[dict]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"user\":\n            return message\n    return None\ndef get_content_from_message(message: dict) -> Optional[str]:\n    if isinstance(message.get(\"content\"), list):\n        for item in message[\"content\"]:\n            if item[\"type\"] == \"text\":\n                return item[\"text\"]",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_content_from_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_content_from_message(message: dict) -> Optional[str]:\n    if isinstance(message.get(\"content\"), list):\n        for item in message[\"content\"]:\n            if item[\"type\"] == \"text\":\n                return item[\"text\"]\n    else:\n        return message.get(\"content\")\n    return None\ndef get_last_user_message(messages: list[dict]) -> Optional[str]:\n    message = get_last_user_message_item(messages)",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_user_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_last_user_message(messages: list[dict]) -> Optional[str]:\n    message = get_last_user_message_item(messages)\n    if message is None:\n        return None\n    return get_content_from_message(message)\ndef get_last_assistant_message_item(messages: list[dict]) -> Optional[dict]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"assistant\":\n            return message\n    return None",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_assistant_message_item",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_last_assistant_message_item(messages: list[dict]) -> Optional[dict]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"assistant\":\n            return message\n    return None\ndef get_last_assistant_message(messages: list[dict]) -> Optional[str]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"assistant\":\n            return get_content_from_message(message)\n    return None",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_last_assistant_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_last_assistant_message(messages: list[dict]) -> Optional[str]:\n    for message in reversed(messages):\n        if message[\"role\"] == \"assistant\":\n            return get_content_from_message(message)\n    return None\ndef get_system_message(messages: list[dict]) -> Optional[dict]:\n    for message in messages:\n        if message[\"role\"] == \"system\":\n            return message\n    return None",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_system_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_system_message(messages: list[dict]) -> Optional[dict]:\n    for message in messages:\n        if message[\"role\"] == \"system\":\n            return message\n    return None\ndef remove_system_message(messages: list[dict]) -> list[dict]:\n    return [message for message in messages if message[\"role\"] != \"system\"]\ndef pop_system_message(messages: list[dict]) -> tuple[Optional[dict], list[dict]]:\n    return get_system_message(messages), remove_system_message(messages)\ndef prepend_to_first_user_message_content(",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "remove_system_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def remove_system_message(messages: list[dict]) -> list[dict]:\n    return [message for message in messages if message[\"role\"] != \"system\"]\ndef pop_system_message(messages: list[dict]) -> tuple[Optional[dict], list[dict]]:\n    return get_system_message(messages), remove_system_message(messages)\ndef prepend_to_first_user_message_content(\n    content: str, messages: list[dict]\n) -> list[dict]:\n    for message in messages:\n        if message[\"role\"] == \"user\":\n            if isinstance(message[\"content\"], list):",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "pop_system_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def pop_system_message(messages: list[dict]) -> tuple[Optional[dict], list[dict]]:\n    return get_system_message(messages), remove_system_message(messages)\ndef prepend_to_first_user_message_content(\n    content: str, messages: list[dict]\n) -> list[dict]:\n    for message in messages:\n        if message[\"role\"] == \"user\":\n            if isinstance(message[\"content\"], list):\n                for item in message[\"content\"]:\n                    if item[\"type\"] == \"text\":",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "prepend_to_first_user_message_content",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def prepend_to_first_user_message_content(\n    content: str, messages: list[dict]\n) -> list[dict]:\n    for message in messages:\n        if message[\"role\"] == \"user\":\n            if isinstance(message[\"content\"], list):\n                for item in message[\"content\"]:\n                    if item[\"type\"] == \"text\":\n                        item[\"text\"] = f\"{content}\\n{item['text']}\"\n            else:",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_system_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def add_or_update_system_message(\n    content: str, messages: list[dict], append: bool = False\n):\n    \"\"\"\n    Adds a new system message at the beginning of the messages list\n    or updates the existing system message at the beginning.\n    :param msg: The message to be added or appended.\n    :param messages: The list of message dictionaries.\n    :return: The updated list of message dictionaries.\n    \"\"\"",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_or_update_user_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def add_or_update_user_message(content: str, messages: list[dict]):\n    \"\"\"\n    Adds a new user message at the end of the messages list\n    or updates the existing user message at the end.\n    :param msg: The message to be added or appended.\n    :param messages: The list of message dictionaries.\n    :return: The updated list of message dictionaries.\n    \"\"\"\n    if messages and messages[-1].get(\"role\") == \"user\":\n        messages[-1][\"content\"] = f\"{messages[-1]['content']}\\n{content}\"",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "append_or_update_assistant_message",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def append_or_update_assistant_message(content: str, messages: list[dict]):\n    \"\"\"\n    Adds a new assistant message at the end of the messages list\n    or updates the existing assistant message at the end.\n    :param msg: The message to be added or appended.\n    :param messages: The list of message dictionaries.\n    :return: The updated list of message dictionaries.\n    \"\"\"\n    if messages and messages[-1].get(\"role\") == \"assistant\":\n        messages[-1][\"content\"] = f\"{messages[-1]['content']}\\n{content}\"",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_message_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def openai_chat_message_template(model: str):\n    return {\n        \"id\": f\"{model}-{str(uuid.uuid4())}\",\n        \"created\": int(time.time()),\n        \"model\": model,\n        \"choices\": [{\"index\": 0, \"logprobs\": None, \"finish_reason\": None}],\n    }\ndef openai_chat_chunk_message_template(\n    model: str,\n    content: Optional[str] = None,",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_chunk_message_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def openai_chat_chunk_message_template(\n    model: str,\n    content: Optional[str] = None,\n    reasoning_content: Optional[str] = None,\n    tool_calls: Optional[list[dict]] = None,\n    usage: Optional[dict] = None,\n) -> dict:\n    template = openai_chat_message_template(model)\n    template[\"object\"] = \"chat.completion.chunk\"\n    template[\"choices\"][0][\"index\"] = 0",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "openai_chat_completion_message_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def openai_chat_completion_message_template(\n    model: str,\n    message: Optional[str] = None,\n    reasoning_content: Optional[str] = None,\n    tool_calls: Optional[list[dict]] = None,\n    usage: Optional[dict] = None,\n) -> dict:\n    template = openai_chat_message_template(model)\n    template[\"object\"] = \"chat.completion\"\n    if message is not None:",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "get_gravatar_url",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def get_gravatar_url(email):\n    # Trim leading and trailing whitespace from\n    # an email address and force all characters\n    # to lower case\n    address = str(email).strip().lower()\n    # Create a SHA256 hash of the final string\n    hash_object = hashlib.sha256(address.encode())\n    hash_hex = hash_object.hexdigest()\n    # Grab the actual image URL\n    return f\"https://www.gravatar.com/avatar/{hash_hex}?d=mp\"",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "calculate_sha256",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def calculate_sha256(file_path, chunk_size):\n    # Compute SHA-256 hash of a file efficiently in chunks\n    sha256 = hashlib.sha256()\n    with open(file_path, \"rb\") as f:\n        while chunk := f.read(chunk_size):\n            sha256.update(chunk)\n    return sha256.hexdigest()\ndef calculate_sha256_string(string):\n    # Create a new SHA-256 hash object\n    sha256_hash = hashlib.sha256()",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "calculate_sha256_string",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def calculate_sha256_string(string):\n    # Create a new SHA-256 hash object\n    sha256_hash = hashlib.sha256()\n    # Update the hash object with the bytes of the input string\n    sha256_hash.update(string.encode(\"utf-8\"))\n    # Get the hexadecimal representation of the hash\n    hashed_string = sha256_hash.hexdigest()\n    return hashed_string\ndef validate_email_format(email: str) -> bool:\n    if email.endswith(\"@localhost\"):",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "validate_email_format",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def validate_email_format(email: str) -> bool:\n    if email.endswith(\"@localhost\"):\n        return True\n    return bool(re.match(r\"[^@]+@[^@]+\\.[^@]+\", email))\ndef sanitize_filename(file_name):\n    # Convert to lowercase\n    lower_case_file_name = file_name.lower()\n    # Remove special characters using regular expression\n    sanitized_file_name = re.sub(r\"[^\\w\\s]\", \"\", lower_case_file_name)\n    # Replace spaces with dashes",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "sanitize_filename",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def sanitize_filename(file_name):\n    # Convert to lowercase\n    lower_case_file_name = file_name.lower()\n    # Remove special characters using regular expression\n    sanitized_file_name = re.sub(r\"[^\\w\\s]\", \"\", lower_case_file_name)\n    # Replace spaces with dashes\n    final_file_name = re.sub(r\"\\s+\", \"-\", sanitized_file_name)\n    return final_file_name\ndef extract_folders_after_data_docs(path):\n    # Convert the path to a Path object if it's not already",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "extract_folders_after_data_docs",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def extract_folders_after_data_docs(path):\n    # Convert the path to a Path object if it's not already\n    path = Path(path)\n    # Extract parts of the path\n    parts = path.parts\n    # Find the index of '/data/docs' in the path\n    try:\n        index_data_docs = parts.index(\"data\") + 1\n        index_docs = parts.index(\"docs\", index_data_docs) + 1\n    except ValueError:",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "parse_duration",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def parse_duration(duration: str) -> Optional[timedelta]:\n    if duration == \"-1\" or duration == \"0\":\n        return None\n    # Regular expression to find number and unit pairs\n    pattern = r\"(-?\\d+(\\.\\d+)?)(ms|s|m|h|d|w)\"\n    matches = re.findall(pattern, duration)\n    if not matches:\n        raise ValueError(\"Invalid duration string\")\n    total_duration = timedelta()\n    for number, _, unit in matches:",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "parse_ollama_modelfile",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def parse_ollama_modelfile(model_text):\n    parameters_meta = {\n        \"mirostat\": int,\n        \"mirostat_eta\": float,\n        \"mirostat_tau\": float,\n        \"num_ctx\": int,\n        \"repeat_last_n\": int,\n        \"repeat_penalty\": float,\n        \"temperature\": float,\n        \"seed\": int,",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "convert_logit_bias_input_to_json",
        "kind": 2,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "def convert_logit_bias_input_to_json(user_input):\n    logit_bias_pairs = user_input.split(\",\")\n    logit_bias_json = {}\n    for pair in logit_bias_pairs:\n        token, bias = pair.split(\":\")\n        token = str(token.strip())\n        bias = int(bias.strip())\n        bias = 100 if bias > 100 else -100 if bias < -100 else bias\n        logit_bias_json[token] = bias\n    return json.dumps(logit_bias_json)",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.misc",
        "description": "backend.open_webui.utils.misc",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\ndef deep_update(d, u):\n    for k, v in u.items():\n        if isinstance(v, collections.abc.Mapping):\n            d[k] = deep_update(d.get(k, {}), v)\n        else:\n            d[k] = v\n    return d\ndef get_message_list(messages, message_id):",
        "detail": "backend.open_webui.utils.misc",
        "documentation": {}
    },
    {
        "label": "check_model_access",
        "kind": 2,
        "importPath": "backend.open_webui.utils.models",
        "description": "backend.open_webui.utils.models",
        "peekOfCode": "def check_model_access(user, model):\n    if model.get(\"arena\"):\n        if not has_access(\n            user.id,\n            type=\"read\",\n            access_control=model.get(\"info\", {})\n            .get(\"meta\", {})\n            .get(\"access_control\", {}),\n        ):\n            raise Exception(\"Model not found\")",
        "detail": "backend.open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.models",
        "description": "backend.open_webui.utils.models",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nasync def fetch_ollama_models(request: Request, user: UserModel = None):\n    raw_ollama_models = await ollama.get_all_models(request, user=user)\n    return [\n        {\n            \"id\": model[\"model\"],\n            \"name\": model[\"name\"],\n            \"object\": \"model\",\n            \"created\": int(time.time()),",
        "detail": "backend.open_webui.utils.models",
        "documentation": {}
    },
    {
        "label": "OAuthManager",
        "kind": 6,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "class OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():\n            provider_config[\"register\"](self.oauth)\n    def get_client(self, provider_name):\n        return self.oauth.create_client(provider_name)\n    def get_user_role(self, user, user_data):\n        if user and Users.get_num_users() == 1:",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"OAUTH\"])\nauth_manager_config = AppConfig()\nauth_manager_config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\nauth_manager_config.ENABLE_OAUTH_SIGNUP = ENABLE_OAUTH_SIGNUP\nauth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL = OAUTH_MERGE_ACCOUNTS_BY_EMAIL\nauth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config = AppConfig()\nauth_manager_config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\nauth_manager_config.ENABLE_OAUTH_SIGNUP = ENABLE_OAUTH_SIGNUP\nauth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL = OAUTH_MERGE_ACCOUNTS_BY_EMAIL\nauth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.DEFAULT_USER_ROLE",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\nauth_manager_config.ENABLE_OAUTH_SIGNUP = ENABLE_OAUTH_SIGNUP\nauth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL = OAUTH_MERGE_ACCOUNTS_BY_EMAIL\nauth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.ENABLE_OAUTH_SIGNUP",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.ENABLE_OAUTH_SIGNUP = ENABLE_OAUTH_SIGNUP\nauth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL = OAUTH_MERGE_ACCOUNTS_BY_EMAIL\nauth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_MERGE_ACCOUNTS_BY_EMAIL = OAUTH_MERGE_ACCOUNTS_BY_EMAIL\nauth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.ENABLE_OAUTH_GROUP_MANAGEMENT = ENABLE_OAUTH_GROUP_MANAGEMENT\nauth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.ENABLE_OAUTH_GROUP_CREATION",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.ENABLE_OAUTH_GROUP_CREATION = ENABLE_OAUTH_GROUP_CREATION\nauth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_BLOCKED_GROUPS",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_BLOCKED_GROUPS = OAUTH_BLOCKED_GROUPS\nauth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_ROLES_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\nauth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_GROUPS_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_GROUPS_CLAIM = OAUTH_GROUPS_CLAIM\nauth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_EMAIL_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\nauth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_PICTURE_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\nauth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_USERNAME_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\nauth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_ALLOWED_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\nauth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_ADMIN_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\nauth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_ALLOWED_DOMAINS",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_ALLOWED_DOMAINS = OAUTH_ALLOWED_DOMAINS\nauth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():\n            provider_config[\"register\"](self.oauth)",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.WEBHOOK_URL",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.WEBHOOK_URL = WEBHOOK_URL\nauth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():\n            provider_config[\"register\"](self.oauth)\n    def get_client(self, provider_name):",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.JWT_EXPIRES_IN",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\nauth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():\n            provider_config[\"register\"](self.oauth)\n    def get_client(self, provider_name):\n        return self.oauth.create_client(provider_name)",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "auth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN",
        "kind": 5,
        "importPath": "backend.open_webui.utils.oauth",
        "description": "backend.open_webui.utils.oauth",
        "peekOfCode": "auth_manager_config.OAUTH_UPDATE_PICTURE_ON_LOGIN = OAUTH_UPDATE_PICTURE_ON_LOGIN\nclass OAuthManager:\n    def __init__(self, app):\n        self.oauth = OAuth()\n        self.app = app\n        for _, provider_config in OAUTH_PROVIDERS.items():\n            provider_config[\"register\"](self.oauth)\n    def get_client(self, provider_name):\n        return self.oauth.create_client(provider_name)\n    def get_user_role(self, user, user_data):",
        "detail": "backend.open_webui.utils.oauth",
        "documentation": {}
    },
    {
        "label": "apply_model_system_prompt_to_body",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def apply_model_system_prompt_to_body(\n    system: Optional[str], form_data: dict, metadata: Optional[dict] = None, user=None\n) -> dict:\n    if not system:\n        return form_data\n    # Metadata (WebUI Usage)\n    if metadata:\n        variables = metadata.get(\"variables\", {})\n        if variables:\n            system = prompt_variables_template(system, variables)",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def apply_model_params_to_body(\n    params: dict, form_data: dict, mappings: dict[str, Callable]\n) -> dict:\n    if not params:\n        return form_data\n    for key, value in params.items():\n        if value is not None:\n            if key in mappings:\n                cast_func = mappings[key]\n                if isinstance(cast_func, Callable):",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "remove_open_webui_params",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def remove_open_webui_params(params: dict) -> dict:\n    \"\"\"\n    Removes OpenWebUI specific parameters from the provided dictionary.\n    Args:\n        params (dict): The dictionary containing parameters.\n    Returns:\n        dict: The modified dictionary with OpenWebUI parameters removed.\n    \"\"\"\n    open_webui_params = {\n        \"stream_response\": bool,",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_openai",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def apply_model_params_to_body_openai(params: dict, form_data: dict) -> dict:\n    params = remove_open_webui_params(params)\n    custom_params = params.pop(\"custom_params\", {})\n    if custom_params:\n        # Attempt to parse custom_params if they are strings\n        for key, value in custom_params.items():\n            if isinstance(value, str):\n                try:\n                    # Attempt to parse the string as JSON\n                    custom_params[key] = json.loads(value)",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "apply_model_params_to_body_ollama",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def apply_model_params_to_body_ollama(params: dict, form_data: dict) -> dict:\n    params = remove_open_webui_params(params)\n    custom_params = params.pop(\"custom_params\", {})\n    if custom_params:\n        # Attempt to parse custom_params if they are strings\n        for key, value in custom_params.items():\n            if isinstance(value, str):\n                try:\n                    # Attempt to parse the string as JSON\n                    custom_params[key] = json.loads(value)",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "convert_messages_openai_to_ollama",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def convert_messages_openai_to_ollama(messages: list[dict]) -> list[dict]:\n    ollama_messages = []\n    for message in messages:\n        # Initialize the new message structure with the role\n        new_message = {\"role\": message[\"role\"]}\n        content = message.get(\"content\", [])\n        tool_calls = message.get(\"tool_calls\", None)\n        tool_call_id = message.get(\"tool_call_id\", None)\n        # Check if the content is a string (just a simple message)\n        if isinstance(content, str) and not tool_calls:",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "convert_payload_openai_to_ollama",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def convert_payload_openai_to_ollama(openai_payload: dict) -> dict:\n    \"\"\"\n    Converts a payload formatted for OpenAI's API to be compatible with Ollama's API endpoint for chat completions.\n    Args:\n        openai_payload (dict): The payload originally designed for OpenAI API usage.\n    Returns:\n        dict: A modified payload compatible with the Ollama API.\n    \"\"\"\n    ollama_payload = {}\n    # Mapping basic model and message details",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "convert_embedding_payload_openai_to_ollama",
        "kind": 2,
        "importPath": "backend.open_webui.utils.payload",
        "description": "backend.open_webui.utils.payload",
        "peekOfCode": "def convert_embedding_payload_openai_to_ollama(openai_payload: dict) -> dict:\n    \"\"\"\n    Convert an embeddings request payload from OpenAI format to Ollama format.\n    Args:\n        openai_payload (dict): The original payload designed for OpenAI API usage.\n    Returns:\n        dict: A payload compatible with the Ollama API embeddings endpoint.\n    \"\"\"\n    ollama_payload = {\"model\": openai_payload.get(\"model\")}\n    input_value = openai_payload.get(\"input\")",
        "detail": "backend.open_webui.utils.payload",
        "documentation": {}
    },
    {
        "label": "PDFGenerator",
        "kind": 6,
        "importPath": "backend.open_webui.utils.pdf_generator",
        "description": "backend.open_webui.utils.pdf_generator",
        "peekOfCode": "class PDFGenerator:\n    \"\"\"\n    Description:\n    The `PDFGenerator` class is designed to create PDF documents from chat messages.\n    The process involves transforming markdown content into HTML and then into a PDF format\n    Attributes:\n    - `form_data`: An instance of `ChatTitleMessagesForm` containing title and messages.\n    \"\"\"\n    def __init__(self, form_data: ChatTitleMessagesForm):\n        self.html_body = None",
        "detail": "backend.open_webui.utils.pdf_generator",
        "documentation": {}
    },
    {
        "label": "extract_frontmatter",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def extract_frontmatter(content):\n    \"\"\"\n    Extract frontmatter as a dictionary from the provided content string.\n    \"\"\"\n    frontmatter = {}\n    frontmatter_started = False\n    frontmatter_ended = False\n    frontmatter_pattern = re.compile(r\"^\\s*([a-z_]+):\\s*(.*)\\s*$\", re.IGNORECASE)\n    try:\n        lines = content.splitlines()",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "replace_imports",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def replace_imports(content):\n    \"\"\"\n    Replace the import paths in the content.\n    \"\"\"\n    replacements = {\n        \"from utils\": \"from open_webui.utils\",\n        \"from apps\": \"from open_webui.apps\",\n        \"from main\": \"from open_webui.main\",\n        \"from config\": \"from open_webui.config\",\n    }",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_tool_module_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def load_tool_module_by_id(tool_id, content=None):\n    if content is None:\n        tool = Tools.get_tool_by_id(tool_id)\n        if not tool:\n            raise Exception(f\"Toolkit not found: {tool_id}\")\n        content = tool.content\n        content = replace_imports(content)\n        Tools.update_tool_by_id(tool_id, {\"content\": content})\n    else:\n        frontmatter = extract_frontmatter(content)",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "load_function_module_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def load_function_module_by_id(function_id: str, content: str | None = None):\n    if content is None:\n        function = Functions.get_function_by_id(function_id)\n        if not function:\n            raise Exception(f\"Function not found: {function_id}\")\n        content = function.content\n        content = replace_imports(content)\n        Functions.update_function_by_id(function_id, {\"content\": content})\n    else:\n        frontmatter = extract_frontmatter(content)",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "get_function_module_from_cache",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def get_function_module_from_cache(request, function_id, load_from_db=True):\n    if load_from_db:\n        # Always load from the database by default\n        # This is useful for hooks like \"inlet\" or \"outlet\" where the content might change\n        # and we want to ensure the latest content is used.\n        function = Functions.get_function_by_id(function_id)\n        if not function:\n            raise Exception(f\"Function not found: {function_id}\")\n        content = function.content\n        new_content = replace_imports(content)",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "install_frontmatter_requirements",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def install_frontmatter_requirements(requirements: str):\n    if requirements:\n        try:\n            req_list = [req.strip() for req in requirements.split(\",\")]\n            log.info(f\"Installing requirements: {' '.join(req_list)}\")\n            subprocess.check_call(\n                [sys.executable, \"-m\", \"pip\", \"install\"]\n                + PIP_OPTIONS\n                + req_list\n                + PIP_PACKAGE_INDEX_OPTIONS",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "install_tool_and_function_dependencies",
        "kind": 2,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "def install_tool_and_function_dependencies():\n    \"\"\"\n    Install all dependencies for all admin tools and active functions.\n    By first collecting all dependencies from the frontmatter of each tool and function,\n    and then installing them using pip. Duplicates or similar version specifications are\n    handled by pip as much as possible.\n    \"\"\"\n    function_list = Functions.get_functions(active_only=True)\n    tool_list = Tools.get_tools()\n    all_dependencies = \"\"",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.plugin",
        "description": "backend.open_webui.utils.plugin",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\ndef extract_frontmatter(content):\n    \"\"\"\n    Extract frontmatter as a dictionary from the provided content string.\n    \"\"\"\n    frontmatter = {}\n    frontmatter_started = False\n    frontmatter_ended = False\n    frontmatter_pattern = re.compile(r\"^\\s*([a-z_]+):\\s*(.*)\\s*$\", re.IGNORECASE)",
        "detail": "backend.open_webui.utils.plugin",
        "documentation": {}
    },
    {
        "label": "parse_redis_service_url",
        "kind": 2,
        "importPath": "backend.open_webui.utils.redis",
        "description": "backend.open_webui.utils.redis",
        "peekOfCode": "def parse_redis_service_url(redis_url):\n    parsed_url = urlparse(redis_url)\n    if parsed_url.scheme != \"redis\":\n        raise ValueError(\"Invalid Redis URL scheme. Must be 'redis'.\")\n    return {\n        \"username\": parsed_url.username or None,\n        \"password\": parsed_url.password or None,\n        \"service\": parsed_url.hostname or \"mymaster\",\n        \"port\": parsed_url.port or 6379,\n        \"db\": int(parsed_url.path.lstrip(\"/\") or 0),",
        "detail": "backend.open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_redis_connection",
        "kind": 2,
        "importPath": "backend.open_webui.utils.redis",
        "description": "backend.open_webui.utils.redis",
        "peekOfCode": "def get_redis_connection(\n    redis_url, redis_sentinels, async_mode=False, decode_responses=True\n):\n    if async_mode:\n        import redis.asyncio as redis\n        # If using sentinel in async mode\n        if redis_sentinels:\n            redis_config = parse_redis_service_url(redis_url)\n            sentinel = redis.sentinel.Sentinel(\n                redis_sentinels,",
        "detail": "backend.open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_sentinels_from_env",
        "kind": 2,
        "importPath": "backend.open_webui.utils.redis",
        "description": "backend.open_webui.utils.redis",
        "peekOfCode": "def get_sentinels_from_env(sentinel_hosts_env, sentinel_port_env):\n    if sentinel_hosts_env:\n        sentinel_hosts = sentinel_hosts_env.split(\",\")\n        sentinel_port = int(sentinel_port_env)\n        return [(host, sentinel_port) for host in sentinel_hosts]\n    return []\ndef get_sentinel_url_from_env(redis_url, sentinel_hosts_env, sentinel_port_env):\n    redis_config = parse_redis_service_url(redis_url)\n    username = redis_config[\"username\"] or \"\"\n    password = redis_config[\"password\"] or \"\"",
        "detail": "backend.open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "get_sentinel_url_from_env",
        "kind": 2,
        "importPath": "backend.open_webui.utils.redis",
        "description": "backend.open_webui.utils.redis",
        "peekOfCode": "def get_sentinel_url_from_env(redis_url, sentinel_hosts_env, sentinel_port_env):\n    redis_config = parse_redis_service_url(redis_url)\n    username = redis_config[\"username\"] or \"\"\n    password = redis_config[\"password\"] or \"\"\n    auth_part = \"\"\n    if username or password:\n        auth_part = f\"{username}:{password}@\"\n    hosts_part = \",\".join(\n        f\"{host}:{sentinel_port_env}\" for host in sentinel_hosts_env.split(\",\")\n    )",
        "detail": "backend.open_webui.utils.redis",
        "documentation": {}
    },
    {
        "label": "convert_ollama_tool_call_to_openai",
        "kind": 2,
        "importPath": "backend.open_webui.utils.response",
        "description": "backend.open_webui.utils.response",
        "peekOfCode": "def convert_ollama_tool_call_to_openai(tool_calls: dict) -> dict:\n    openai_tool_calls = []\n    for tool_call in tool_calls:\n        openai_tool_call = {\n            \"index\": tool_call.get(\"index\", 0),\n            \"id\": tool_call.get(\"id\", f\"call_{str(uuid4())}\"),\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": tool_call.get(\"function\", {}).get(\"name\", \"\"),\n                \"arguments\": json.dumps(",
        "detail": "backend.open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "convert_ollama_usage_to_openai",
        "kind": 2,
        "importPath": "backend.open_webui.utils.response",
        "description": "backend.open_webui.utils.response",
        "peekOfCode": "def convert_ollama_usage_to_openai(data: dict) -> dict:\n    return {\n        \"response_token/s\": (\n            round(\n                (\n                    (\n                        data.get(\"eval_count\", 0)\n                        / ((data.get(\"eval_duration\", 0) / 10_000_000))\n                    )\n                    * 100",
        "detail": "backend.open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "convert_response_ollama_to_openai",
        "kind": 2,
        "importPath": "backend.open_webui.utils.response",
        "description": "backend.open_webui.utils.response",
        "peekOfCode": "def convert_response_ollama_to_openai(ollama_response: dict) -> dict:\n    model = ollama_response.get(\"model\", \"ollama\")\n    message_content = ollama_response.get(\"message\", {}).get(\"content\", \"\")\n    reasoning_content = ollama_response.get(\"message\", {}).get(\"thinking\", None)\n    tool_calls = ollama_response.get(\"message\", {}).get(\"tool_calls\", None)\n    openai_tool_calls = None\n    if tool_calls:\n        openai_tool_calls = convert_ollama_tool_call_to_openai(tool_calls)\n    data = ollama_response\n    usage = convert_ollama_usage_to_openai(data)",
        "detail": "backend.open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "convert_embedding_response_ollama_to_openai",
        "kind": 2,
        "importPath": "backend.open_webui.utils.response",
        "description": "backend.open_webui.utils.response",
        "peekOfCode": "def convert_embedding_response_ollama_to_openai(response) -> dict:\n    \"\"\"\n    Convert the response from Ollama embeddings endpoint to the OpenAI-compatible format.\n    Args:\n        response (dict): The response from the Ollama API,\n            e.g. {\"embedding\": [...], \"model\": \"...\"}\n            or {\"embeddings\": [{\"embedding\": [...], \"index\": 0}, ...], \"model\": \"...\"}\n    Returns:\n        dict: Response adapted to OpenAI's embeddings API format.\n            e.g. {",
        "detail": "backend.open_webui.utils.response",
        "documentation": {}
    },
    {
        "label": "SecurityHeadersMiddleware",
        "kind": 6,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "class SecurityHeadersMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        response = await call_next(request)\n        response.headers.update(set_security_headers())\n        return response\ndef set_security_headers() -> Dict[str, str]:\n    \"\"\"\n    Sets security headers based on environment variables.\n    This function reads specific environment variables and uses their values\n    to set corresponding security headers. The headers that can be set are:",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_security_headers",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_security_headers() -> Dict[str, str]:\n    \"\"\"\n    Sets security headers based on environment variables.\n    This function reads specific environment variables and uses their values\n    to set corresponding security headers. The headers that can be set are:\n    - cache-control\n    - permissions-policy\n    - strict-transport-security\n    - referrer-policy\n    - x-content-type-options",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_hsts",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_hsts(value: str):\n    pattern = r\"^max-age=(\\d+)(;includeSubDomains)?(;preload)?$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"max-age=31536000;includeSubDomains\"\n    return {\"Strict-Transport-Security\": value}\n# Set X-Frame-Options response header\ndef set_xframe(value: str):\n    pattern = r\"^(DENY|SAMEORIGIN)$\"\n    match = re.match(pattern, value, re.IGNORECASE)",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_xframe",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_xframe(value: str):\n    pattern = r\"^(DENY|SAMEORIGIN)$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"DENY\"\n    return {\"X-Frame-Options\": value}\n# Set Permissions-Policy response header\ndef set_permissions_policy(value: str):\n    pattern = r\"^(?:(accelerometer|autoplay|camera|clipboard-read|clipboard-write|fullscreen|geolocation|gyroscope|magnetometer|microphone|midi|payment|picture-in-picture|sync-xhr|usb|xr-spatial-tracking)=\\((self)?\\),?)*$\"\n    match = re.match(pattern, value, re.IGNORECASE)",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_permissions_policy",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_permissions_policy(value: str):\n    pattern = r\"^(?:(accelerometer|autoplay|camera|clipboard-read|clipboard-write|fullscreen|geolocation|gyroscope|magnetometer|microphone|midi|payment|picture-in-picture|sync-xhr|usb|xr-spatial-tracking)=\\((self)?\\),?)*$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"none\"\n    return {\"Permissions-Policy\": value}\n# Set Referrer-Policy response header\ndef set_referrer(value: str):\n    pattern = r\"^(no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url)$\"\n    match = re.match(pattern, value, re.IGNORECASE)",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_referrer",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_referrer(value: str):\n    pattern = r\"^(no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url)$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"no-referrer\"\n    return {\"Referrer-Policy\": value}\n# Set Cache-Control response header\ndef set_cache_control(value: str):\n    pattern = r\"^(public|private|no-cache|no-store|must-revalidate|proxy-revalidate|max-age=\\d+|s-maxage=\\d+|no-transform|immutable)(,\\s*(public|private|no-cache|no-store|must-revalidate|proxy-revalidate|max-age=\\d+|s-maxage=\\d+|no-transform|immutable))*$\"\n    match = re.match(pattern, value, re.IGNORECASE)",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_cache_control",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_cache_control(value: str):\n    pattern = r\"^(public|private|no-cache|no-store|must-revalidate|proxy-revalidate|max-age=\\d+|s-maxage=\\d+|no-transform|immutable)(,\\s*(public|private|no-cache|no-store|must-revalidate|proxy-revalidate|max-age=\\d+|s-maxage=\\d+|no-transform|immutable))*$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"no-store, max-age=0\"\n    return {\"Cache-Control\": value}\n# Set X-Download-Options response header\ndef set_xdownload_options(value: str):\n    if value != \"noopen\":\n        value = \"noopen\"",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_xdownload_options",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_xdownload_options(value: str):\n    if value != \"noopen\":\n        value = \"noopen\"\n    return {\"X-Download-Options\": value}\n# Set X-Content-Type-Options response header\ndef set_xcontent_type(value: str):\n    if value != \"nosniff\":\n        value = \"nosniff\"\n    return {\"X-Content-Type-Options\": value}\n# Set X-Permitted-Cross-Domain-Policies response header",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_xcontent_type",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_xcontent_type(value: str):\n    if value != \"nosniff\":\n        value = \"nosniff\"\n    return {\"X-Content-Type-Options\": value}\n# Set X-Permitted-Cross-Domain-Policies response header\ndef set_xpermitted_cross_domain_policies(value: str):\n    pattern = r\"^(none|master-only|by-content-type|by-ftp-filename)$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"none\"",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_xpermitted_cross_domain_policies",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_xpermitted_cross_domain_policies(value: str):\n    pattern = r\"^(none|master-only|by-content-type|by-ftp-filename)$\"\n    match = re.match(pattern, value, re.IGNORECASE)\n    if not match:\n        value = \"none\"\n    return {\"X-Permitted-Cross-Domain-Policies\": value}\n# Set Content-Security-Policy response header\ndef set_content_security_policy(value: str):\n    return {\"Content-Security-Policy\": value}",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "set_content_security_policy",
        "kind": 2,
        "importPath": "backend.open_webui.utils.security_headers",
        "description": "backend.open_webui.utils.security_headers",
        "peekOfCode": "def set_content_security_policy(value: str):\n    return {\"Content-Security-Policy\": value}",
        "detail": "backend.open_webui.utils.security_headers",
        "documentation": {}
    },
    {
        "label": "get_task_model_id",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def get_task_model_id(\n    default_model_id: str, task_model: str, task_model_external: str, models\n) -> str:\n    # Set the task model\n    task_model_id = default_model_id\n    # Check if the user has a custom task model and use that model\n    if models[task_model_id].get(\"connection_type\") == \"local\":\n        if task_model and task_model in models:\n            task_model_id = task_model\n    else:",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "prompt_variables_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def prompt_variables_template(template: str, variables: dict[str, str]) -> str:\n    for variable, value in variables.items():\n        template = template.replace(variable, value)\n    return template\ndef prompt_template(\n    template: str, user_name: Optional[str] = None, user_location: Optional[str] = None\n) -> str:\n    # Get the current date\n    current_date = datetime.now()\n    # Format the date to YYYY-MM-DD",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "prompt_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def prompt_template(\n    template: str, user_name: Optional[str] = None, user_location: Optional[str] = None\n) -> str:\n    # Get the current date\n    current_date = datetime.now()\n    # Format the date to YYYY-MM-DD\n    formatted_date = current_date.strftime(\"%Y-%m-%d\")\n    formatted_time = current_date.strftime(\"%I:%M:%S %p\")\n    formatted_weekday = current_date.strftime(\"%A\")\n    template = template.replace(\"{{CURRENT_DATE}}\", formatted_date)",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "replace_prompt_variable",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def replace_prompt_variable(template: str, prompt: str) -> str:\n    def replacement_function(match):\n        full_match = match.group(\n            0\n        ).lower()  # Normalize to lowercase for consistent handling\n        start_length = match.group(1)\n        end_length = match.group(2)\n        middle_length = match.group(3)\n        if full_match == \"{{prompt}}\":\n            return prompt",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "replace_messages_variable",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def replace_messages_variable(\n    template: str, messages: Optional[list[dict]] = None\n) -> str:\n    def replacement_function(match):\n        full_match = match.group(0)\n        start_length = match.group(1)\n        end_length = match.group(2)\n        middle_length = match.group(3)\n        # If messages is None, handle it as an empty list\n        if messages is None:",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "rag_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def rag_template(template: str, context: str, query: str):\n    if template.strip() == \"\":\n        template = DEFAULT_RAG_TEMPLATE\n    template = prompt_template(template)\n    if \"[context]\" not in template and \"{{CONTEXT}}\" not in template:\n        log.debug(\n            \"WARNING: The RAG template does not contain the '[context]' or '{{CONTEXT}}' placeholder.\"\n        )\n    if \"<context>\" in context and \"</context>\" in context:\n        log.debug(",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "title_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def title_generation_template(\n    template: str, messages: list[dict], user: Optional[dict] = None\n) -> str:\n    prompt = get_last_user_message(messages)\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "follow_up_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def follow_up_generation_template(\n    template: str, messages: list[dict], user: Optional[dict] = None\n) -> str:\n    prompt = get_last_user_message(messages)\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "tags_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def tags_generation_template(\n    template: str, messages: list[dict], user: Optional[dict] = None\n) -> str:\n    prompt = get_last_user_message(messages)\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "image_prompt_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def image_prompt_generation_template(\n    template: str, messages: list[dict], user: Optional[dict] = None\n) -> str:\n    prompt = get_last_user_message(messages)\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "emoji_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def emoji_generation_template(\n    template: str, prompt: str, user: Optional[dict] = None\n) -> str:\n    template = replace_prompt_variable(template, prompt)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}\n            if user\n            else {}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "autocomplete_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def autocomplete_generation_template(\n    template: str,\n    prompt: str,\n    messages: Optional[list[dict]] = None,\n    type: Optional[str] = None,\n    user: Optional[dict] = None,\n) -> str:\n    template = template.replace(\"{{TYPE}}\", type if type else \"\")\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "query_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def query_generation_template(\n    template: str, messages: list[dict], user: Optional[dict] = None\n) -> str:\n    prompt = get_last_user_message(messages)\n    template = replace_prompt_variable(template, prompt)\n    template = replace_messages_variable(template, messages)\n    template = prompt_template(\n        template,\n        **(\n            {\"user_name\": user.get(\"name\"), \"user_location\": user.get(\"location\")}",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "moa_response_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def moa_response_generation_template(\n    template: str, prompt: str, responses: list[str]\n) -> str:\n    def replacement_function(match):\n        full_match = match.group(0)\n        start_length = match.group(1)\n        end_length = match.group(2)\n        middle_length = match.group(3)\n        if full_match == \"{{prompt}}\":\n            return prompt",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "tools_function_calling_generation_template",
        "kind": 2,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "def tools_function_calling_generation_template(template: str, tools_specs: str) -> str:\n    template = template.replace(\"{{TOOLS}}\", tools_specs)\n    return template",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.task",
        "description": "backend.open_webui.utils.task",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"RAG\"])\ndef get_task_model_id(\n    default_model_id: str, task_model: str, task_model_external: str, models\n) -> str:\n    # Set the task model\n    task_model_id = default_model_id\n    # Check if the user has a custom task model and use that model\n    if models[task_model_id].get(\"connection_type\") == \"local\":\n        if task_model and task_model in models:",
        "detail": "backend.open_webui.utils.task",
        "documentation": {}
    },
    {
        "label": "get_async_tool_function_and_apply_extra_params",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def get_async_tool_function_and_apply_extra_params(\n    function: Callable, extra_params: dict\n) -> Callable[..., Awaitable]:\n    sig = inspect.signature(function)\n    extra_params = {k: v for k, v in extra_params.items() if k in sig.parameters}\n    partial_func = partial(function, **extra_params)\n    if inspect.iscoroutinefunction(function):\n        update_wrapper(partial_func, function)\n        return partial_func\n    else:",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tools",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def get_tools(\n    request: Request, tool_ids: list[str], user: UserModel, extra_params: dict\n) -> dict[str, dict]:\n    tools_dict = {}\n    for tool_id in tool_ids:\n        tool = Tools.get_tool_by_id(tool_id)\n        if tool is None:\n            if tool_id.startswith(\"server:\"):\n                server_idx = int(tool_id.split(\":\")[1])\n                tool_server_connection = (",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "parse_description",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def parse_description(docstring: str | None) -> str:\n    \"\"\"\n    Parse a function's docstring to extract the description.\n    Args:\n        docstring (str): The docstring to parse.\n    Returns:\n        str: The description.\n    \"\"\"\n    if not docstring:\n        return \"\"",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "parse_docstring",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def parse_docstring(docstring):\n    \"\"\"\n    Parse a function's docstring to extract parameter descriptions in reST format.\n    Args:\n        docstring (str): The docstring to parse.\n    Returns:\n        dict: A dictionary where keys are parameter names and values are descriptions.\n    \"\"\"\n    if not docstring:\n        return {}",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "convert_function_to_pydantic_model",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def convert_function_to_pydantic_model(func: Callable) -> type[BaseModel]:\n    \"\"\"\n    Converts a Python function's type hints and docstring to a Pydantic model,\n    including support for nested types, default values, and descriptions.\n    Args:\n        func: The function whose type hints and docstring should be converted.\n        model_name: The name of the generated Pydantic model.\n    Returns:\n        A Pydantic model class.\n    \"\"\"",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_functions_from_tool",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def get_functions_from_tool(tool: object) -> list[Callable]:\n    return [\n        getattr(tool, func)\n        for func in dir(tool)\n        if callable(\n            getattr(tool, func)\n        )  # checks if the attribute is callable (a method or function).\n        and not func.startswith(\n            \"__\"\n        )  # filters out special (dunder) methods like init, str, etc. — these are usually built-in functions of an object that you might not need to use directly.",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "get_tool_specs",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def get_tool_specs(tool_module: object) -> list[dict]:\n    function_models = map(\n        convert_function_to_pydantic_model, get_functions_from_tool(tool_module)\n    )\n    specs = [\n        convert_pydantic_model_to_openai_function_spec(function_model)\n        for function_model in function_models\n    ]\n    return specs\ndef resolve_schema(schema, components):",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "resolve_schema",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def resolve_schema(schema, components):\n    \"\"\"\n    Recursively resolves a JSON schema using OpenAPI components.\n    \"\"\"\n    if not schema:\n        return {}\n    if \"$ref\" in schema:\n        ref_path = schema[\"$ref\"]\n        ref_parts = ref_path.strip(\"#/\").split(\"/\")\n        resolved = components",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "convert_openapi_to_tool_payload",
        "kind": 2,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "def convert_openapi_to_tool_payload(openapi_spec):\n    \"\"\"\n    Converts an OpenAPI specification into a custom tool payload structure.\n    Args:\n        openapi_spec (dict): The OpenAPI specification as a Python dict.\n    Returns:\n        list: A list of tool payloads.\n    \"\"\"\n    tool_payload = []\n    for path, methods in openapi_spec.get(\"paths\", {}).items():",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.tools",
        "description": "backend.open_webui.utils.tools",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MODELS\"])\ndef get_async_tool_function_and_apply_extra_params(\n    function: Callable, extra_params: dict\n) -> Callable[..., Awaitable]:\n    sig = inspect.signature(function)\n    extra_params = {k: v for k, v in extra_params.items() if k in sig.parameters}\n    partial_func = partial(function, **extra_params)\n    if inspect.iscoroutinefunction(function):\n        update_wrapper(partial_func, function)",
        "detail": "backend.open_webui.utils.tools",
        "documentation": {}
    },
    {
        "label": "post_webhook",
        "kind": 2,
        "importPath": "backend.open_webui.utils.webhook",
        "description": "backend.open_webui.utils.webhook",
        "peekOfCode": "def post_webhook(name: str, url: str, message: str, event_data: dict) -> bool:\n    try:\n        log.debug(f\"post_webhook: {url}, {message}, {event_data}\")\n        payload = {}\n        # Slack and Google Chat Webhooks\n        if \"https://hooks.slack.com\" in url or \"https://chat.googleapis.com\" in url:\n            payload[\"text\"] = message\n        # Discord Webhooks\n        elif \"https://discord.com/api/webhooks\" in url:\n            payload[\"content\"] = (",
        "detail": "backend.open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.utils.webhook",
        "description": "backend.open_webui.utils.webhook",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"WEBHOOK\"])\ndef post_webhook(name: str, url: str, message: str, event_data: dict) -> bool:\n    try:\n        log.debug(f\"post_webhook: {url}, {message}, {event_data}\")\n        payload = {}\n        # Slack and Google Chat Webhooks\n        if \"https://hooks.slack.com\" in url or \"https://chat.googleapis.com\" in url:\n            payload[\"text\"] = message\n        # Discord Webhooks",
        "detail": "backend.open_webui.utils.webhook",
        "documentation": {}
    },
    {
        "label": "EndpointFilter",
        "kind": 6,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "class EndpointFilter(logging.Filter):\n    def filter(self, record: logging.LogRecord) -> bool:\n        return record.getMessage().find(\"/health\") == -1\n# Filter out /endpoint\nlogging.getLogger(\"uvicorn.access\").addFilter(EndpointFilter())\n####################################\n# Config helpers\n####################################\n# Function to run the alembic migrations\ndef run_migrations():",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "class Config(Base):\n    __tablename__ = \"config\"\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON, nullable=False)\n    version = Column(Integer, nullable=False, default=0)\n    created_at = Column(DateTime, nullable=False, server_default=func.now())\n    updated_at = Column(DateTime, nullable=True, onupdate=func.now())\ndef load_json_config():\n    with open(f\"{DATA_DIR}/config.json\", \"r\") as file:\n        return json.load(file)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PersistentConfig",
        "kind": 6,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "class PersistentConfig(Generic[T]):\n    def __init__(self, env_name: str, config_path: str, env_value: T):\n        self.env_name = env_name\n        self.config_path = config_path\n        self.env_value = env_value\n        self.config_value = get_config_value(config_path)\n        if self.config_value is not None and ENABLE_PERSISTENT_CONFIG:\n            log.info(f\"'{env_name}' loaded from the latest database entry\")\n            self.value = self.config_value\n        else:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "class AppConfig:\n    _state: dict[str, PersistentConfig]\n    _redis: Optional[redis.Redis] = None\n    def __init__(\n        self, redis_url: Optional[str] = None, redis_sentinels: Optional[list] = []\n    ):\n        super().__setattr__(\"_state\", {})\n        if redis_url:\n            super().__setattr__(\n                \"_redis\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BannerModel",
        "kind": 6,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "class BannerModel(BaseModel):\n    id: str\n    type: str\n    title: Optional[str] = None\n    content: str\n    dismissible: bool\n    timestamp: int\ntry:\n    banners = json.loads(os.environ.get(\"WEBUI_BANNERS\", \"[]\"))\n    banners = [BannerModel(**banner) for banner in banners]",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "run_migrations",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def run_migrations():\n    log.info(\"Running migrations\")\n    try:\n        from alembic import command\n        from alembic.config import Config\n        alembic_cfg = Config(OPEN_WEBUI_DIR / \"alembic.ini\")\n        # Set the script location dynamically\n        migrations_path = OPEN_WEBUI_DIR / \"migrations\"\n        alembic_cfg.set_main_option(\"script_location\", str(migrations_path))\n        command.upgrade(alembic_cfg, \"head\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "load_json_config",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def load_json_config():\n    with open(f\"{DATA_DIR}/config.json\", \"r\") as file:\n        return json.load(file)\ndef save_to_db(data):\n    with get_db() as db:\n        existing_config = db.query(Config).first()\n        if not existing_config:\n            new_config = Config(data=data, version=0)\n            db.add(new_config)\n        else:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "save_to_db",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def save_to_db(data):\n    with get_db() as db:\n        existing_config = db.query(Config).first()\n        if not existing_config:\n            new_config = Config(data=data, version=0)\n            db.add(new_config)\n        else:\n            existing_config.data = data\n            existing_config.updated_at = datetime.now()\n            db.add(existing_config)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "reset_config",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def reset_config():\n    with get_db() as db:\n        db.query(Config).delete()\n        db.commit()\n# When initializing, check if config.json exists and migrate it to the database\nif os.path.exists(f\"{DATA_DIR}/config.json\"):\n    data = load_json_config()\n    save_to_db(data)\n    os.rename(f\"{DATA_DIR}/config.json\", f\"{DATA_DIR}/old_config.json\")\nDEFAULT_CONFIG = {",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "get_config",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def get_config():\n    with get_db() as db:\n        config_entry = db.query(Config).order_by(Config.id.desc()).first()\n        return config_entry.data if config_entry else DEFAULT_CONFIG\nCONFIG_DATA = get_config()\ndef get_config_value(config_path: str):\n    path_parts = config_path.split(\".\")\n    cur_config = CONFIG_DATA\n    for key in path_parts:\n        if key in cur_config:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "get_config_value",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def get_config_value(config_path: str):\n    path_parts = config_path.split(\".\")\n    cur_config = CONFIG_DATA\n    for key in path_parts:\n        if key in cur_config:\n            cur_config = cur_config[key]\n        else:\n            return None\n    return cur_config\nPERSISTENT_CONFIG_REGISTRY = []",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "save_config",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def save_config(config):\n    global CONFIG_DATA\n    global PERSISTENT_CONFIG_REGISTRY\n    try:\n        save_to_db(config)\n        CONFIG_DATA = config\n        # Trigger updates on all registered PersistentConfig entries\n        for config_item in PERSISTENT_CONFIG_REGISTRY:\n            config_item.update()\n    except Exception as e:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "load_oauth_providers",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def load_oauth_providers():\n    OAUTH_PROVIDERS.clear()\n    if GOOGLE_CLIENT_ID.value and GOOGLE_CLIENT_SECRET.value:\n        def google_oauth_register(client):\n            client.register(\n                name=\"google\",\n                client_id=GOOGLE_CLIENT_ID.value,\n                client_secret=GOOGLE_CLIENT_SECRET.value,\n                server_metadata_url=\"https://accounts.google.com/.well-known/openid-configuration\",\n                client_kwargs={\"scope\": GOOGLE_OAUTH_SCOPE.value},",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "validate_cors_origin",
        "kind": 2,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "def validate_cors_origin(origin):\n    parsed_url = urlparse(origin)\n    # Check if the scheme is either http or https\n    if parsed_url.scheme not in [\"http\", \"https\"]:\n        raise ValueError(\n            f\"Invalid scheme in CORS_ALLOW_ORIGIN: '{origin}'. Only 'http' and 'https' are allowed.\"\n        )\n    # Ensure that the netloc (domain + port) is present, indicating it's a valid URL\n    if not parsed_url.netloc:\n        raise ValueError(f\"Invalid URL structure in CORS_ALLOW_ORIGIN: '{origin}'.\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONFIG",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_CONFIG = {\n    \"version\": 0,\n    \"ui\": {},\n}\ndef get_config():\n    with get_db() as db:\n        config_entry = db.query(Config).order_by(Config.id.desc()).first()\n        return config_entry.data if config_entry else DEFAULT_CONFIG\nCONFIG_DATA = get_config()\ndef get_config_value(config_path: str):",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CONFIG_DATA",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CONFIG_DATA = get_config()\ndef get_config_value(config_path: str):\n    path_parts = config_path.split(\".\")\n    cur_config = CONFIG_DATA\n    for key in path_parts:\n        if key in cur_config:\n            cur_config = cur_config[key]\n        else:\n            return None\n    return cur_config",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PERSISTENT_CONFIG_REGISTRY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PERSISTENT_CONFIG_REGISTRY = []\ndef save_config(config):\n    global CONFIG_DATA\n    global PERSISTENT_CONFIG_REGISTRY\n    try:\n        save_to_db(config)\n        CONFIG_DATA = config\n        # Trigger updates on all registered PersistentConfig entries\n        for config_item in PERSISTENT_CONFIG_REGISTRY:\n            config_item.update()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "T = TypeVar(\"T\")\nENABLE_PERSISTENT_CONFIG = (\n    os.environ.get(\"ENABLE_PERSISTENT_CONFIG\", \"True\").lower() == \"true\"\n)\nclass PersistentConfig(Generic[T]):\n    def __init__(self, env_name: str, config_path: str, env_value: T):\n        self.env_name = env_name\n        self.config_path = config_path\n        self.env_value = env_value\n        self.config_value = get_config_value(config_path)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_PERSISTENT_CONFIG",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_PERSISTENT_CONFIG = (\n    os.environ.get(\"ENABLE_PERSISTENT_CONFIG\", \"True\").lower() == \"true\"\n)\nclass PersistentConfig(Generic[T]):\n    def __init__(self, env_name: str, config_path: str, env_value: T):\n        self.env_name = env_name\n        self.config_path = config_path\n        self.env_value = env_value\n        self.config_value = get_config_value(config_path)\n        if self.config_value is not None and ENABLE_PERSISTENT_CONFIG:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_API_KEY = PersistentConfig(\n    \"ENABLE_API_KEY\",\n    \"auth.api_key.enable\",\n    os.environ.get(\"ENABLE_API_KEY\", \"True\").lower() == \"true\",\n)\nENABLE_API_KEY_ENDPOINT_RESTRICTIONS = PersistentConfig(\n    \"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\",\n    \"auth.api_key.endpoint_restrictions\",\n    os.environ.get(\"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_API_KEY_ENDPOINT_RESTRICTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = PersistentConfig(\n    \"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\",\n    \"auth.api_key.endpoint_restrictions\",\n    os.environ.get(\"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\", \"False\").lower() == \"true\",\n)\nAPI_KEY_ALLOWED_ENDPOINTS = PersistentConfig(\n    \"API_KEY_ALLOWED_ENDPOINTS\",\n    \"auth.api_key.allowed_endpoints\",\n    os.environ.get(\"API_KEY_ALLOWED_ENDPOINTS\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "API_KEY_ALLOWED_ENDPOINTS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "API_KEY_ALLOWED_ENDPOINTS = PersistentConfig(\n    \"API_KEY_ALLOWED_ENDPOINTS\",\n    \"auth.api_key.allowed_endpoints\",\n    os.environ.get(\"API_KEY_ALLOWED_ENDPOINTS\", \"\"),\n)\nJWT_EXPIRES_IN = PersistentConfig(\n    \"JWT_EXPIRES_IN\", \"auth.jwt_expiry\", os.environ.get(\"JWT_EXPIRES_IN\", \"-1\")\n)\n####################################\n# OAuth config",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "JWT_EXPIRES_IN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "JWT_EXPIRES_IN = PersistentConfig(\n    \"JWT_EXPIRES_IN\", \"auth.jwt_expiry\", os.environ.get(\"JWT_EXPIRES_IN\", \"-1\")\n)\n####################################\n# OAuth config\n####################################\nENABLE_OAUTH_SIGNUP = PersistentConfig(\n    \"ENABLE_OAUTH_SIGNUP\",\n    \"oauth.enable_signup\",\n    os.environ.get(\"ENABLE_OAUTH_SIGNUP\", \"False\").lower() == \"true\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_SIGNUP",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OAUTH_SIGNUP = PersistentConfig(\n    \"ENABLE_OAUTH_SIGNUP\",\n    \"oauth.enable_signup\",\n    os.environ.get(\"ENABLE_OAUTH_SIGNUP\", \"False\").lower() == \"true\",\n)\nOAUTH_MERGE_ACCOUNTS_BY_EMAIL = PersistentConfig(\n    \"OAUTH_MERGE_ACCOUNTS_BY_EMAIL\",\n    \"oauth.merge_accounts_by_email\",\n    os.environ.get(\"OAUTH_MERGE_ACCOUNTS_BY_EMAIL\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_MERGE_ACCOUNTS_BY_EMAIL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_MERGE_ACCOUNTS_BY_EMAIL = PersistentConfig(\n    \"OAUTH_MERGE_ACCOUNTS_BY_EMAIL\",\n    \"oauth.merge_accounts_by_email\",\n    os.environ.get(\"OAUTH_MERGE_ACCOUNTS_BY_EMAIL\", \"False\").lower() == \"true\",\n)\nOAUTH_PROVIDERS = {}\nGOOGLE_CLIENT_ID = PersistentConfig(\n    \"GOOGLE_CLIENT_ID\",\n    \"oauth.google.client_id\",\n    os.environ.get(\"GOOGLE_CLIENT_ID\", \"\"),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_PROVIDERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_PROVIDERS = {}\nGOOGLE_CLIENT_ID = PersistentConfig(\n    \"GOOGLE_CLIENT_ID\",\n    \"oauth.google.client_id\",\n    os.environ.get(\"GOOGLE_CLIENT_ID\", \"\"),\n)\nGOOGLE_CLIENT_SECRET = PersistentConfig(\n    \"GOOGLE_CLIENT_SECRET\",\n    \"oauth.google.client_secret\",\n    os.environ.get(\"GOOGLE_CLIENT_SECRET\", \"\"),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_CLIENT_ID = PersistentConfig(\n    \"GOOGLE_CLIENT_ID\",\n    \"oauth.google.client_id\",\n    os.environ.get(\"GOOGLE_CLIENT_ID\", \"\"),\n)\nGOOGLE_CLIENT_SECRET = PersistentConfig(\n    \"GOOGLE_CLIENT_SECRET\",\n    \"oauth.google.client_secret\",\n    os.environ.get(\"GOOGLE_CLIENT_SECRET\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CLIENT_SECRET",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_CLIENT_SECRET = PersistentConfig(\n    \"GOOGLE_CLIENT_SECRET\",\n    \"oauth.google.client_secret\",\n    os.environ.get(\"GOOGLE_CLIENT_SECRET\", \"\"),\n)\nGOOGLE_OAUTH_SCOPE = PersistentConfig(\n    \"GOOGLE_OAUTH_SCOPE\",\n    \"oauth.google.scope\",\n    os.environ.get(\"GOOGLE_OAUTH_SCOPE\", \"openid email profile\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_OAUTH_SCOPE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_OAUTH_SCOPE = PersistentConfig(\n    \"GOOGLE_OAUTH_SCOPE\",\n    \"oauth.google.scope\",\n    os.environ.get(\"GOOGLE_OAUTH_SCOPE\", \"openid email profile\"),\n)\nGOOGLE_REDIRECT_URI = PersistentConfig(\n    \"GOOGLE_REDIRECT_URI\",\n    \"oauth.google.redirect_uri\",\n    os.environ.get(\"GOOGLE_REDIRECT_URI\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_REDIRECT_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_REDIRECT_URI = PersistentConfig(\n    \"GOOGLE_REDIRECT_URI\",\n    \"oauth.google.redirect_uri\",\n    os.environ.get(\"GOOGLE_REDIRECT_URI\", \"\"),\n)\nMICROSOFT_CLIENT_ID = PersistentConfig(\n    \"MICROSOFT_CLIENT_ID\",\n    \"oauth.microsoft.client_id\",\n    os.environ.get(\"MICROSOFT_CLIENT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_CLIENT_ID = PersistentConfig(\n    \"MICROSOFT_CLIENT_ID\",\n    \"oauth.microsoft.client_id\",\n    os.environ.get(\"MICROSOFT_CLIENT_ID\", \"\"),\n)\nMICROSOFT_CLIENT_SECRET = PersistentConfig(\n    \"MICROSOFT_CLIENT_SECRET\",\n    \"oauth.microsoft.client_secret\",\n    os.environ.get(\"MICROSOFT_CLIENT_SECRET\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_CLIENT_SECRET",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_CLIENT_SECRET = PersistentConfig(\n    \"MICROSOFT_CLIENT_SECRET\",\n    \"oauth.microsoft.client_secret\",\n    os.environ.get(\"MICROSOFT_CLIENT_SECRET\", \"\"),\n)\nMICROSOFT_CLIENT_TENANT_ID = PersistentConfig(\n    \"MICROSOFT_CLIENT_TENANT_ID\",\n    \"oauth.microsoft.tenant_id\",\n    os.environ.get(\"MICROSOFT_CLIENT_TENANT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_CLIENT_TENANT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_CLIENT_TENANT_ID = PersistentConfig(\n    \"MICROSOFT_CLIENT_TENANT_ID\",\n    \"oauth.microsoft.tenant_id\",\n    os.environ.get(\"MICROSOFT_CLIENT_TENANT_ID\", \"\"),\n)\nMICROSOFT_CLIENT_LOGIN_BASE_URL = PersistentConfig(\n    \"MICROSOFT_CLIENT_LOGIN_BASE_URL\",\n    \"oauth.microsoft.login_base_url\",\n    os.environ.get(\n        \"MICROSOFT_CLIENT_LOGIN_BASE_URL\", \"https://login.microsoftonline.com\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_CLIENT_LOGIN_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_CLIENT_LOGIN_BASE_URL = PersistentConfig(\n    \"MICROSOFT_CLIENT_LOGIN_BASE_URL\",\n    \"oauth.microsoft.login_base_url\",\n    os.environ.get(\n        \"MICROSOFT_CLIENT_LOGIN_BASE_URL\", \"https://login.microsoftonline.com\"\n    ),\n)\nMICROSOFT_CLIENT_PICTURE_URL = PersistentConfig(\n    \"MICROSOFT_CLIENT_PICTURE_URL\",\n    \"oauth.microsoft.picture_url\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_CLIENT_PICTURE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_CLIENT_PICTURE_URL = PersistentConfig(\n    \"MICROSOFT_CLIENT_PICTURE_URL\",\n    \"oauth.microsoft.picture_url\",\n    os.environ.get(\n        \"MICROSOFT_CLIENT_PICTURE_URL\",\n        \"https://graph.microsoft.com/v1.0/me/photo/$value\",\n    ),\n)\nMICROSOFT_OAUTH_SCOPE = PersistentConfig(\n    \"MICROSOFT_OAUTH_SCOPE\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_OAUTH_SCOPE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_OAUTH_SCOPE = PersistentConfig(\n    \"MICROSOFT_OAUTH_SCOPE\",\n    \"oauth.microsoft.scope\",\n    os.environ.get(\"MICROSOFT_OAUTH_SCOPE\", \"openid email profile\"),\n)\nMICROSOFT_REDIRECT_URI = PersistentConfig(\n    \"MICROSOFT_REDIRECT_URI\",\n    \"oauth.microsoft.redirect_uri\",\n    os.environ.get(\"MICROSOFT_REDIRECT_URI\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MICROSOFT_REDIRECT_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MICROSOFT_REDIRECT_URI = PersistentConfig(\n    \"MICROSOFT_REDIRECT_URI\",\n    \"oauth.microsoft.redirect_uri\",\n    os.environ.get(\"MICROSOFT_REDIRECT_URI\", \"\"),\n)\nGITHUB_CLIENT_ID = PersistentConfig(\n    \"GITHUB_CLIENT_ID\",\n    \"oauth.github.client_id\",\n    os.environ.get(\"GITHUB_CLIENT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GITHUB_CLIENT_ID = PersistentConfig(\n    \"GITHUB_CLIENT_ID\",\n    \"oauth.github.client_id\",\n    os.environ.get(\"GITHUB_CLIENT_ID\", \"\"),\n)\nGITHUB_CLIENT_SECRET = PersistentConfig(\n    \"GITHUB_CLIENT_SECRET\",\n    \"oauth.github.client_secret\",\n    os.environ.get(\"GITHUB_CLIENT_SECRET\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_SECRET",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GITHUB_CLIENT_SECRET = PersistentConfig(\n    \"GITHUB_CLIENT_SECRET\",\n    \"oauth.github.client_secret\",\n    os.environ.get(\"GITHUB_CLIENT_SECRET\", \"\"),\n)\nGITHUB_CLIENT_SCOPE = PersistentConfig(\n    \"GITHUB_CLIENT_SCOPE\",\n    \"oauth.github.scope\",\n    os.environ.get(\"GITHUB_CLIENT_SCOPE\", \"user:email\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_SCOPE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GITHUB_CLIENT_SCOPE = PersistentConfig(\n    \"GITHUB_CLIENT_SCOPE\",\n    \"oauth.github.scope\",\n    os.environ.get(\"GITHUB_CLIENT_SCOPE\", \"user:email\"),\n)\nGITHUB_CLIENT_REDIRECT_URI = PersistentConfig(\n    \"GITHUB_CLIENT_REDIRECT_URI\",\n    \"oauth.github.redirect_uri\",\n    os.environ.get(\"GITHUB_CLIENT_REDIRECT_URI\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_REDIRECT_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GITHUB_CLIENT_REDIRECT_URI = PersistentConfig(\n    \"GITHUB_CLIENT_REDIRECT_URI\",\n    \"oauth.github.redirect_uri\",\n    os.environ.get(\"GITHUB_CLIENT_REDIRECT_URI\", \"\"),\n)\nOAUTH_CLIENT_ID = PersistentConfig(\n    \"OAUTH_CLIENT_ID\",\n    \"oauth.oidc.client_id\",\n    os.environ.get(\"OAUTH_CLIENT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_CLIENT_ID = PersistentConfig(\n    \"OAUTH_CLIENT_ID\",\n    \"oauth.oidc.client_id\",\n    os.environ.get(\"OAUTH_CLIENT_ID\", \"\"),\n)\nOAUTH_CLIENT_SECRET = PersistentConfig(\n    \"OAUTH_CLIENT_SECRET\",\n    \"oauth.oidc.client_secret\",\n    os.environ.get(\"OAUTH_CLIENT_SECRET\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_CLIENT_SECRET",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_CLIENT_SECRET = PersistentConfig(\n    \"OAUTH_CLIENT_SECRET\",\n    \"oauth.oidc.client_secret\",\n    os.environ.get(\"OAUTH_CLIENT_SECRET\", \"\"),\n)\nOPENID_PROVIDER_URL = PersistentConfig(\n    \"OPENID_PROVIDER_URL\",\n    \"oauth.oidc.provider_url\",\n    os.environ.get(\"OPENID_PROVIDER_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENID_PROVIDER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENID_PROVIDER_URL = PersistentConfig(\n    \"OPENID_PROVIDER_URL\",\n    \"oauth.oidc.provider_url\",\n    os.environ.get(\"OPENID_PROVIDER_URL\", \"\"),\n)\nOPENID_REDIRECT_URI = PersistentConfig(\n    \"OPENID_REDIRECT_URI\",\n    \"oauth.oidc.redirect_uri\",\n    os.environ.get(\"OPENID_REDIRECT_URI\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENID_REDIRECT_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENID_REDIRECT_URI = PersistentConfig(\n    \"OPENID_REDIRECT_URI\",\n    \"oauth.oidc.redirect_uri\",\n    os.environ.get(\"OPENID_REDIRECT_URI\", \"\"),\n)\nOAUTH_SCOPES = PersistentConfig(\n    \"OAUTH_SCOPES\",\n    \"oauth.oidc.scopes\",\n    os.environ.get(\"OAUTH_SCOPES\", \"openid email profile\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_SCOPES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_SCOPES = PersistentConfig(\n    \"OAUTH_SCOPES\",\n    \"oauth.oidc.scopes\",\n    os.environ.get(\"OAUTH_SCOPES\", \"openid email profile\"),\n)\nOAUTH_CODE_CHALLENGE_METHOD = PersistentConfig(\n    \"OAUTH_CODE_CHALLENGE_METHOD\",\n    \"oauth.oidc.code_challenge_method\",\n    os.environ.get(\"OAUTH_CODE_CHALLENGE_METHOD\", None),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_CODE_CHALLENGE_METHOD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_CODE_CHALLENGE_METHOD = PersistentConfig(\n    \"OAUTH_CODE_CHALLENGE_METHOD\",\n    \"oauth.oidc.code_challenge_method\",\n    os.environ.get(\"OAUTH_CODE_CHALLENGE_METHOD\", None),\n)\nOAUTH_PROVIDER_NAME = PersistentConfig(\n    \"OAUTH_PROVIDER_NAME\",\n    \"oauth.oidc.provider_name\",\n    os.environ.get(\"OAUTH_PROVIDER_NAME\", \"SSO\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_PROVIDER_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_PROVIDER_NAME = PersistentConfig(\n    \"OAUTH_PROVIDER_NAME\",\n    \"oauth.oidc.provider_name\",\n    os.environ.get(\"OAUTH_PROVIDER_NAME\", \"SSO\"),\n)\nOAUTH_USERNAME_CLAIM = PersistentConfig(\n    \"OAUTH_USERNAME_CLAIM\",\n    \"oauth.oidc.username_claim\",\n    os.environ.get(\"OAUTH_USERNAME_CLAIM\", \"name\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_USERNAME_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_USERNAME_CLAIM = PersistentConfig(\n    \"OAUTH_USERNAME_CLAIM\",\n    \"oauth.oidc.username_claim\",\n    os.environ.get(\"OAUTH_USERNAME_CLAIM\", \"name\"),\n)\nOAUTH_PICTURE_CLAIM = PersistentConfig(\n    \"OAUTH_PICTURE_CLAIM\",\n    \"oauth.oidc.avatar_claim\",\n    os.environ.get(\"OAUTH_PICTURE_CLAIM\", \"picture\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_PICTURE_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_PICTURE_CLAIM = PersistentConfig(\n    \"OAUTH_PICTURE_CLAIM\",\n    \"oauth.oidc.avatar_claim\",\n    os.environ.get(\"OAUTH_PICTURE_CLAIM\", \"picture\"),\n)\nOAUTH_EMAIL_CLAIM = PersistentConfig(\n    \"OAUTH_EMAIL_CLAIM\",\n    \"oauth.oidc.email_claim\",\n    os.environ.get(\"OAUTH_EMAIL_CLAIM\", \"email\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_EMAIL_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_EMAIL_CLAIM = PersistentConfig(\n    \"OAUTH_EMAIL_CLAIM\",\n    \"oauth.oidc.email_claim\",\n    os.environ.get(\"OAUTH_EMAIL_CLAIM\", \"email\"),\n)\nOAUTH_GROUPS_CLAIM = PersistentConfig(\n    \"OAUTH_GROUPS_CLAIM\",\n    \"oauth.oidc.group_claim\",\n    os.environ.get(\"OAUTH_GROUP_CLAIM\", \"groups\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_GROUPS_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_GROUPS_CLAIM = PersistentConfig(\n    \"OAUTH_GROUPS_CLAIM\",\n    \"oauth.oidc.group_claim\",\n    os.environ.get(\"OAUTH_GROUP_CLAIM\", \"groups\"),\n)\nENABLE_OAUTH_ROLE_MANAGEMENT = PersistentConfig(\n    \"ENABLE_OAUTH_ROLE_MANAGEMENT\",\n    \"oauth.enable_role_mapping\",\n    os.environ.get(\"ENABLE_OAUTH_ROLE_MANAGEMENT\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_ROLE_MANAGEMENT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OAUTH_ROLE_MANAGEMENT = PersistentConfig(\n    \"ENABLE_OAUTH_ROLE_MANAGEMENT\",\n    \"oauth.enable_role_mapping\",\n    os.environ.get(\"ENABLE_OAUTH_ROLE_MANAGEMENT\", \"False\").lower() == \"true\",\n)\nENABLE_OAUTH_GROUP_MANAGEMENT = PersistentConfig(\n    \"ENABLE_OAUTH_GROUP_MANAGEMENT\",\n    \"oauth.enable_group_mapping\",\n    os.environ.get(\"ENABLE_OAUTH_GROUP_MANAGEMENT\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_GROUP_MANAGEMENT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OAUTH_GROUP_MANAGEMENT = PersistentConfig(\n    \"ENABLE_OAUTH_GROUP_MANAGEMENT\",\n    \"oauth.enable_group_mapping\",\n    os.environ.get(\"ENABLE_OAUTH_GROUP_MANAGEMENT\", \"False\").lower() == \"true\",\n)\nENABLE_OAUTH_GROUP_CREATION = PersistentConfig(\n    \"ENABLE_OAUTH_GROUP_CREATION\",\n    \"oauth.enable_group_creation\",\n    os.environ.get(\"ENABLE_OAUTH_GROUP_CREATION\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OAUTH_GROUP_CREATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OAUTH_GROUP_CREATION = PersistentConfig(\n    \"ENABLE_OAUTH_GROUP_CREATION\",\n    \"oauth.enable_group_creation\",\n    os.environ.get(\"ENABLE_OAUTH_GROUP_CREATION\", \"False\").lower() == \"true\",\n)\nOAUTH_BLOCKED_GROUPS = PersistentConfig(\n    \"OAUTH_BLOCKED_GROUPS\",\n    \"oauth.blocked_groups\",\n    os.environ.get(\"OAUTH_BLOCKED_GROUPS\", \"[]\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_BLOCKED_GROUPS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_BLOCKED_GROUPS = PersistentConfig(\n    \"OAUTH_BLOCKED_GROUPS\",\n    \"oauth.blocked_groups\",\n    os.environ.get(\"OAUTH_BLOCKED_GROUPS\", \"[]\"),\n)\nOAUTH_ROLES_CLAIM = PersistentConfig(\n    \"OAUTH_ROLES_CLAIM\",\n    \"oauth.roles_claim\",\n    os.environ.get(\"OAUTH_ROLES_CLAIM\", \"roles\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ROLES_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_ROLES_CLAIM = PersistentConfig(\n    \"OAUTH_ROLES_CLAIM\",\n    \"oauth.roles_claim\",\n    os.environ.get(\"OAUTH_ROLES_CLAIM\", \"roles\"),\n)\nOAUTH_ALLOWED_ROLES = PersistentConfig(\n    \"OAUTH_ALLOWED_ROLES\",\n    \"oauth.allowed_roles\",\n    [\n        role.strip()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ALLOWED_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_ALLOWED_ROLES = PersistentConfig(\n    \"OAUTH_ALLOWED_ROLES\",\n    \"oauth.allowed_roles\",\n    [\n        role.strip()\n        for role in os.environ.get(\"OAUTH_ALLOWED_ROLES\", \"user,admin\").split(\",\")\n    ],\n)\nOAUTH_ADMIN_ROLES = PersistentConfig(\n    \"OAUTH_ADMIN_ROLES\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ADMIN_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_ADMIN_ROLES = PersistentConfig(\n    \"OAUTH_ADMIN_ROLES\",\n    \"oauth.admin_roles\",\n    [role.strip() for role in os.environ.get(\"OAUTH_ADMIN_ROLES\", \"admin\").split(\",\")],\n)\nOAUTH_ALLOWED_DOMAINS = PersistentConfig(\n    \"OAUTH_ALLOWED_DOMAINS\",\n    \"oauth.allowed_domains\",\n    [\n        domain.strip()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_ALLOWED_DOMAINS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_ALLOWED_DOMAINS = PersistentConfig(\n    \"OAUTH_ALLOWED_DOMAINS\",\n    \"oauth.allowed_domains\",\n    [\n        domain.strip()\n        for domain in os.environ.get(\"OAUTH_ALLOWED_DOMAINS\", \"*\").split(\",\")\n    ],\n)\nOAUTH_UPDATE_PICTURE_ON_LOGIN = PersistentConfig(\n    \"OAUTH_UPDATE_PICTURE_ON_LOGIN\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OAUTH_UPDATE_PICTURE_ON_LOGIN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OAUTH_UPDATE_PICTURE_ON_LOGIN = PersistentConfig(\n    \"OAUTH_UPDATE_PICTURE_ON_LOGIN\",\n    \"oauth.update_picture_on_login\",\n    os.environ.get(\"OAUTH_UPDATE_PICTURE_ON_LOGIN\", \"False\").lower() == \"true\",\n)\ndef load_oauth_providers():\n    OAUTH_PROVIDERS.clear()\n    if GOOGLE_CLIENT_ID.value and GOOGLE_CLIENT_SECRET.value:\n        def google_oauth_register(client):\n            client.register(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "STATIC_DIR = Path(os.getenv(\"STATIC_DIR\", OPEN_WEBUI_DIR / \"static\")).resolve()\nfor file_path in (FRONTEND_BUILD_DIR / \"static\").glob(\"**/*\"):\n    if file_path.is_file():\n        target_path = STATIC_DIR / file_path.relative_to(\n            (FRONTEND_BUILD_DIR / \"static\")\n        )\n        target_path.parent.mkdir(parents=True, exist_ok=True)\n        try:\n            shutil.copyfile(file_path, target_path)\n        except Exception as e:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "frontend_favicon",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "frontend_favicon = FRONTEND_BUILD_DIR / \"static\" / \"favicon.png\"\nif frontend_favicon.exists():\n    try:\n        shutil.copyfile(frontend_favicon, STATIC_DIR / \"favicon.png\")\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\nfrontend_splash = FRONTEND_BUILD_DIR / \"static\" / \"splash.png\"\nif frontend_splash.exists():\n    try:\n        shutil.copyfile(frontend_splash, STATIC_DIR / \"splash.png\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "frontend_splash",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "frontend_splash = FRONTEND_BUILD_DIR / \"static\" / \"splash.png\"\nif frontend_splash.exists():\n    try:\n        shutil.copyfile(frontend_splash, STATIC_DIR / \"splash.png\")\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\nfrontend_loader = FRONTEND_BUILD_DIR / \"static\" / \"loader.js\"\nif frontend_loader.exists():\n    try:\n        shutil.copyfile(frontend_loader, STATIC_DIR / \"loader.js\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "frontend_loader",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "frontend_loader = FRONTEND_BUILD_DIR / \"static\" / \"loader.js\"\nif frontend_loader.exists():\n    try:\n        shutil.copyfile(frontend_loader, STATIC_DIR / \"loader.js\")\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\n####################################\n# CUSTOM_NAME (Legacy)\n####################################\nCUSTOM_NAME = os.environ.get(\"CUSTOM_NAME\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CUSTOM_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CUSTOM_NAME = os.environ.get(\"CUSTOM_NAME\", \"\")\nif CUSTOM_NAME:\n    try:\n        r = requests.get(f\"https://api.openwebui.com/api/v1/custom/{CUSTOM_NAME}\")\n        data = r.json()\n        if r.ok:\n            if \"logo\" in data:\n                WEBUI_FAVICON_URL = url = (\n                    f\"https://api.openwebui.com{data['logo']}\"\n                    if data[\"logo\"][0] == \"/\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LICENSE_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LICENSE_KEY = os.environ.get(\"LICENSE_KEY\", \"\")\n####################################\n# STORAGE PROVIDER\n####################################\nSTORAGE_PROVIDER = os.environ.get(\"STORAGE_PROVIDER\", \"local\")  # defaults to local, s3\nS3_ACCESS_KEY_ID = os.environ.get(\"S3_ACCESS_KEY_ID\", None)\nS3_SECRET_ACCESS_KEY = os.environ.get(\"S3_SECRET_ACCESS_KEY\", None)\nS3_REGION_NAME = os.environ.get(\"S3_REGION_NAME\", None)\nS3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "STORAGE_PROVIDER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "STORAGE_PROVIDER = os.environ.get(\"STORAGE_PROVIDER\", \"local\")  # defaults to local, s3\nS3_ACCESS_KEY_ID = os.environ.get(\"S3_ACCESS_KEY_ID\", None)\nS3_SECRET_ACCESS_KEY = os.environ.get(\"S3_SECRET_ACCESS_KEY\", None)\nS3_REGION_NAME = os.environ.get(\"S3_REGION_NAME\", None)\nS3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_ACCESS_KEY_ID = os.environ.get(\"S3_ACCESS_KEY_ID\", None)\nS3_SECRET_ACCESS_KEY = os.environ.get(\"S3_SECRET_ACCESS_KEY\", None)\nS3_REGION_NAME = os.environ.get(\"S3_REGION_NAME\", None)\nS3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_SECRET_ACCESS_KEY = os.environ.get(\"S3_SECRET_ACCESS_KEY\", None)\nS3_REGION_NAME = os.environ.get(\"S3_REGION_NAME\", None)\nS3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_REGION_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_REGION_NAME = os.environ.get(\"S3_REGION_NAME\", None)\nS3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_BUCKET_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_BUCKET_NAME = os.environ.get(\"S3_BUCKET_NAME\", None)\nS3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_KEY_PREFIX",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_KEY_PREFIX = os.environ.get(\"S3_KEY_PREFIX\", None)\nS3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ENDPOINT_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_ENDPOINT_URL = os.environ.get(\"S3_ENDPOINT_URL\", None)\nS3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_USE_ACCELERATE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_USE_ACCELERATE_ENDPOINT = (\n    os.environ.get(\"S3_USE_ACCELERATE_ENDPOINT\", \"false\").lower() == \"true\"\n)\nS3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)\nAZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ADDRESSING_STYLE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_ADDRESSING_STYLE = os.environ.get(\"S3_ADDRESSING_STYLE\", None)\nS3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)\nAZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)\nAZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "S3_ENABLE_TAGGING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "S3_ENABLE_TAGGING = os.getenv(\"S3_ENABLE_TAGGING\", \"false\").lower() == \"true\"\nGCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)\nAZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)\nAZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GCS_BUCKET_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GCS_BUCKET_NAME = os.environ.get(\"GCS_BUCKET_NAME\", None)\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)\nAZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)\nAZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_APPLICATION_CREDENTIALS_JSON",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_APPLICATION_CREDENTIALS_JSON = os.environ.get(\n    \"GOOGLE_APPLICATION_CREDENTIALS_JSON\", None\n)\nAZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)\nAZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR\n####################################\nUPLOAD_DIR = DATA_DIR / \"uploads\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AZURE_STORAGE_ENDPOINT = os.environ.get(\"AZURE_STORAGE_ENDPOINT\", None)\nAZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR\n####################################\nUPLOAD_DIR = DATA_DIR / \"uploads\"\nUPLOAD_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# Cache DIR",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_CONTAINER_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AZURE_STORAGE_CONTAINER_NAME = os.environ.get(\"AZURE_STORAGE_CONTAINER_NAME\", None)\nAZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR\n####################################\nUPLOAD_DIR = DATA_DIR / \"uploads\"\nUPLOAD_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# Cache DIR\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AZURE_STORAGE_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AZURE_STORAGE_KEY = os.environ.get(\"AZURE_STORAGE_KEY\", None)\n####################################\n# File Upload DIR\n####################################\nUPLOAD_DIR = DATA_DIR / \"uploads\"\nUPLOAD_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# Cache DIR\n####################################\nCACHE_DIR = DATA_DIR / \"cache\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "UPLOAD_DIR = DATA_DIR / \"uploads\"\nUPLOAD_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# Cache DIR\n####################################\nCACHE_DIR = DATA_DIR / \"cache\"\nCACHE_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# DIRECT CONNECTIONS\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CACHE_DIR = DATA_DIR / \"cache\"\nCACHE_DIR.mkdir(parents=True, exist_ok=True)\n####################################\n# DIRECT CONNECTIONS\n####################################\nENABLE_DIRECT_CONNECTIONS = PersistentConfig(\n    \"ENABLE_DIRECT_CONNECTIONS\",\n    \"direct.enable\",\n    os.environ.get(\"ENABLE_DIRECT_CONNECTIONS\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_DIRECT_CONNECTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_DIRECT_CONNECTIONS = PersistentConfig(\n    \"ENABLE_DIRECT_CONNECTIONS\",\n    \"direct.enable\",\n    os.environ.get(\"ENABLE_DIRECT_CONNECTIONS\", \"True\").lower() == \"true\",\n)\n####################################\n# OLLAMA_BASE_URL\n####################################\nENABLE_OLLAMA_API = PersistentConfig(\n    \"ENABLE_OLLAMA_API\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OLLAMA_API",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OLLAMA_API = PersistentConfig(\n    \"ENABLE_OLLAMA_API\",\n    \"ollama.enable\",\n    os.environ.get(\"ENABLE_OLLAMA_API\", \"True\").lower() == \"true\",\n)\nOLLAMA_API_BASE_URL = os.environ.get(\n    \"OLLAMA_API_BASE_URL\", \"http://localhost:11434/api\"\n)\nOLLAMA_BASE_URL = os.environ.get(\"OLLAMA_BASE_URL\", \"\")\nif OLLAMA_BASE_URL:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_API_BASE_URL = os.environ.get(\n    \"OLLAMA_API_BASE_URL\", \"http://localhost:11434/api\"\n)\nOLLAMA_BASE_URL = os.environ.get(\"OLLAMA_BASE_URL\", \"\")\nif OLLAMA_BASE_URL:\n    # Remove trailing slash\n    OLLAMA_BASE_URL = (\n        OLLAMA_BASE_URL[:-1] if OLLAMA_BASE_URL.endswith(\"/\") else OLLAMA_BASE_URL\n    )\nK8S_FLAG = os.environ.get(\"K8S_FLAG\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_BASE_URL = os.environ.get(\"OLLAMA_BASE_URL\", \"\")\nif OLLAMA_BASE_URL:\n    # Remove trailing slash\n    OLLAMA_BASE_URL = (\n        OLLAMA_BASE_URL[:-1] if OLLAMA_BASE_URL.endswith(\"/\") else OLLAMA_BASE_URL\n    )\nK8S_FLAG = os.environ.get(\"K8S_FLAG\", \"\")\nUSE_OLLAMA_DOCKER = os.environ.get(\"USE_OLLAMA_DOCKER\", \"false\")\nif OLLAMA_BASE_URL == \"\" and OLLAMA_API_BASE_URL != \"\":\n    OLLAMA_BASE_URL = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "K8S_FLAG",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "K8S_FLAG = os.environ.get(\"K8S_FLAG\", \"\")\nUSE_OLLAMA_DOCKER = os.environ.get(\"USE_OLLAMA_DOCKER\", \"false\")\nif OLLAMA_BASE_URL == \"\" and OLLAMA_API_BASE_URL != \"\":\n    OLLAMA_BASE_URL = (\n        OLLAMA_API_BASE_URL[:-4]\n        if OLLAMA_API_BASE_URL.endswith(\"/api\")\n        else OLLAMA_API_BASE_URL\n    )\nif ENV == \"prod\":\n    if OLLAMA_BASE_URL == \"/ollama\" and not K8S_FLAG:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USE_OLLAMA_DOCKER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USE_OLLAMA_DOCKER = os.environ.get(\"USE_OLLAMA_DOCKER\", \"false\")\nif OLLAMA_BASE_URL == \"\" and OLLAMA_API_BASE_URL != \"\":\n    OLLAMA_BASE_URL = (\n        OLLAMA_API_BASE_URL[:-4]\n        if OLLAMA_API_BASE_URL.endswith(\"/api\")\n        else OLLAMA_API_BASE_URL\n    )\nif ENV == \"prod\":\n    if OLLAMA_BASE_URL == \"/ollama\" and not K8S_FLAG:\n        if USE_OLLAMA_DOCKER.lower() == \"true\":",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_BASE_URLS = os.environ.get(\"OLLAMA_BASE_URLS\", \"\")\nOLLAMA_BASE_URLS = OLLAMA_BASE_URLS if OLLAMA_BASE_URLS != \"\" else OLLAMA_BASE_URL\nOLLAMA_BASE_URLS = [url.strip() for url in OLLAMA_BASE_URLS.split(\";\")]\nOLLAMA_BASE_URLS = PersistentConfig(\n    \"OLLAMA_BASE_URLS\", \"ollama.base_urls\", OLLAMA_BASE_URLS\n)\nOLLAMA_API_CONFIGS = PersistentConfig(\n    \"OLLAMA_API_CONFIGS\",\n    \"ollama.api_configs\",\n    {},",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_BASE_URLS = OLLAMA_BASE_URLS if OLLAMA_BASE_URLS != \"\" else OLLAMA_BASE_URL\nOLLAMA_BASE_URLS = [url.strip() for url in OLLAMA_BASE_URLS.split(\";\")]\nOLLAMA_BASE_URLS = PersistentConfig(\n    \"OLLAMA_BASE_URLS\", \"ollama.base_urls\", OLLAMA_BASE_URLS\n)\nOLLAMA_API_CONFIGS = PersistentConfig(\n    \"OLLAMA_API_CONFIGS\",\n    \"ollama.api_configs\",\n    {},\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_BASE_URLS = [url.strip() for url in OLLAMA_BASE_URLS.split(\";\")]\nOLLAMA_BASE_URLS = PersistentConfig(\n    \"OLLAMA_BASE_URLS\", \"ollama.base_urls\", OLLAMA_BASE_URLS\n)\nOLLAMA_API_CONFIGS = PersistentConfig(\n    \"OLLAMA_API_CONFIGS\",\n    \"ollama.api_configs\",\n    {},\n)\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_BASE_URLS = PersistentConfig(\n    \"OLLAMA_BASE_URLS\", \"ollama.base_urls\", OLLAMA_BASE_URLS\n)\nOLLAMA_API_CONFIGS = PersistentConfig(\n    \"OLLAMA_API_CONFIGS\",\n    \"ollama.api_configs\",\n    {},\n)\n####################################\n# OPENAI_API",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OLLAMA_API_CONFIGS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OLLAMA_API_CONFIGS = PersistentConfig(\n    \"OLLAMA_API_CONFIGS\",\n    \"ollama.api_configs\",\n    {},\n)\n####################################\n# OPENAI_API\n####################################\nENABLE_OPENAI_API = PersistentConfig(\n    \"ENABLE_OPENAI_API\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_OPENAI_API",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_OPENAI_API = PersistentConfig(\n    \"ENABLE_OPENAI_API\",\n    \"openai.enable\",\n    os.environ.get(\"ENABLE_OPENAI_API\", \"True\").lower() == \"true\",\n)\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\", \"\")\nOPENAI_API_BASE_URL = os.environ.get(\"OPENAI_API_BASE_URL\", \"\")\nGEMINI_API_KEY = os.environ.get(\"GEMINI_API_KEY\", \"\")\nGEMINI_API_BASE_URL = os.environ.get(\"GEMINI_API_BASE_URL\", \"\")\nif OPENAI_API_BASE_URL == \"\":",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\", \"\")\nOPENAI_API_BASE_URL = os.environ.get(\"OPENAI_API_BASE_URL\", \"\")\nGEMINI_API_KEY = os.environ.get(\"GEMINI_API_KEY\", \"\")\nGEMINI_API_BASE_URL = os.environ.get(\"GEMINI_API_BASE_URL\", \"\")\nif OPENAI_API_BASE_URL == \"\":\n    OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\nOPENAI_API_KEYS = os.environ.get(\"OPENAI_API_KEYS\", \"\")\nOPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URL = os.environ.get(\"OPENAI_API_BASE_URL\", \"\")\nGEMINI_API_KEY = os.environ.get(\"GEMINI_API_KEY\", \"\")\nGEMINI_API_BASE_URL = os.environ.get(\"GEMINI_API_BASE_URL\", \"\")\nif OPENAI_API_BASE_URL == \"\":\n    OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\nOPENAI_API_KEYS = os.environ.get(\"OPENAI_API_KEYS\", \"\")\nOPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GEMINI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GEMINI_API_KEY = os.environ.get(\"GEMINI_API_KEY\", \"\")\nGEMINI_API_BASE_URL = os.environ.get(\"GEMINI_API_BASE_URL\", \"\")\nif OPENAI_API_BASE_URL == \"\":\n    OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\nOPENAI_API_KEYS = os.environ.get(\"OPENAI_API_KEYS\", \"\")\nOPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GEMINI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GEMINI_API_BASE_URL = os.environ.get(\"GEMINI_API_BASE_URL\", \"\")\nif OPENAI_API_BASE_URL == \"\":\n    OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\nOPENAI_API_KEYS = os.environ.get(\"OPENAI_API_KEYS\", \"\")\nOPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)\nOPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEYS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEYS = os.environ.get(\"OPENAI_API_KEYS\", \"\")\nOPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)\nOPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")\nOPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEYS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEYS = OPENAI_API_KEYS if OPENAI_API_KEYS != \"\" else OPENAI_API_KEY\nOPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)\nOPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")\nOPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)\nOPENAI_API_BASE_URLS = [",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEYS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEYS = [url.strip() for url in OPENAI_API_KEYS.split(\";\")]\nOPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)\nOPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")\nOPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)\nOPENAI_API_BASE_URLS = [\n    url.strip() if url != \"\" else \"https://api.openai.com/v1\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEYS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEYS = PersistentConfig(\n    \"OPENAI_API_KEYS\", \"openai.api_keys\", OPENAI_API_KEYS\n)\nOPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")\nOPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)\nOPENAI_API_BASE_URLS = [\n    url.strip() if url != \"\" else \"https://api.openai.com/v1\"\n    for url in OPENAI_API_BASE_URLS.split(\";\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URLS = os.environ.get(\"OPENAI_API_BASE_URLS\", \"\")\nOPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)\nOPENAI_API_BASE_URLS = [\n    url.strip() if url != \"\" else \"https://api.openai.com/v1\"\n    for url in OPENAI_API_BASE_URLS.split(\";\")\n]\nOPENAI_API_BASE_URLS = PersistentConfig(\n    \"OPENAI_API_BASE_URLS\", \"openai.api_base_urls\", OPENAI_API_BASE_URLS",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URLS = (\n    OPENAI_API_BASE_URLS if OPENAI_API_BASE_URLS != \"\" else OPENAI_API_BASE_URL\n)\nOPENAI_API_BASE_URLS = [\n    url.strip() if url != \"\" else \"https://api.openai.com/v1\"\n    for url in OPENAI_API_BASE_URLS.split(\";\")\n]\nOPENAI_API_BASE_URLS = PersistentConfig(\n    \"OPENAI_API_BASE_URLS\", \"openai.api_base_urls\", OPENAI_API_BASE_URLS\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URLS = [\n    url.strip() if url != \"\" else \"https://api.openai.com/v1\"\n    for url in OPENAI_API_BASE_URLS.split(\";\")\n]\nOPENAI_API_BASE_URLS = PersistentConfig(\n    \"OPENAI_API_BASE_URLS\", \"openai.api_base_urls\", OPENAI_API_BASE_URLS\n)\nOPENAI_API_CONFIGS = PersistentConfig(\n    \"OPENAI_API_CONFIGS\",\n    \"openai.api_configs\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URLS = PersistentConfig(\n    \"OPENAI_API_BASE_URLS\", \"openai.api_base_urls\", OPENAI_API_BASE_URLS\n)\nOPENAI_API_CONFIGS = PersistentConfig(\n    \"OPENAI_API_CONFIGS\",\n    \"openai.api_configs\",\n    {},\n)\n# Get the actual OpenAI API key based on the base URL\nOPENAI_API_KEY = \"\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_CONFIGS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_CONFIGS = PersistentConfig(\n    \"OPENAI_API_CONFIGS\",\n    \"openai.api_configs\",\n    {},\n)\n# Get the actual OpenAI API key based on the base URL\nOPENAI_API_KEY = \"\"\ntry:\n    OPENAI_API_KEY = OPENAI_API_KEYS.value[\n        OPENAI_API_BASE_URLS.value.index(\"https://api.openai.com/v1\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_KEY = \"\"\ntry:\n    OPENAI_API_KEY = OPENAI_API_KEYS.value[\n        OPENAI_API_BASE_URLS.value.index(\"https://api.openai.com/v1\")\n    ]\nexcept Exception:\n    pass\nOPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\n####################################\n# TOOL_SERVERS",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"\n####################################\n# TOOL_SERVERS\n####################################\ntry:\n    tool_server_connections = json.loads(\n        os.environ.get(\"TOOL_SERVER_CONNECTIONS\", \"[]\")\n    )\nexcept Exception as e:\n    log.exception(f\"Error loading TOOL_SERVER_CONNECTIONS: {e}\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TOOL_SERVER_CONNECTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TOOL_SERVER_CONNECTIONS = PersistentConfig(\n    \"TOOL_SERVER_CONNECTIONS\",\n    \"tool_server.connections\",\n    tool_server_connections,\n)\n####################################\n# WEBUI\n####################################\nWEBUI_URL = PersistentConfig(\"WEBUI_URL\", \"webui.url\", os.environ.get(\"WEBUI_URL\", \"\"))\nENABLE_SIGNUP = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEBUI_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEBUI_URL = PersistentConfig(\"WEBUI_URL\", \"webui.url\", os.environ.get(\"WEBUI_URL\", \"\"))\nENABLE_SIGNUP = PersistentConfig(\n    \"ENABLE_SIGNUP\",\n    \"ui.enable_signup\",\n    (\n        False\n        if not WEBUI_AUTH\n        else os.environ.get(\"ENABLE_SIGNUP\", \"True\").lower() == \"true\"\n    ),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_SIGNUP",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_SIGNUP = PersistentConfig(\n    \"ENABLE_SIGNUP\",\n    \"ui.enable_signup\",\n    (\n        False\n        if not WEBUI_AUTH\n        else os.environ.get(\"ENABLE_SIGNUP\", \"True\").lower() == \"true\"\n    ),\n)\nENABLE_LOGIN_FORM = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_LOGIN_FORM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_LOGIN_FORM = PersistentConfig(\n    \"ENABLE_LOGIN_FORM\",\n    \"ui.ENABLE_LOGIN_FORM\",\n    os.environ.get(\"ENABLE_LOGIN_FORM\", \"True\").lower() == \"true\",\n)\nDEFAULT_LOCALE = PersistentConfig(\n    \"DEFAULT_LOCALE\",\n    \"ui.default_locale\",\n    os.environ.get(\"DEFAULT_LOCALE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOCALE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_LOCALE = PersistentConfig(\n    \"DEFAULT_LOCALE\",\n    \"ui.default_locale\",\n    os.environ.get(\"DEFAULT_LOCALE\", \"\"),\n)\nDEFAULT_MODELS = PersistentConfig(\n    \"DEFAULT_MODELS\", \"ui.default_models\", os.environ.get(\"DEFAULT_MODELS\", None)\n)\ntry:\n    default_prompt_suggestions = json.loads(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_MODELS = PersistentConfig(\n    \"DEFAULT_MODELS\", \"ui.default_models\", os.environ.get(\"DEFAULT_MODELS\", None)\n)\ntry:\n    default_prompt_suggestions = json.loads(\n        os.environ.get(\"DEFAULT_PROMPT_SUGGESTIONS\", \"[]\")\n    )\nexcept Exception as e:\n    log.exception(f\"Error loading DEFAULT_PROMPT_SUGGESTIONS: {e}\")\n    default_prompt_suggestions = []",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PROMPT_SUGGESTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_PROMPT_SUGGESTIONS = PersistentConfig(\n    \"DEFAULT_PROMPT_SUGGESTIONS\",\n    \"ui.prompt_suggestions\",\n    default_prompt_suggestions,\n)\nMODEL_ORDER_LIST = PersistentConfig(\n    \"MODEL_ORDER_LIST\",\n    \"ui.model_order_list\",\n    [],\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MODEL_ORDER_LIST",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MODEL_ORDER_LIST = PersistentConfig(\n    \"MODEL_ORDER_LIST\",\n    \"ui.model_order_list\",\n    [],\n)\nDEFAULT_USER_ROLE = PersistentConfig(\n    \"DEFAULT_USER_ROLE\",\n    \"ui.default_user_role\",\n    os.getenv(\"DEFAULT_USER_ROLE\", \"pending\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_ROLE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_USER_ROLE = PersistentConfig(\n    \"DEFAULT_USER_ROLE\",\n    \"ui.default_user_role\",\n    os.getenv(\"DEFAULT_USER_ROLE\", \"pending\"),\n)\nPENDING_USER_OVERLAY_TITLE = PersistentConfig(\n    \"PENDING_USER_OVERLAY_TITLE\",\n    \"ui.pending_user_overlay_title\",\n    os.environ.get(\"PENDING_USER_OVERLAY_TITLE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PENDING_USER_OVERLAY_TITLE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PENDING_USER_OVERLAY_TITLE = PersistentConfig(\n    \"PENDING_USER_OVERLAY_TITLE\",\n    \"ui.pending_user_overlay_title\",\n    os.environ.get(\"PENDING_USER_OVERLAY_TITLE\", \"\"),\n)\nPENDING_USER_OVERLAY_CONTENT = PersistentConfig(\n    \"PENDING_USER_OVERLAY_CONTENT\",\n    \"ui.pending_user_overlay_content\",\n    os.environ.get(\"PENDING_USER_OVERLAY_CONTENT\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PENDING_USER_OVERLAY_CONTENT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PENDING_USER_OVERLAY_CONTENT = PersistentConfig(\n    \"PENDING_USER_OVERLAY_CONTENT\",\n    \"ui.pending_user_overlay_content\",\n    os.environ.get(\"PENDING_USER_OVERLAY_CONTENT\", \"\"),\n)\nRESPONSE_WATERMARK = PersistentConfig(\n    \"RESPONSE_WATERMARK\",\n    \"ui.watermark\",\n    os.environ.get(\"RESPONSE_WATERMARK\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RESPONSE_WATERMARK",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RESPONSE_WATERMARK = PersistentConfig(\n    \"RESPONSE_WATERMARK\",\n    \"ui.watermark\",\n    os.environ.get(\"RESPONSE_WATERMARK\", \"\"),\n)\nUSER_PERMISSIONS_WORKSPACE_MODELS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS\", \"False\").lower()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS\", \"False\").lower() == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING\", \"False\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS = (\n    os.environ.get(\"USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS\", \"False\").lower() == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING = (\n    os.environ.get(\n        \"USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING\", \"False\"\n    ).lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_CHAT_CONTROLS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_CONTROLS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_FILE_UPLOAD = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_CONTROLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_CONTROLS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_CONTROLS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_FILE_UPLOAD = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_FILE_UPLOAD\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_DELETE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_DELETE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EDIT = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_FILE_UPLOAD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_FILE_UPLOAD = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_FILE_UPLOAD\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_DELETE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_DELETE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EDIT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EDIT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_SHARE = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_DELETE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_DELETE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_DELETE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EDIT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EDIT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_SHARE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_SHARE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EXPORT = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_EDIT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_EDIT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EDIT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_SHARE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_SHARE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EXPORT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EXPORT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_STT = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_SHARE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_SHARE = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_SHARE\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_EXPORT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EXPORT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_STT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_STT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TTS = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_EXPORT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_EXPORT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_EXPORT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_STT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_STT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TTS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TTS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_CALL = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_STT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_STT = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_STT\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TTS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TTS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_CALL = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_CALL\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_MULTIPLE_MODELS = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_TTS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_TTS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TTS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_CALL = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_CALL\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_MULTIPLE_MODELS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_MULTIPLE_MODELS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_CALL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_CALL = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_CALL\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_MULTIPLE_MODELS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_MULTIPLE_MODELS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_MULTIPLE_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_MULTIPLE_MODELS = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_MULTIPLE_MODELS\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED\", \"False\").lower()\n    == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_TEMPORARY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_TEMPORARY = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS\", \"False\").lower()\n    == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED = (\n    os.environ.get(\"USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_WEB_SEARCH = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_WEB_SEARCH\", \"True\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS\", \"False\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_WEB_SEARCH = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_WEB_SEARCH\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_IMAGE_GENERATION = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_IMAGE_GENERATION\", \"True\").lower()\n    == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_FEATURES_WEB_SEARCH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_FEATURES_WEB_SEARCH = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_WEB_SEARCH\", \"True\").lower() == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_IMAGE_GENERATION = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_IMAGE_GENERATION\", \"True\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_CODE_INTERPRETER = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_CODE_INTERPRETER\", \"True\").lower()\n    == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_FEATURES_IMAGE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_FEATURES_IMAGE_GENERATION = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_IMAGE_GENERATION\", \"True\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_CODE_INTERPRETER = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_CODE_INTERPRETER\", \"True\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_NOTES = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_NOTES\", \"True\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_FEATURES_CODE_INTERPRETER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_FEATURES_CODE_INTERPRETER = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_CODE_INTERPRETER\", \"True\").lower()\n    == \"true\"\n)\nUSER_PERMISSIONS_FEATURES_NOTES = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_NOTES\", \"True\").lower() == \"true\"\n)\nDEFAULT_USER_PERMISSIONS = {\n    \"workspace\": {\n        \"models\": USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS,",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS_FEATURES_NOTES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS_FEATURES_NOTES = (\n    os.environ.get(\"USER_PERMISSIONS_FEATURES_NOTES\", \"True\").lower() == \"true\"\n)\nDEFAULT_USER_PERMISSIONS = {\n    \"workspace\": {\n        \"models\": USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS,\n        \"knowledge\": USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS,\n        \"prompts\": USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS,\n        \"tools\": USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS,\n    },",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_PERMISSIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_USER_PERMISSIONS = {\n    \"workspace\": {\n        \"models\": USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS,\n        \"knowledge\": USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS,\n        \"prompts\": USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS,\n        \"tools\": USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS,\n    },\n    \"sharing\": {\n        \"public_models\": USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING,\n        \"public_knowledge\": USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING,",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "USER_PERMISSIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "USER_PERMISSIONS = PersistentConfig(\n    \"USER_PERMISSIONS\",\n    \"user.permissions\",\n    DEFAULT_USER_PERMISSIONS,\n)\nENABLE_CHANNELS = PersistentConfig(\n    \"ENABLE_CHANNELS\",\n    \"channels.enable\",\n    os.environ.get(\"ENABLE_CHANNELS\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_CHANNELS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_CHANNELS = PersistentConfig(\n    \"ENABLE_CHANNELS\",\n    \"channels.enable\",\n    os.environ.get(\"ENABLE_CHANNELS\", \"False\").lower() == \"true\",\n)\nENABLE_NOTES = PersistentConfig(\n    \"ENABLE_NOTES\",\n    \"notes.enable\",\n    os.environ.get(\"ENABLE_NOTES\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_NOTES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_NOTES = PersistentConfig(\n    \"ENABLE_NOTES\",\n    \"notes.enable\",\n    os.environ.get(\"ENABLE_NOTES\", \"True\").lower() == \"true\",\n)\nENABLE_EVALUATION_ARENA_MODELS = PersistentConfig(\n    \"ENABLE_EVALUATION_ARENA_MODELS\",\n    \"evaluation.arena.enable\",\n    os.environ.get(\"ENABLE_EVALUATION_ARENA_MODELS\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_EVALUATION_ARENA_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_EVALUATION_ARENA_MODELS = PersistentConfig(\n    \"ENABLE_EVALUATION_ARENA_MODELS\",\n    \"evaluation.arena.enable\",\n    os.environ.get(\"ENABLE_EVALUATION_ARENA_MODELS\", \"True\").lower() == \"true\",\n)\nEVALUATION_ARENA_MODELS = PersistentConfig(\n    \"EVALUATION_ARENA_MODELS\",\n    \"evaluation.arena.models\",\n    [],\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EVALUATION_ARENA_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EVALUATION_ARENA_MODELS = PersistentConfig(\n    \"EVALUATION_ARENA_MODELS\",\n    \"evaluation.arena.models\",\n    [],\n)\nDEFAULT_ARENA_MODEL = {\n    \"id\": \"arena-model\",\n    \"name\": \"Arena Model\",\n    \"meta\": {\n        \"profile_image_url\": \"/favicon.png\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ARENA_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_ARENA_MODEL = {\n    \"id\": \"arena-model\",\n    \"name\": \"Arena Model\",\n    \"meta\": {\n        \"profile_image_url\": \"/favicon.png\",\n        \"description\": \"Submit your questions to anonymous AI chatbots and vote on the best response.\",\n        \"model_ids\": None,\n    },\n}\nWEBHOOK_URL = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEBHOOK_URL = PersistentConfig(\n    \"WEBHOOK_URL\", \"webhook_url\", os.environ.get(\"WEBHOOK_URL\", \"\")\n)\nENABLE_ADMIN_EXPORT = os.environ.get(\"ENABLE_ADMIN_EXPORT\", \"True\").lower() == \"true\"\nENABLE_ADMIN_CHAT_ACCESS = (\n    os.environ.get(\"ENABLE_ADMIN_CHAT_ACCESS\", \"True\").lower() == \"true\"\n)\nENABLE_COMMUNITY_SHARING = PersistentConfig(\n    \"ENABLE_COMMUNITY_SHARING\",\n    \"ui.enable_community_sharing\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_EXPORT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_ADMIN_EXPORT = os.environ.get(\"ENABLE_ADMIN_EXPORT\", \"True\").lower() == \"true\"\nENABLE_ADMIN_CHAT_ACCESS = (\n    os.environ.get(\"ENABLE_ADMIN_CHAT_ACCESS\", \"True\").lower() == \"true\"\n)\nENABLE_COMMUNITY_SHARING = PersistentConfig(\n    \"ENABLE_COMMUNITY_SHARING\",\n    \"ui.enable_community_sharing\",\n    os.environ.get(\"ENABLE_COMMUNITY_SHARING\", \"True\").lower() == \"true\",\n)\nENABLE_MESSAGE_RATING = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ADMIN_CHAT_ACCESS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_ADMIN_CHAT_ACCESS = (\n    os.environ.get(\"ENABLE_ADMIN_CHAT_ACCESS\", \"True\").lower() == \"true\"\n)\nENABLE_COMMUNITY_SHARING = PersistentConfig(\n    \"ENABLE_COMMUNITY_SHARING\",\n    \"ui.enable_community_sharing\",\n    os.environ.get(\"ENABLE_COMMUNITY_SHARING\", \"True\").lower() == \"true\",\n)\nENABLE_MESSAGE_RATING = PersistentConfig(\n    \"ENABLE_MESSAGE_RATING\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_COMMUNITY_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_COMMUNITY_SHARING = PersistentConfig(\n    \"ENABLE_COMMUNITY_SHARING\",\n    \"ui.enable_community_sharing\",\n    os.environ.get(\"ENABLE_COMMUNITY_SHARING\", \"True\").lower() == \"true\",\n)\nENABLE_MESSAGE_RATING = PersistentConfig(\n    \"ENABLE_MESSAGE_RATING\",\n    \"ui.enable_message_rating\",\n    os.environ.get(\"ENABLE_MESSAGE_RATING\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_MESSAGE_RATING",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_MESSAGE_RATING = PersistentConfig(\n    \"ENABLE_MESSAGE_RATING\",\n    \"ui.enable_message_rating\",\n    os.environ.get(\"ENABLE_MESSAGE_RATING\", \"True\").lower() == \"true\",\n)\nENABLE_USER_WEBHOOKS = PersistentConfig(\n    \"ENABLE_USER_WEBHOOKS\",\n    \"ui.enable_user_webhooks\",\n    os.environ.get(\"ENABLE_USER_WEBHOOKS\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_USER_WEBHOOKS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_USER_WEBHOOKS = PersistentConfig(\n    \"ENABLE_USER_WEBHOOKS\",\n    \"ui.enable_user_webhooks\",\n    os.environ.get(\"ENABLE_USER_WEBHOOKS\", \"True\").lower() == \"true\",\n)\n# FastAPI / AnyIO settings\nTHREAD_POOL_SIZE = os.getenv(\"THREAD_POOL_SIZE\", None)\nif THREAD_POOL_SIZE is not None and isinstance(THREAD_POOL_SIZE, str):\n    try:\n        THREAD_POOL_SIZE = int(THREAD_POOL_SIZE)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "THREAD_POOL_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "THREAD_POOL_SIZE = os.getenv(\"THREAD_POOL_SIZE\", None)\nif THREAD_POOL_SIZE is not None and isinstance(THREAD_POOL_SIZE, str):\n    try:\n        THREAD_POOL_SIZE = int(THREAD_POOL_SIZE)\n    except ValueError:\n        log.warning(\n            f\"THREAD_POOL_SIZE is not a valid integer: {THREAD_POOL_SIZE}. Defaulting to None.\"\n        )\n        THREAD_POOL_SIZE = None\ndef validate_cors_origin(origin):",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ORIGIN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CORS_ALLOW_ORIGIN = os.environ.get(\"CORS_ALLOW_ORIGIN\", \"*\").split(\";\")\nif CORS_ALLOW_ORIGIN == [\"*\"]:\n    log.warning(\n        \"\\n\\nWARNING: CORS_ALLOW_ORIGIN IS SET TO '*' - NOT RECOMMENDED FOR PRODUCTION DEPLOYMENTS.\\n\"\n    )\nelse:\n    # You have to pick between a single wildcard or a list of origins.\n    # Doing both will result in CORS errors in the browser.\n    for origin in CORS_ALLOW_ORIGIN:\n        validate_cors_origin(origin)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEBUI_BANNERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEBUI_BANNERS = PersistentConfig(\"WEBUI_BANNERS\", \"ui.banners\", banners)\nSHOW_ADMIN_DETAILS = PersistentConfig(\n    \"SHOW_ADMIN_DETAILS\",\n    \"auth.admin.show\",\n    os.environ.get(\"SHOW_ADMIN_DETAILS\", \"true\").lower() == \"true\",\n)\nADMIN_EMAIL = PersistentConfig(\n    \"ADMIN_EMAIL\",\n    \"auth.admin.email\",\n    os.environ.get(\"ADMIN_EMAIL\", None),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SHOW_ADMIN_DETAILS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SHOW_ADMIN_DETAILS = PersistentConfig(\n    \"SHOW_ADMIN_DETAILS\",\n    \"auth.admin.show\",\n    os.environ.get(\"SHOW_ADMIN_DETAILS\", \"true\").lower() == \"true\",\n)\nADMIN_EMAIL = PersistentConfig(\n    \"ADMIN_EMAIL\",\n    \"auth.admin.email\",\n    os.environ.get(\"ADMIN_EMAIL\", None),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ADMIN_EMAIL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ADMIN_EMAIL = PersistentConfig(\n    \"ADMIN_EMAIL\",\n    \"auth.admin.email\",\n    os.environ.get(\"ADMIN_EMAIL\", None),\n)\n####################################\n# TASKS\n####################################\nTASK_MODEL = PersistentConfig(\n    \"TASK_MODEL\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TASK_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TASK_MODEL = PersistentConfig(\n    \"TASK_MODEL\",\n    \"task.model.default\",\n    os.environ.get(\"TASK_MODEL\", \"\"),\n)\nTASK_MODEL_EXTERNAL = PersistentConfig(\n    \"TASK_MODEL_EXTERNAL\",\n    \"task.model.external\",\n    os.environ.get(\"TASK_MODEL_EXTERNAL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TASK_MODEL_EXTERNAL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TASK_MODEL_EXTERNAL = PersistentConfig(\n    \"TASK_MODEL_EXTERNAL\",\n    \"task.model.external\",\n    os.environ.get(\"TASK_MODEL_EXTERNAL\", \"\"),\n)\nTITLE_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"TITLE_GENERATION_PROMPT_TEMPLATE\",\n    \"task.title.prompt_template\",\n    os.environ.get(\"TITLE_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TITLE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TITLE_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"TITLE_GENERATION_PROMPT_TEMPLATE\",\n    \"task.title.prompt_template\",\n    os.environ.get(\"TITLE_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_TITLE_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate a concise, 3-5 word title with an emoji summarizing the chat history.\n### Guidelines:\n- The title should clearly represent the main theme or subject of the conversation.\n- Use emojis that enhance understanding of the topic, but avoid quotation marks or special formatting.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TITLE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_TITLE_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate a concise, 3-5 word title with an emoji summarizing the chat history.\n### Guidelines:\n- The title should clearly represent the main theme or subject of the conversation.\n- Use emojis that enhance understanding of the topic, but avoid quotation marks or special formatting.\n- Write the title in the chat's primary language; default to English if multilingual.\n- Prioritize accuracy over excessive creativity; keep it clear and simple.\n- Your entire response must consist solely of the JSON object, without any introductory or concluding text.\n- The output must be a single, raw JSON object, without any markdown code fences or other encapsulating text.\n- Ensure no conversational text, affirmations, or explanations precede or follow the raw JSON output, as this will cause direct parsing failure.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TAGS_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TAGS_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"TAGS_GENERATION_PROMPT_TEMPLATE\",\n    \"task.tags.prompt_template\",\n    os.environ.get(\"TAGS_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_TAGS_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate 1-3 broad tags categorizing the main themes of the chat history, along with 1-3 more specific subtopic tags.\n### Guidelines:\n- Start with high-level domains (e.g. Science, Technology, Philosophy, Arts, Politics, Business, Health, Sports, Entertainment, Education)\n- Consider including relevant subfields/subdomains if they are strongly represented throughout the conversation",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TAGS_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_TAGS_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate 1-3 broad tags categorizing the main themes of the chat history, along with 1-3 more specific subtopic tags.\n### Guidelines:\n- Start with high-level domains (e.g. Science, Technology, Philosophy, Arts, Politics, Business, Health, Sports, Entertainment, Education)\n- Consider including relevant subfields/subdomains if they are strongly represented throughout the conversation\n- If content is too short (less than 3 messages) or too diverse, use only [\"General\"]\n- Use the chat's primary language; default to English if multilingual\n- Prioritize accuracy over specificity\n### Output:\nJSON format: { \"tags\": [\"tag1\", \"tag2\", \"tag3\"] }",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\",\n    \"task.image.prompt_template\",\n    os.environ.get(\"IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate a detailed prompt for am image generation task based on the given language and context. Describe the image as if you were explaining it to someone who cannot see it. Include relevant details, colors, shapes, and any other important elements.\n### Guidelines:\n- Be descriptive and detailed, focusing on the most important aspects of the image.\n- Avoid making assumptions or adding information not present in the image.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nGenerate a detailed prompt for am image generation task based on the given language and context. Describe the image as if you were explaining it to someone who cannot see it. Include relevant details, colors, shapes, and any other important elements.\n### Guidelines:\n- Be descriptive and detailed, focusing on the most important aspects of the image.\n- Avoid making assumptions or adding information not present in the image.\n- Use the chat's primary language; default to English if multilingual.\n- If the image is too complex, focus on the most prominent elements.\n### Output:\nStrictly return in JSON format:\n{",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "FOLLOW_UP_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\",\n    \"task.follow_up.prompt_template\",\n    os.environ.get(\"FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nSuggest 3-5 relevant follow-up questions or prompts that the user might naturally ask next in this conversation as a **user**, based on the chat history, to help continue or deepen the discussion.\n### Guidelines:\n- Write all follow-up questions from the user’s point of view, directed to the assistant.\n- Make questions concise, clear, and directly related to the discussed topic(s).",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FOLLOW_UP_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nSuggest 3-5 relevant follow-up questions or prompts that the user might naturally ask next in this conversation as a **user**, based on the chat history, to help continue or deepen the discussion.\n### Guidelines:\n- Write all follow-up questions from the user’s point of view, directed to the assistant.\n- Make questions concise, clear, and directly related to the discussed topic(s).\n- Only suggest follow-ups that make sense given the chat content and do not repeat what was already covered.\n- If the conversation is very short or not specific, suggest more general (but relevant) follow-ups the user might ask.\n- Use the conversation's primary language; default to English if multilingual.\n- Response must be a JSON array of strings, no extra text or formatting.\n### Output:",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_FOLLOW_UP_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_FOLLOW_UP_GENERATION = PersistentConfig(\n    \"ENABLE_FOLLOW_UP_GENERATION\",\n    \"task.follow_up.enable\",\n    os.environ.get(\"ENABLE_FOLLOW_UP_GENERATION\", \"True\").lower() == \"true\",\n)\nENABLE_TAGS_GENERATION = PersistentConfig(\n    \"ENABLE_TAGS_GENERATION\",\n    \"task.tags.enable\",\n    os.environ.get(\"ENABLE_TAGS_GENERATION\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_TAGS_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_TAGS_GENERATION = PersistentConfig(\n    \"ENABLE_TAGS_GENERATION\",\n    \"task.tags.enable\",\n    os.environ.get(\"ENABLE_TAGS_GENERATION\", \"True\").lower() == \"true\",\n)\nENABLE_TITLE_GENERATION = PersistentConfig(\n    \"ENABLE_TITLE_GENERATION\",\n    \"task.title.enable\",\n    os.environ.get(\"ENABLE_TITLE_GENERATION\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_TITLE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_TITLE_GENERATION = PersistentConfig(\n    \"ENABLE_TITLE_GENERATION\",\n    \"task.title.enable\",\n    os.environ.get(\"ENABLE_TITLE_GENERATION\", \"True\").lower() == \"true\",\n)\nENABLE_SEARCH_QUERY_GENERATION = PersistentConfig(\n    \"ENABLE_SEARCH_QUERY_GENERATION\",\n    \"task.query.search.enable\",\n    os.environ.get(\"ENABLE_SEARCH_QUERY_GENERATION\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_SEARCH_QUERY_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_SEARCH_QUERY_GENERATION = PersistentConfig(\n    \"ENABLE_SEARCH_QUERY_GENERATION\",\n    \"task.query.search.enable\",\n    os.environ.get(\"ENABLE_SEARCH_QUERY_GENERATION\", \"True\").lower() == \"true\",\n)\nENABLE_RETRIEVAL_QUERY_GENERATION = PersistentConfig(\n    \"ENABLE_RETRIEVAL_QUERY_GENERATION\",\n    \"task.query.retrieval.enable\",\n    os.environ.get(\"ENABLE_RETRIEVAL_QUERY_GENERATION\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_RETRIEVAL_QUERY_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_RETRIEVAL_QUERY_GENERATION = PersistentConfig(\n    \"ENABLE_RETRIEVAL_QUERY_GENERATION\",\n    \"task.query.retrieval.enable\",\n    os.environ.get(\"ENABLE_RETRIEVAL_QUERY_GENERATION\", \"True\").lower() == \"true\",\n)\nQUERY_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"QUERY_GENERATION_PROMPT_TEMPLATE\",\n    \"task.query.prompt_template\",\n    os.environ.get(\"QUERY_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QUERY_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QUERY_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"QUERY_GENERATION_PROMPT_TEMPLATE\",\n    \"task.query.prompt_template\",\n    os.environ.get(\"QUERY_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_QUERY_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nAnalyze the chat history to determine the necessity of generating search queries, in the given language. By default, **prioritize generating 1-3 broad and relevant search queries** unless it is absolutely certain that no additional information is required. The aim is to retrieve comprehensive, updated, and valuable information even with minimal uncertainty. If no search is unequivocally needed, return an empty list.\n### Guidelines:\n- Respond **EXCLUSIVELY** with a JSON object. Any form of extra commentary, explanation, or additional text is strictly prohibited.\n- When generating search queries, respond in the format: { \"queries\": [\"query1\", \"query2\"] }, ensuring each query is distinct, concise, and relevant to the topic.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_QUERY_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_QUERY_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nAnalyze the chat history to determine the necessity of generating search queries, in the given language. By default, **prioritize generating 1-3 broad and relevant search queries** unless it is absolutely certain that no additional information is required. The aim is to retrieve comprehensive, updated, and valuable information even with minimal uncertainty. If no search is unequivocally needed, return an empty list.\n### Guidelines:\n- Respond **EXCLUSIVELY** with a JSON object. Any form of extra commentary, explanation, or additional text is strictly prohibited.\n- When generating search queries, respond in the format: { \"queries\": [\"query1\", \"query2\"] }, ensuring each query is distinct, concise, and relevant to the topic.\n- If and only if it is entirely certain that no useful results can be retrieved by a search, return: { \"queries\": [] }.\n- Err on the side of suggesting search queries if there is **any chance** they might provide useful or updated information.\n- Be concise and focused on composing high-quality search queries, avoiding unnecessary elaboration, commentary, or assumptions.\n- Today's date is: {{CURRENT_DATE}}.\n- Always prioritize providing actionable and broad queries that maximize informational coverage.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_AUTOCOMPLETE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_AUTOCOMPLETE_GENERATION = PersistentConfig(\n    \"ENABLE_AUTOCOMPLETE_GENERATION\",\n    \"task.autocomplete.enable\",\n    os.environ.get(\"ENABLE_AUTOCOMPLETE_GENERATION\", \"False\").lower() == \"true\",\n)\nAUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = PersistentConfig(\n    \"AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\",\n    \"task.autocomplete.input_max_length\",\n    int(os.environ.get(\"AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\", \"-1\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = PersistentConfig(\n    \"AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\",\n    \"task.autocomplete.input_max_length\",\n    int(os.environ.get(\"AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\", \"-1\")),\n)\nAUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\",\n    \"task.autocomplete.prompt_template\",\n    os.environ.get(\"AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = PersistentConfig(\n    \"AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\",\n    \"task.autocomplete.prompt_template\",\n    os.environ.get(\"AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nYou are an autocompletion system. Continue the text in `<text>` based on the **completion type** in `<type>` and the given language.  \n### **Instructions**:\n1. Analyze `<text>` for context and meaning.  \n2. Use `<type>` to guide your output:  ",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = \"\"\"### Task:\nYou are an autocompletion system. Continue the text in `<text>` based on the **completion type** in `<type>` and the given language.  \n### **Instructions**:\n1. Analyze `<text>` for context and meaning.  \n2. Use `<type>` to guide your output:  \n   - **General**: Provide a natural, concise continuation.  \n   - **Search Query**: Complete as if generating a realistic search query.  \n3. Start as if you are directly continuing `<text>`. Do **not** repeat, paraphrase, or respond as a model. Simply complete the text.  \n4. Ensure the continuation:\n   - Flows naturally from `<text>`.  ",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = PersistentConfig(\n    \"TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\",\n    \"task.tools.prompt_template\",\n    os.environ.get(\"TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\", \"\"),\n)\nDEFAULT_TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = \"\"\"Available Tools: {{TOOLS}}\nYour task is to choose and return the correct tool(s) from the list of available tools based on the query. Follow these guidelines:\n- Return only the JSON object, without any additional text or explanation.\n- If no tools match the query, return an empty array: \n   {",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = \"\"\"Available Tools: {{TOOLS}}\nYour task is to choose and return the correct tool(s) from the list of available tools based on the query. Follow these guidelines:\n- Return only the JSON object, without any additional text or explanation.\n- If no tools match the query, return an empty array: \n   {\n     \"tool_calls\": []\n   }\n- If one or more tools match the query, construct a JSON response containing a \"tool_calls\" array with objects that include:\n   - \"name\": The tool's name.\n   - \"parameters\": A dictionary of required parameters and their corresponding values.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EMOJI_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_EMOJI_GENERATION_PROMPT_TEMPLATE = \"\"\"Your task is to reflect the speaker's likely facial expression through a fitting emoji. Interpret emotions from the message and reflect their facial expression using fitting, diverse emojis (e.g., 😊, 😢, 😡, 😱).\nMessage: ```{{prompt}}```\"\"\"\nDEFAULT_MOA_GENERATION_PROMPT_TEMPLATE = \"\"\"You have been provided with a set of responses from various models to the latest user query: \"{{prompt}}\"\nYour task is to synthesize these responses into a single, high-quality response. It is crucial to critically evaluate the information provided in these responses, recognizing that some of it may be biased or incorrect. Your response should not simply replicate the given answers but should offer a refined, accurate, and comprehensive reply to the instruction. Ensure your response is well-structured, coherent, and adheres to the highest standards of accuracy and reliability.\nResponses from models: {{responses}}\"\"\"\n####################################\n# Code Interpreter\n####################################\nENABLE_CODE_EXECUTION = PersistentConfig(\n    \"ENABLE_CODE_EXECUTION\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MOA_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_MOA_GENERATION_PROMPT_TEMPLATE = \"\"\"You have been provided with a set of responses from various models to the latest user query: \"{{prompt}}\"\nYour task is to synthesize these responses into a single, high-quality response. It is crucial to critically evaluate the information provided in these responses, recognizing that some of it may be biased or incorrect. Your response should not simply replicate the given answers but should offer a refined, accurate, and comprehensive reply to the instruction. Ensure your response is well-structured, coherent, and adheres to the highest standards of accuracy and reliability.\nResponses from models: {{responses}}\"\"\"\n####################################\n# Code Interpreter\n####################################\nENABLE_CODE_EXECUTION = PersistentConfig(\n    \"ENABLE_CODE_EXECUTION\",\n    \"code_execution.enable\",\n    os.environ.get(\"ENABLE_CODE_EXECUTION\", \"True\").lower() == \"true\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_CODE_EXECUTION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_CODE_EXECUTION = PersistentConfig(\n    \"ENABLE_CODE_EXECUTION\",\n    \"code_execution.enable\",\n    os.environ.get(\"ENABLE_CODE_EXECUTION\", \"True\").lower() == \"true\",\n)\nCODE_EXECUTION_ENGINE = PersistentConfig(\n    \"CODE_EXECUTION_ENGINE\",\n    \"code_execution.engine\",\n    os.environ.get(\"CODE_EXECUTION_ENGINE\", \"pyodide\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_ENGINE = PersistentConfig(\n    \"CODE_EXECUTION_ENGINE\",\n    \"code_execution.engine\",\n    os.environ.get(\"CODE_EXECUTION_ENGINE\", \"pyodide\"),\n)\nCODE_EXECUTION_JUPYTER_URL = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_URL\",\n    \"code_execution.jupyter.url\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_JUPYTER_URL = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_URL\",\n    \"code_execution.jupyter.url\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_URL\", \"\"),\n)\nCODE_EXECUTION_JUPYTER_AUTH = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH\",\n    \"code_execution.jupyter.auth\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_JUPYTER_AUTH = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH\",\n    \"code_execution.jupyter.auth\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH\", \"\"),\n)\nCODE_EXECUTION_JUPYTER_AUTH_TOKEN = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH_TOKEN\",\n    \"code_execution.jupyter.auth_token\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_TOKEN\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH_TOKEN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_JUPYTER_AUTH_TOKEN = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH_TOKEN\",\n    \"code_execution.jupyter.auth_token\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_TOKEN\", \"\"),\n)\nCODE_EXECUTION_JUPYTER_AUTH_PASSWORD = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\",\n    \"code_execution.jupyter.auth_password\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_AUTH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\",\n    \"code_execution.jupyter.auth_password\",\n    os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\", \"\"),\n)\nCODE_EXECUTION_JUPYTER_TIMEOUT = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_TIMEOUT\",\n    \"code_execution.jupyter.timeout\",\n    int(os.environ.get(\"CODE_EXECUTION_JUPYTER_TIMEOUT\", \"60\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_EXECUTION_JUPYTER_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_EXECUTION_JUPYTER_TIMEOUT = PersistentConfig(\n    \"CODE_EXECUTION_JUPYTER_TIMEOUT\",\n    \"code_execution.jupyter.timeout\",\n    int(os.environ.get(\"CODE_EXECUTION_JUPYTER_TIMEOUT\", \"60\")),\n)\nENABLE_CODE_INTERPRETER = PersistentConfig(\n    \"ENABLE_CODE_INTERPRETER\",\n    \"code_interpreter.enable\",\n    os.environ.get(\"ENABLE_CODE_INTERPRETER\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_CODE_INTERPRETER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_CODE_INTERPRETER = PersistentConfig(\n    \"ENABLE_CODE_INTERPRETER\",\n    \"code_interpreter.enable\",\n    os.environ.get(\"ENABLE_CODE_INTERPRETER\", \"True\").lower() == \"true\",\n)\nCODE_INTERPRETER_ENGINE = PersistentConfig(\n    \"CODE_INTERPRETER_ENGINE\",\n    \"code_interpreter.engine\",\n    os.environ.get(\"CODE_INTERPRETER_ENGINE\", \"pyodide\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_ENGINE = PersistentConfig(\n    \"CODE_INTERPRETER_ENGINE\",\n    \"code_interpreter.engine\",\n    os.environ.get(\"CODE_INTERPRETER_ENGINE\", \"pyodide\"),\n)\nCODE_INTERPRETER_PROMPT_TEMPLATE = PersistentConfig(\n    \"CODE_INTERPRETER_PROMPT_TEMPLATE\",\n    \"code_interpreter.prompt_template\",\n    os.environ.get(\"CODE_INTERPRETER_PROMPT_TEMPLATE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_PROMPT_TEMPLATE = PersistentConfig(\n    \"CODE_INTERPRETER_PROMPT_TEMPLATE\",\n    \"code_interpreter.prompt_template\",\n    os.environ.get(\"CODE_INTERPRETER_PROMPT_TEMPLATE\", \"\"),\n)\nCODE_INTERPRETER_JUPYTER_URL = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_URL\",\n    \"code_interpreter.jupyter.url\",\n    os.environ.get(\n        \"CODE_INTERPRETER_JUPYTER_URL\", os.environ.get(\"CODE_EXECUTION_JUPYTER_URL\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_JUPYTER_URL = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_URL\",\n    \"code_interpreter.jupyter.url\",\n    os.environ.get(\n        \"CODE_INTERPRETER_JUPYTER_URL\", os.environ.get(\"CODE_EXECUTION_JUPYTER_URL\", \"\")\n    ),\n)\nCODE_INTERPRETER_JUPYTER_AUTH = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH\",\n    \"code_interpreter.jupyter.auth\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_JUPYTER_AUTH = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH\",\n    \"code_interpreter.jupyter.auth\",\n    os.environ.get(\n        \"CODE_INTERPRETER_JUPYTER_AUTH\",\n        os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH\", \"\"),\n    ),\n)\nCODE_INTERPRETER_JUPYTER_AUTH_TOKEN = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH_TOKEN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\",\n    \"code_interpreter.jupyter.auth_token\",\n    os.environ.get(\n        \"CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\",\n        os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_TOKEN\", \"\"),\n    ),\n)\nCODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\",\n    \"code_interpreter.jupyter.auth_password\",\n    os.environ.get(\n        \"CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\",\n        os.environ.get(\"CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\", \"\"),\n    ),\n)\nCODE_INTERPRETER_JUPYTER_TIMEOUT = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_TIMEOUT\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CODE_INTERPRETER_JUPYTER_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CODE_INTERPRETER_JUPYTER_TIMEOUT = PersistentConfig(\n    \"CODE_INTERPRETER_JUPYTER_TIMEOUT\",\n    \"code_interpreter.jupyter.timeout\",\n    int(\n        os.environ.get(\n            \"CODE_INTERPRETER_JUPYTER_TIMEOUT\",\n            os.environ.get(\"CODE_EXECUTION_JUPYTER_TIMEOUT\", \"60\"),\n        )\n    ),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CODE_INTERPRETER_PROMPT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_CODE_INTERPRETER_PROMPT = \"\"\"\n#### Tools Available\n1. **Code Interpreter**: `<code_interpreter type=\"code\" lang=\"python\"></code_interpreter>`\n   - You have access to a Python shell that runs directly in the user's browser, enabling fast execution of code for analysis, calculations, or problem-solving.  Use it in this response.\n   - The Python code you write can incorporate a wide array of libraries, handle data manipulation or visualization, perform API calls for web-related tasks, or tackle virtually any computational challenge. Use this flexibility to **think outside the box, craft elegant solutions, and harness Python's full potential**.\n   - To use it, **you must enclose your code within `<code_interpreter type=\"code\" lang=\"python\">` XML tags** and stop right away. If you don't, the code won't execute. \n   - When writing code in the code_interpreter XML tag, Do NOT use the triple backticks code block for markdown formatting, example: ```py # python code ``` will cause an error because it is markdown formatting, it is not python code.\n   - When coding, **always aim to print meaningful outputs** (e.g., results, tables, summaries, or visuals) to better interpret and verify the findings. Avoid relying on implicit outputs; prioritize explicit and clear print statements so the results are effectively communicated to the user.  \n   - After obtaining the printed output, **always provide a concise analysis, interpretation, or next steps to help the user understand the findings or refine the outcome further.**  \n   - If the results are unclear, unexpected, or require validation, refine the code and execute it again as needed. Always aim to deliver meaningful insights from the results, iterating if necessary.  ",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "VECTOR_DB",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "VECTOR_DB = os.environ.get(\"VECTOR_DB\", \"chroma\")\n# Chroma\nCHROMA_DATA_PATH = f\"{DATA_DIR}/vector_db\"\nif VECTOR_DB == \"chroma\":\n    import chromadb\n    CHROMA_TENANT = os.environ.get(\"CHROMA_TENANT\", chromadb.DEFAULT_TENANT)\n    CHROMA_DATABASE = os.environ.get(\"CHROMA_DATABASE\", chromadb.DEFAULT_DATABASE)\n    CHROMA_HTTP_HOST = os.environ.get(\"CHROMA_HTTP_HOST\", \"\")\n    CHROMA_HTTP_PORT = int(os.environ.get(\"CHROMA_HTTP_PORT\", \"8000\"))\n    CHROMA_CLIENT_AUTH_PROVIDER = os.environ.get(\"CHROMA_CLIENT_AUTH_PROVIDER\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHROMA_DATA_PATH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CHROMA_DATA_PATH = f\"{DATA_DIR}/vector_db\"\nif VECTOR_DB == \"chroma\":\n    import chromadb\n    CHROMA_TENANT = os.environ.get(\"CHROMA_TENANT\", chromadb.DEFAULT_TENANT)\n    CHROMA_DATABASE = os.environ.get(\"CHROMA_DATABASE\", chromadb.DEFAULT_DATABASE)\n    CHROMA_HTTP_HOST = os.environ.get(\"CHROMA_HTTP_HOST\", \"\")\n    CHROMA_HTTP_PORT = int(os.environ.get(\"CHROMA_HTTP_PORT\", \"8000\"))\n    CHROMA_CLIENT_AUTH_PROVIDER = os.environ.get(\"CHROMA_CLIENT_AUTH_PROVIDER\", \"\")\n    CHROMA_CLIENT_AUTH_CREDENTIALS = os.environ.get(\n        \"CHROMA_CLIENT_AUTH_CREDENTIALS\", \"\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_URI = os.environ.get(\"MILVUS_URI\", f\"{DATA_DIR}/vector_db/milvus.db\")\nMILVUS_DB = os.environ.get(\"MILVUS_DB\", \"default\")\nMILVUS_TOKEN = os.environ.get(\"MILVUS_TOKEN\", None)\nMILVUS_INDEX_TYPE = os.environ.get(\"MILVUS_INDEX_TYPE\", \"HNSW\")\nMILVUS_METRIC_TYPE = os.environ.get(\"MILVUS_METRIC_TYPE\", \"COSINE\")\nMILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_DB",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_DB = os.environ.get(\"MILVUS_DB\", \"default\")\nMILVUS_TOKEN = os.environ.get(\"MILVUS_TOKEN\", None)\nMILVUS_INDEX_TYPE = os.environ.get(\"MILVUS_INDEX_TYPE\", \"HNSW\")\nMILVUS_METRIC_TYPE = os.environ.get(\"MILVUS_METRIC_TYPE\", \"COSINE\")\nMILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_TOKEN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_TOKEN = os.environ.get(\"MILVUS_TOKEN\", None)\nMILVUS_INDEX_TYPE = os.environ.get(\"MILVUS_INDEX_TYPE\", \"HNSW\")\nMILVUS_METRIC_TYPE = os.environ.get(\"MILVUS_METRIC_TYPE\", \"COSINE\")\nMILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_INDEX_TYPE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_INDEX_TYPE = os.environ.get(\"MILVUS_INDEX_TYPE\", \"HNSW\")\nMILVUS_METRIC_TYPE = os.environ.get(\"MILVUS_METRIC_TYPE\", \"COSINE\")\nMILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_METRIC_TYPE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_METRIC_TYPE = os.environ.get(\"MILVUS_METRIC_TYPE\", \"COSINE\")\nMILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_HNSW_M",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_HNSW_M = int(os.environ.get(\"MILVUS_HNSW_M\", \"16\"))\nMILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_HNSW_EFCONSTRUCTION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_HNSW_EFCONSTRUCTION = int(os.environ.get(\"MILVUS_HNSW_EFCONSTRUCTION\", \"100\"))\nMILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MILVUS_IVF_FLAT_NLIST",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MILVUS_IVF_FLAT_NLIST = int(os.environ.get(\"MILVUS_IVF_FLAT_NLIST\", \"128\"))\n# Qdrant\nQDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QDRANT_URI = os.environ.get(\"QDRANT_URI\", None)\nQDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QDRANT_API_KEY = os.environ.get(\"QDRANT_API_KEY\", None)\nQDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_ON_DISK",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QDRANT_ON_DISK = os.environ.get(\"QDRANT_ON_DISK\", \"false\").lower() == \"true\"\nQDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_PREFER_GRPC",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QDRANT_PREFER_GRPC = os.environ.get(\"QDRANT_PREFER_GRPC\", \"False\").lower() == \"true\"\nQDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "QDRANT_GRPC_PORT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "QDRANT_GRPC_PORT = int(os.environ.get(\"QDRANT_GRPC_PORT\", \"6334\"))\nENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_QDRANT_MULTITENANCY_MODE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_QDRANT_MULTITENANCY_MODE = (\n    os.environ.get(\"ENABLE_QDRANT_MULTITENANCY_MODE\", \"false\").lower() == \"true\"\n)\n# OpenSearch\nOPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"\n)\nOPENSEARCH_USERNAME = os.environ.get(\"OPENSEARCH_USERNAME\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_URI",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENSEARCH_URI = os.environ.get(\"OPENSEARCH_URI\", \"https://localhost:9200\")\nOPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"\n)\nOPENSEARCH_USERNAME = os.environ.get(\"OPENSEARCH_USERNAME\", None)\nOPENSEARCH_PASSWORD = os.environ.get(\"OPENSEARCH_PASSWORD\", None)\n# ElasticSearch\nELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_SSL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENSEARCH_SSL = os.environ.get(\"OPENSEARCH_SSL\", \"true\").lower() == \"true\"\nOPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"\n)\nOPENSEARCH_USERNAME = os.environ.get(\"OPENSEARCH_USERNAME\", None)\nOPENSEARCH_PASSWORD = os.environ.get(\"OPENSEARCH_PASSWORD\", None)\n# ElasticSearch\nELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_CERT_VERIFY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENSEARCH_CERT_VERIFY = (\n    os.environ.get(\"OPENSEARCH_CERT_VERIFY\", \"false\").lower() == \"true\"\n)\nOPENSEARCH_USERNAME = os.environ.get(\"OPENSEARCH_USERNAME\", None)\nOPENSEARCH_PASSWORD = os.environ.get(\"OPENSEARCH_PASSWORD\", None)\n# ElasticSearch\nELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENSEARCH_USERNAME = os.environ.get(\"OPENSEARCH_USERNAME\", None)\nOPENSEARCH_PASSWORD = os.environ.get(\"OPENSEARCH_PASSWORD\", None)\n# ElasticSearch\nELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "OPENSEARCH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "OPENSEARCH_PASSWORD = os.environ.get(\"OPENSEARCH_PASSWORD\", None)\n# ElasticSearch\nELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_URL = os.environ.get(\"ELASTICSEARCH_URL\", \"https://localhost:9200\")\nELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_CA_CERTS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_CA_CERTS = os.environ.get(\"ELASTICSEARCH_CA_CERTS\", None)\nELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_API_KEY = os.environ.get(\"ELASTICSEARCH_API_KEY\", None)\nELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_USERNAME = os.environ.get(\"ELASTICSEARCH_USERNAME\", None)\nELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_PASSWORD = os.environ.get(\"ELASTICSEARCH_PASSWORD\", None)\nELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):\n    raise ValueError(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_CLOUD_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_CLOUD_ID = os.environ.get(\"ELASTICSEARCH_CLOUD_ID\", None)\nSSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):\n    raise ValueError(\n        \"Pgvector requires setting PGVECTOR_DB_URL or using Postgres with vector extension as the primary database.\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SSL_ASSERT_FINGERPRINT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SSL_ASSERT_FINGERPRINT = os.environ.get(\"SSL_ASSERT_FINGERPRINT\", None)\nELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):\n    raise ValueError(\n        \"Pgvector requires setting PGVECTOR_DB_URL or using Postgres with vector extension as the primary database.\"\n    )",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ELASTICSEARCH_INDEX_PREFIX",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ELASTICSEARCH_INDEX_PREFIX = os.environ.get(\n    \"ELASTICSEARCH_INDEX_PREFIX\", \"open_webui_collections\"\n)\n# Pgvector\nPGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):\n    raise ValueError(\n        \"Pgvector requires setting PGVECTOR_DB_URL or using Postgres with vector extension as the primary database.\"\n    )\nPGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH = int(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_DB_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PGVECTOR_DB_URL = os.environ.get(\"PGVECTOR_DB_URL\", DATABASE_URL)\nif VECTOR_DB == \"pgvector\" and not PGVECTOR_DB_URL.startswith(\"postgres\"):\n    raise ValueError(\n        \"Pgvector requires setting PGVECTOR_DB_URL or using Postgres with vector extension as the primary database.\"\n    )\nPGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH = int(\n    os.environ.get(\"PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH\", \"1536\")\n)\nPGVECTOR_PGCRYPTO = os.getenv(\"PGVECTOR_PGCRYPTO\", \"false\").lower() == \"true\"\nPGVECTOR_PGCRYPTO_KEY = os.getenv(\"PGVECTOR_PGCRYPTO_KEY\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH = int(\n    os.environ.get(\"PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH\", \"1536\")\n)\nPGVECTOR_PGCRYPTO = os.getenv(\"PGVECTOR_PGCRYPTO\", \"false\").lower() == \"true\"\nPGVECTOR_PGCRYPTO_KEY = os.getenv(\"PGVECTOR_PGCRYPTO_KEY\", None)\nif PGVECTOR_PGCRYPTO and not PGVECTOR_PGCRYPTO_KEY:\n    raise ValueError(\n        \"PGVECTOR_PGCRYPTO is enabled but PGVECTOR_PGCRYPTO_KEY is not set. Please provide a valid key.\"\n    )\n# Pinecone",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_PGCRYPTO",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PGVECTOR_PGCRYPTO = os.getenv(\"PGVECTOR_PGCRYPTO\", \"false\").lower() == \"true\"\nPGVECTOR_PGCRYPTO_KEY = os.getenv(\"PGVECTOR_PGCRYPTO_KEY\", None)\nif PGVECTOR_PGCRYPTO and not PGVECTOR_PGCRYPTO_KEY:\n    raise ValueError(\n        \"PGVECTOR_PGCRYPTO is enabled but PGVECTOR_PGCRYPTO_KEY is not set. Please provide a valid key.\"\n    )\n# Pinecone\nPINECONE_API_KEY = os.environ.get(\"PINECONE_API_KEY\", None)\nPINECONE_ENVIRONMENT = os.environ.get(\"PINECONE_ENVIRONMENT\", None)\nPINECONE_INDEX_NAME = os.getenv(\"PINECONE_INDEX_NAME\", \"open-webui-index\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PGVECTOR_PGCRYPTO_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PGVECTOR_PGCRYPTO_KEY = os.getenv(\"PGVECTOR_PGCRYPTO_KEY\", None)\nif PGVECTOR_PGCRYPTO and not PGVECTOR_PGCRYPTO_KEY:\n    raise ValueError(\n        \"PGVECTOR_PGCRYPTO is enabled but PGVECTOR_PGCRYPTO_KEY is not set. Please provide a valid key.\"\n    )\n# Pinecone\nPINECONE_API_KEY = os.environ.get(\"PINECONE_API_KEY\", None)\nPINECONE_ENVIRONMENT = os.environ.get(\"PINECONE_ENVIRONMENT\", None)\nPINECONE_INDEX_NAME = os.getenv(\"PINECONE_INDEX_NAME\", \"open-webui-index\")\nPINECONE_DIMENSION = int(os.getenv(\"PINECONE_DIMENSION\", 1536))  # or 3072, 1024, 768",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_API_KEY = os.environ.get(\"PINECONE_API_KEY\", None)\nPINECONE_ENVIRONMENT = os.environ.get(\"PINECONE_ENVIRONMENT\", None)\nPINECONE_INDEX_NAME = os.getenv(\"PINECONE_INDEX_NAME\", \"open-webui-index\")\nPINECONE_DIMENSION = int(os.getenv(\"PINECONE_DIMENSION\", 1536))  # or 3072, 1024, 768\nPINECONE_METRIC = os.getenv(\"PINECONE_METRIC\", \"cosine\")\nPINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_ENVIRONMENT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_ENVIRONMENT = os.environ.get(\"PINECONE_ENVIRONMENT\", None)\nPINECONE_INDEX_NAME = os.getenv(\"PINECONE_INDEX_NAME\", \"open-webui-index\")\nPINECONE_DIMENSION = int(os.getenv(\"PINECONE_DIMENSION\", 1536))  # or 3072, 1024, 768\nPINECONE_METRIC = os.getenv(\"PINECONE_METRIC\", \"cosine\")\nPINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.\nENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_INDEX_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_INDEX_NAME = os.getenv(\"PINECONE_INDEX_NAME\", \"open-webui-index\")\nPINECONE_DIMENSION = int(os.getenv(\"PINECONE_DIMENSION\", 1536))  # or 3072, 1024, 768\nPINECONE_METRIC = os.getenv(\"PINECONE_METRIC\", \"cosine\")\nPINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.\nENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_GOOGLE_DRIVE_INTEGRATION\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_DIMENSION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_DIMENSION = int(os.getenv(\"PINECONE_DIMENSION\", 1536))  # or 3072, 1024, 768\nPINECONE_METRIC = os.getenv(\"PINECONE_METRIC\", \"cosine\")\nPINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.\nENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_GOOGLE_DRIVE_INTEGRATION\",\n    \"google_drive.enable\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_METRIC",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_METRIC = os.getenv(\"PINECONE_METRIC\", \"cosine\")\nPINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.\nENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_GOOGLE_DRIVE_INTEGRATION\",\n    \"google_drive.enable\",\n    os.getenv(\"ENABLE_GOOGLE_DRIVE_INTEGRATION\", \"False\").lower() == \"true\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PINECONE_CLOUD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PINECONE_CLOUD = os.getenv(\"PINECONE_CLOUD\", \"aws\")  # or \"gcp\" or \"azure\"\n####################################\n# Information Retrieval (RAG)\n####################################\n# If configured, Google Drive will be available as an upload option.\nENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_GOOGLE_DRIVE_INTEGRATION\",\n    \"google_drive.enable\",\n    os.getenv(\"ENABLE_GOOGLE_DRIVE_INTEGRATION\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_GOOGLE_DRIVE_INTEGRATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_GOOGLE_DRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_GOOGLE_DRIVE_INTEGRATION\",\n    \"google_drive.enable\",\n    os.getenv(\"ENABLE_GOOGLE_DRIVE_INTEGRATION\", \"False\").lower() == \"true\",\n)\nGOOGLE_DRIVE_CLIENT_ID = PersistentConfig(\n    \"GOOGLE_DRIVE_CLIENT_ID\",\n    \"google_drive.client_id\",\n    os.environ.get(\"GOOGLE_DRIVE_CLIENT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_DRIVE_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_DRIVE_CLIENT_ID = PersistentConfig(\n    \"GOOGLE_DRIVE_CLIENT_ID\",\n    \"google_drive.client_id\",\n    os.environ.get(\"GOOGLE_DRIVE_CLIENT_ID\", \"\"),\n)\nGOOGLE_DRIVE_API_KEY = PersistentConfig(\n    \"GOOGLE_DRIVE_API_KEY\",\n    \"google_drive.api_key\",\n    os.environ.get(\"GOOGLE_DRIVE_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_DRIVE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_DRIVE_API_KEY = PersistentConfig(\n    \"GOOGLE_DRIVE_API_KEY\",\n    \"google_drive.api_key\",\n    os.environ.get(\"GOOGLE_DRIVE_API_KEY\", \"\"),\n)\nENABLE_ONEDRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_ONEDRIVE_INTEGRATION\",\n    \"onedrive.enable\",\n    os.getenv(\"ENABLE_ONEDRIVE_INTEGRATION\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_ONEDRIVE_INTEGRATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_ONEDRIVE_INTEGRATION = PersistentConfig(\n    \"ENABLE_ONEDRIVE_INTEGRATION\",\n    \"onedrive.enable\",\n    os.getenv(\"ENABLE_ONEDRIVE_INTEGRATION\", \"False\").lower() == \"true\",\n)\nONEDRIVE_CLIENT_ID = PersistentConfig(\n    \"ONEDRIVE_CLIENT_ID\",\n    \"onedrive.client_id\",\n    os.environ.get(\"ONEDRIVE_CLIENT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ONEDRIVE_CLIENT_ID = PersistentConfig(\n    \"ONEDRIVE_CLIENT_ID\",\n    \"onedrive.client_id\",\n    os.environ.get(\"ONEDRIVE_CLIENT_ID\", \"\"),\n)\nONEDRIVE_SHAREPOINT_URL = PersistentConfig(\n    \"ONEDRIVE_SHAREPOINT_URL\",\n    \"onedrive.sharepoint_url\",\n    os.environ.get(\"ONEDRIVE_SHAREPOINT_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_SHAREPOINT_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ONEDRIVE_SHAREPOINT_URL = PersistentConfig(\n    \"ONEDRIVE_SHAREPOINT_URL\",\n    \"onedrive.sharepoint_url\",\n    os.environ.get(\"ONEDRIVE_SHAREPOINT_URL\", \"\"),\n)\nONEDRIVE_SHAREPOINT_TENANT_ID = PersistentConfig(\n    \"ONEDRIVE_SHAREPOINT_TENANT_ID\",\n    \"onedrive.sharepoint_tenant_id\",\n    os.environ.get(\"ONEDRIVE_SHAREPOINT_TENANT_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ONEDRIVE_SHAREPOINT_TENANT_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ONEDRIVE_SHAREPOINT_TENANT_ID = PersistentConfig(\n    \"ONEDRIVE_SHAREPOINT_TENANT_ID\",\n    \"onedrive.sharepoint_tenant_id\",\n    os.environ.get(\"ONEDRIVE_SHAREPOINT_TENANT_ID\", \"\"),\n)\n# RAG Content Extraction\nCONTENT_EXTRACTION_ENGINE = PersistentConfig(\n    \"CONTENT_EXTRACTION_ENGINE\",\n    \"rag.CONTENT_EXTRACTION_ENGINE\",\n    os.environ.get(\"CONTENT_EXTRACTION_ENGINE\", \"\").lower(),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CONTENT_EXTRACTION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CONTENT_EXTRACTION_ENGINE = PersistentConfig(\n    \"CONTENT_EXTRACTION_ENGINE\",\n    \"rag.CONTENT_EXTRACTION_ENGINE\",\n    os.environ.get(\"CONTENT_EXTRACTION_ENGINE\", \"\").lower(),\n)\nDATALAB_MARKER_API_KEY = PersistentConfig(\n    \"DATALAB_MARKER_API_KEY\",\n    \"rag.datalab_marker_api_key\",\n    os.environ.get(\"DATALAB_MARKER_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_API_KEY = PersistentConfig(\n    \"DATALAB_MARKER_API_KEY\",\n    \"rag.datalab_marker_api_key\",\n    os.environ.get(\"DATALAB_MARKER_API_KEY\", \"\"),\n)\nDATALAB_MARKER_LANGS = PersistentConfig(\n    \"DATALAB_MARKER_LANGS\",\n    \"rag.datalab_marker_langs\",\n    os.environ.get(\"DATALAB_MARKER_LANGS\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_LANGS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_LANGS = PersistentConfig(\n    \"DATALAB_MARKER_LANGS\",\n    \"rag.datalab_marker_langs\",\n    os.environ.get(\"DATALAB_MARKER_LANGS\", \"\"),\n)\nDATALAB_MARKER_USE_LLM = PersistentConfig(\n    \"DATALAB_MARKER_USE_LLM\",\n    \"rag.DATALAB_MARKER_USE_LLM\",\n    os.environ.get(\"DATALAB_MARKER_USE_LLM\", \"false\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_USE_LLM",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_USE_LLM = PersistentConfig(\n    \"DATALAB_MARKER_USE_LLM\",\n    \"rag.DATALAB_MARKER_USE_LLM\",\n    os.environ.get(\"DATALAB_MARKER_USE_LLM\", \"false\").lower() == \"true\",\n)\nDATALAB_MARKER_SKIP_CACHE = PersistentConfig(\n    \"DATALAB_MARKER_SKIP_CACHE\",\n    \"rag.datalab_marker_skip_cache\",\n    os.environ.get(\"DATALAB_MARKER_SKIP_CACHE\", \"false\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_SKIP_CACHE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_SKIP_CACHE = PersistentConfig(\n    \"DATALAB_MARKER_SKIP_CACHE\",\n    \"rag.datalab_marker_skip_cache\",\n    os.environ.get(\"DATALAB_MARKER_SKIP_CACHE\", \"false\").lower() == \"true\",\n)\nDATALAB_MARKER_FORCE_OCR = PersistentConfig(\n    \"DATALAB_MARKER_FORCE_OCR\",\n    \"rag.datalab_marker_force_ocr\",\n    os.environ.get(\"DATALAB_MARKER_FORCE_OCR\", \"false\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_FORCE_OCR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_FORCE_OCR = PersistentConfig(\n    \"DATALAB_MARKER_FORCE_OCR\",\n    \"rag.datalab_marker_force_ocr\",\n    os.environ.get(\"DATALAB_MARKER_FORCE_OCR\", \"false\").lower() == \"true\",\n)\nDATALAB_MARKER_PAGINATE = PersistentConfig(\n    \"DATALAB_MARKER_PAGINATE\",\n    \"rag.datalab_marker_paginate\",\n    os.environ.get(\"DATALAB_MARKER_PAGINATE\", \"false\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_PAGINATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_PAGINATE = PersistentConfig(\n    \"DATALAB_MARKER_PAGINATE\",\n    \"rag.datalab_marker_paginate\",\n    os.environ.get(\"DATALAB_MARKER_PAGINATE\", \"false\").lower() == \"true\",\n)\nDATALAB_MARKER_STRIP_EXISTING_OCR = PersistentConfig(\n    \"DATALAB_MARKER_STRIP_EXISTING_OCR\",\n    \"rag.datalab_marker_strip_existing_ocr\",\n    os.environ.get(\"DATALAB_MARKER_STRIP_EXISTING_OCR\", \"false\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_STRIP_EXISTING_OCR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_STRIP_EXISTING_OCR = PersistentConfig(\n    \"DATALAB_MARKER_STRIP_EXISTING_OCR\",\n    \"rag.datalab_marker_strip_existing_ocr\",\n    os.environ.get(\"DATALAB_MARKER_STRIP_EXISTING_OCR\", \"false\").lower() == \"true\",\n)\nDATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = PersistentConfig(\n    \"DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\",\n    \"rag.datalab_marker_disable_image_extraction\",\n    os.environ.get(\"DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\", \"false\").lower()\n    == \"true\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = PersistentConfig(\n    \"DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\",\n    \"rag.datalab_marker_disable_image_extraction\",\n    os.environ.get(\"DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\", \"false\").lower()\n    == \"true\",\n)\nDATALAB_MARKER_OUTPUT_FORMAT = PersistentConfig(\n    \"DATALAB_MARKER_OUTPUT_FORMAT\",\n    \"rag.datalab_marker_output_format\",\n    os.environ.get(\"DATALAB_MARKER_OUTPUT_FORMAT\", \"markdown\"),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DATALAB_MARKER_OUTPUT_FORMAT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DATALAB_MARKER_OUTPUT_FORMAT = PersistentConfig(\n    \"DATALAB_MARKER_OUTPUT_FORMAT\",\n    \"rag.datalab_marker_output_format\",\n    os.environ.get(\"DATALAB_MARKER_OUTPUT_FORMAT\", \"markdown\"),\n)\nEXTERNAL_DOCUMENT_LOADER_URL = PersistentConfig(\n    \"EXTERNAL_DOCUMENT_LOADER_URL\",\n    \"rag.external_document_loader_url\",\n    os.environ.get(\"EXTERNAL_DOCUMENT_LOADER_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DOCUMENT_LOADER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_DOCUMENT_LOADER_URL = PersistentConfig(\n    \"EXTERNAL_DOCUMENT_LOADER_URL\",\n    \"rag.external_document_loader_url\",\n    os.environ.get(\"EXTERNAL_DOCUMENT_LOADER_URL\", \"\"),\n)\nEXTERNAL_DOCUMENT_LOADER_API_KEY = PersistentConfig(\n    \"EXTERNAL_DOCUMENT_LOADER_API_KEY\",\n    \"rag.external_document_loader_api_key\",\n    os.environ.get(\"EXTERNAL_DOCUMENT_LOADER_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DOCUMENT_LOADER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_DOCUMENT_LOADER_API_KEY = PersistentConfig(\n    \"EXTERNAL_DOCUMENT_LOADER_API_KEY\",\n    \"rag.external_document_loader_api_key\",\n    os.environ.get(\"EXTERNAL_DOCUMENT_LOADER_API_KEY\", \"\"),\n)\nTIKA_SERVER_URL = PersistentConfig(\n    \"TIKA_SERVER_URL\",\n    \"rag.tika_server_url\",\n    os.getenv(\"TIKA_SERVER_URL\", \"http://tika:9998\"),  # Default for sidecar deployment\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TIKA_SERVER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TIKA_SERVER_URL = PersistentConfig(\n    \"TIKA_SERVER_URL\",\n    \"rag.tika_server_url\",\n    os.getenv(\"TIKA_SERVER_URL\", \"http://tika:9998\"),  # Default for sidecar deployment\n)\nDOCLING_SERVER_URL = PersistentConfig(\n    \"DOCLING_SERVER_URL\",\n    \"rag.docling_server_url\",\n    os.getenv(\"DOCLING_SERVER_URL\", \"http://docling:5001\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_SERVER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_SERVER_URL = PersistentConfig(\n    \"DOCLING_SERVER_URL\",\n    \"rag.docling_server_url\",\n    os.getenv(\"DOCLING_SERVER_URL\", \"http://docling:5001\"),\n)\nDOCLING_OCR_ENGINE = PersistentConfig(\n    \"DOCLING_OCR_ENGINE\",\n    \"rag.docling_ocr_engine\",\n    os.getenv(\"DOCLING_OCR_ENGINE\", \"tesseract\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_OCR_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_OCR_ENGINE = PersistentConfig(\n    \"DOCLING_OCR_ENGINE\",\n    \"rag.docling_ocr_engine\",\n    os.getenv(\"DOCLING_OCR_ENGINE\", \"tesseract\"),\n)\nDOCLING_OCR_LANG = PersistentConfig(\n    \"DOCLING_OCR_LANG\",\n    \"rag.docling_ocr_lang\",\n    os.getenv(\"DOCLING_OCR_LANG\", \"eng,fra,deu,spa\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_OCR_LANG",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_OCR_LANG = PersistentConfig(\n    \"DOCLING_OCR_LANG\",\n    \"rag.docling_ocr_lang\",\n    os.getenv(\"DOCLING_OCR_LANG\", \"eng,fra,deu,spa\"),\n)\nDOCLING_DO_PICTURE_DESCRIPTION = PersistentConfig(\n    \"DOCLING_DO_PICTURE_DESCRIPTION\",\n    \"rag.docling_do_picture_description\",\n    os.getenv(\"DOCLING_DO_PICTURE_DESCRIPTION\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_DO_PICTURE_DESCRIPTION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_DO_PICTURE_DESCRIPTION = PersistentConfig(\n    \"DOCLING_DO_PICTURE_DESCRIPTION\",\n    \"rag.docling_do_picture_description\",\n    os.getenv(\"DOCLING_DO_PICTURE_DESCRIPTION\", \"False\").lower() == \"true\",\n)\nDOCLING_PICTURE_DESCRIPTION_MODE = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_MODE\",\n    \"rag.docling_picture_description_mode\",\n    os.getenv(\"DOCLING_PICTURE_DESCRIPTION_MODE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_MODE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_PICTURE_DESCRIPTION_MODE = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_MODE\",\n    \"rag.docling_picture_description_mode\",\n    os.getenv(\"DOCLING_PICTURE_DESCRIPTION_MODE\", \"\"),\n)\ndocling_picture_description_local = os.getenv(\"DOCLING_PICTURE_DESCRIPTION_LOCAL\", \"\")\ntry:\n    docling_picture_description_local = json.loads(docling_picture_description_local)\nexcept json.JSONDecodeError:\n    docling_picture_description_local = {}",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "docling_picture_description_local",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "docling_picture_description_local = os.getenv(\"DOCLING_PICTURE_DESCRIPTION_LOCAL\", \"\")\ntry:\n    docling_picture_description_local = json.loads(docling_picture_description_local)\nexcept json.JSONDecodeError:\n    docling_picture_description_local = {}\nDOCLING_PICTURE_DESCRIPTION_LOCAL = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_LOCAL\",\n    \"rag.docling_picture_description_local\",\n    docling_picture_description_local,\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_LOCAL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_PICTURE_DESCRIPTION_LOCAL = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_LOCAL\",\n    \"rag.docling_picture_description_local\",\n    docling_picture_description_local,\n)\ndocling_picture_description_api = os.getenv(\"DOCLING_PICTURE_DESCRIPTION_API\", \"\")\ntry:\n    docling_picture_description_api = json.loads(docling_picture_description_api)\nexcept json.JSONDecodeError:\n    docling_picture_description_api = {}",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "docling_picture_description_api",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "docling_picture_description_api = os.getenv(\"DOCLING_PICTURE_DESCRIPTION_API\", \"\")\ntry:\n    docling_picture_description_api = json.loads(docling_picture_description_api)\nexcept json.JSONDecodeError:\n    docling_picture_description_api = {}\nDOCLING_PICTURE_DESCRIPTION_API = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_API\",\n    \"rag.docling_picture_description_api\",\n    docling_picture_description_api,\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCLING_PICTURE_DESCRIPTION_API",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCLING_PICTURE_DESCRIPTION_API = PersistentConfig(\n    \"DOCLING_PICTURE_DESCRIPTION_API\",\n    \"rag.docling_picture_description_api\",\n    docling_picture_description_api,\n)\nDOCUMENT_INTELLIGENCE_ENDPOINT = PersistentConfig(\n    \"DOCUMENT_INTELLIGENCE_ENDPOINT\",\n    \"rag.document_intelligence_endpoint\",\n    os.getenv(\"DOCUMENT_INTELLIGENCE_ENDPOINT\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENT_INTELLIGENCE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCUMENT_INTELLIGENCE_ENDPOINT = PersistentConfig(\n    \"DOCUMENT_INTELLIGENCE_ENDPOINT\",\n    \"rag.document_intelligence_endpoint\",\n    os.getenv(\"DOCUMENT_INTELLIGENCE_ENDPOINT\", \"\"),\n)\nDOCUMENT_INTELLIGENCE_KEY = PersistentConfig(\n    \"DOCUMENT_INTELLIGENCE_KEY\",\n    \"rag.document_intelligence_key\",\n    os.getenv(\"DOCUMENT_INTELLIGENCE_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENT_INTELLIGENCE_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DOCUMENT_INTELLIGENCE_KEY = PersistentConfig(\n    \"DOCUMENT_INTELLIGENCE_KEY\",\n    \"rag.document_intelligence_key\",\n    os.getenv(\"DOCUMENT_INTELLIGENCE_KEY\", \"\"),\n)\nMISTRAL_OCR_API_KEY = PersistentConfig(\n    \"MISTRAL_OCR_API_KEY\",\n    \"rag.mistral_ocr_api_key\",\n    os.getenv(\"MISTRAL_OCR_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MISTRAL_OCR_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MISTRAL_OCR_API_KEY = PersistentConfig(\n    \"MISTRAL_OCR_API_KEY\",\n    \"rag.mistral_ocr_api_key\",\n    os.getenv(\"MISTRAL_OCR_API_KEY\", \"\"),\n)\nBYPASS_EMBEDDING_AND_RETRIEVAL = PersistentConfig(\n    \"BYPASS_EMBEDDING_AND_RETRIEVAL\",\n    \"rag.bypass_embedding_and_retrieval\",\n    os.environ.get(\"BYPASS_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BYPASS_EMBEDDING_AND_RETRIEVAL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BYPASS_EMBEDDING_AND_RETRIEVAL = PersistentConfig(\n    \"BYPASS_EMBEDDING_AND_RETRIEVAL\",\n    \"rag.bypass_embedding_and_retrieval\",\n    os.environ.get(\"BYPASS_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",\n)\nRAG_TOP_K = PersistentConfig(\n    \"RAG_TOP_K\", \"rag.top_k\", int(os.environ.get(\"RAG_TOP_K\", \"3\"))\n)\nRAG_TOP_K_RERANKER = PersistentConfig(\n    \"RAG_TOP_K_RERANKER\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TOP_K",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_TOP_K = PersistentConfig(\n    \"RAG_TOP_K\", \"rag.top_k\", int(os.environ.get(\"RAG_TOP_K\", \"3\"))\n)\nRAG_TOP_K_RERANKER = PersistentConfig(\n    \"RAG_TOP_K_RERANKER\",\n    \"rag.top_k_reranker\",\n    int(os.environ.get(\"RAG_TOP_K_RERANKER\", \"3\")),\n)\nRAG_RELEVANCE_THRESHOLD = PersistentConfig(\n    \"RAG_RELEVANCE_THRESHOLD\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TOP_K_RERANKER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_TOP_K_RERANKER = PersistentConfig(\n    \"RAG_TOP_K_RERANKER\",\n    \"rag.top_k_reranker\",\n    int(os.environ.get(\"RAG_TOP_K_RERANKER\", \"3\")),\n)\nRAG_RELEVANCE_THRESHOLD = PersistentConfig(\n    \"RAG_RELEVANCE_THRESHOLD\",\n    \"rag.relevance_threshold\",\n    float(os.environ.get(\"RAG_RELEVANCE_THRESHOLD\", \"0.0\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RELEVANCE_THRESHOLD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_RELEVANCE_THRESHOLD = PersistentConfig(\n    \"RAG_RELEVANCE_THRESHOLD\",\n    \"rag.relevance_threshold\",\n    float(os.environ.get(\"RAG_RELEVANCE_THRESHOLD\", \"0.0\")),\n)\nRAG_HYBRID_BM25_WEIGHT = PersistentConfig(\n    \"RAG_HYBRID_BM25_WEIGHT\",\n    \"rag.hybrid_bm25_weight\",\n    float(os.environ.get(\"RAG_HYBRID_BM25_WEIGHT\", \"0.5\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_HYBRID_BM25_WEIGHT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_HYBRID_BM25_WEIGHT = PersistentConfig(\n    \"RAG_HYBRID_BM25_WEIGHT\",\n    \"rag.hybrid_bm25_weight\",\n    float(os.environ.get(\"RAG_HYBRID_BM25_WEIGHT\", \"0.5\")),\n)\nENABLE_RAG_HYBRID_SEARCH = PersistentConfig(\n    \"ENABLE_RAG_HYBRID_SEARCH\",\n    \"rag.enable_hybrid_search\",\n    os.environ.get(\"ENABLE_RAG_HYBRID_SEARCH\", \"\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_RAG_HYBRID_SEARCH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_RAG_HYBRID_SEARCH = PersistentConfig(\n    \"ENABLE_RAG_HYBRID_SEARCH\",\n    \"rag.enable_hybrid_search\",\n    os.environ.get(\"ENABLE_RAG_HYBRID_SEARCH\", \"\").lower() == \"true\",\n)\nRAG_FULL_CONTEXT = PersistentConfig(\n    \"RAG_FULL_CONTEXT\",\n    \"rag.full_context\",\n    os.getenv(\"RAG_FULL_CONTEXT\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FULL_CONTEXT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_FULL_CONTEXT = PersistentConfig(\n    \"RAG_FULL_CONTEXT\",\n    \"rag.full_context\",\n    os.getenv(\"RAG_FULL_CONTEXT\", \"False\").lower() == \"true\",\n)\nRAG_FILE_MAX_COUNT = PersistentConfig(\n    \"RAG_FILE_MAX_COUNT\",\n    \"rag.file.max_count\",\n    (\n        int(os.environ.get(\"RAG_FILE_MAX_COUNT\"))",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FILE_MAX_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_FILE_MAX_COUNT = PersistentConfig(\n    \"RAG_FILE_MAX_COUNT\",\n    \"rag.file.max_count\",\n    (\n        int(os.environ.get(\"RAG_FILE_MAX_COUNT\"))\n        if os.environ.get(\"RAG_FILE_MAX_COUNT\")\n        else None\n    ),\n)\nRAG_FILE_MAX_SIZE = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_FILE_MAX_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_FILE_MAX_SIZE = PersistentConfig(\n    \"RAG_FILE_MAX_SIZE\",\n    \"rag.file.max_size\",\n    (\n        int(os.environ.get(\"RAG_FILE_MAX_SIZE\"))\n        if os.environ.get(\"RAG_FILE_MAX_SIZE\")\n        else None\n    ),\n)\nRAG_ALLOWED_FILE_EXTENSIONS = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_ALLOWED_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_ALLOWED_FILE_EXTENSIONS = PersistentConfig(\n    \"RAG_ALLOWED_FILE_EXTENSIONS\",\n    \"rag.file.allowed_extensions\",\n    [\n        ext.strip()\n        for ext in os.environ.get(\"RAG_ALLOWED_FILE_EXTENSIONS\", \"\").split(\",\")\n        if ext.strip()\n    ],\n)\nRAG_EMBEDDING_ENGINE = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_ENGINE = PersistentConfig(\n    \"RAG_EMBEDDING_ENGINE\",\n    \"rag.embedding_engine\",\n    os.environ.get(\"RAG_EMBEDDING_ENGINE\", \"\"),\n)\nPDF_EXTRACT_IMAGES = PersistentConfig(\n    \"PDF_EXTRACT_IMAGES\",\n    \"rag.pdf_extract_images\",\n    os.environ.get(\"PDF_EXTRACT_IMAGES\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PDF_EXTRACT_IMAGES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PDF_EXTRACT_IMAGES = PersistentConfig(\n    \"PDF_EXTRACT_IMAGES\",\n    \"rag.pdf_extract_images\",\n    os.environ.get(\"PDF_EXTRACT_IMAGES\", \"False\").lower() == \"true\",\n)\nRAG_EMBEDDING_MODEL = PersistentConfig(\n    \"RAG_EMBEDDING_MODEL\",\n    \"rag.embedding_model\",\n    os.environ.get(\"RAG_EMBEDDING_MODEL\", \"sentence-transformers/all-MiniLM-L6-v2\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_MODEL = PersistentConfig(\n    \"RAG_EMBEDDING_MODEL\",\n    \"rag.embedding_model\",\n    os.environ.get(\"RAG_EMBEDDING_MODEL\", \"sentence-transformers/all-MiniLM-L6-v2\"),\n)\nlog.info(f\"Embedding model set: {RAG_EMBEDDING_MODEL.value}\")\nRAG_EMBEDDING_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"RAG_EMBEDDING_MODEL_AUTO_UPDATE\", \"True\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_AUTO_UPDATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"RAG_EMBEDDING_MODEL_AUTO_UPDATE\", \"True\").lower() == \"true\"\n)\nRAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE = (\n    os.environ.get(\"RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE\", \"True\").lower() == \"true\"\n)\nRAG_EMBEDDING_BATCH_SIZE = PersistentConfig(\n    \"RAG_EMBEDDING_BATCH_SIZE\",\n    \"rag.embedding_batch_size\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE = (\n    os.environ.get(\"RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE\", \"True\").lower() == \"true\"\n)\nRAG_EMBEDDING_BATCH_SIZE = PersistentConfig(\n    \"RAG_EMBEDDING_BATCH_SIZE\",\n    \"rag.embedding_batch_size\",\n    int(\n        os.environ.get(\"RAG_EMBEDDING_BATCH_SIZE\")\n        or os.environ.get(\"RAG_EMBEDDING_OPENAI_BATCH_SIZE\", \"1\")\n    ),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_BATCH_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_BATCH_SIZE = PersistentConfig(\n    \"RAG_EMBEDDING_BATCH_SIZE\",\n    \"rag.embedding_batch_size\",\n    int(\n        os.environ.get(\"RAG_EMBEDDING_BATCH_SIZE\")\n        or os.environ.get(\"RAG_EMBEDDING_OPENAI_BATCH_SIZE\", \"1\")\n    ),\n)\nRAG_EMBEDDING_QUERY_PREFIX = os.environ.get(\"RAG_EMBEDDING_QUERY_PREFIX\", None)\nRAG_EMBEDDING_CONTENT_PREFIX = os.environ.get(\"RAG_EMBEDDING_CONTENT_PREFIX\", None)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_QUERY_PREFIX",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_QUERY_PREFIX = os.environ.get(\"RAG_EMBEDDING_QUERY_PREFIX\", None)\nRAG_EMBEDDING_CONTENT_PREFIX = os.environ.get(\"RAG_EMBEDDING_CONTENT_PREFIX\", None)\nRAG_EMBEDDING_PREFIX_FIELD_NAME = os.environ.get(\n    \"RAG_EMBEDDING_PREFIX_FIELD_NAME\", None\n)\nRAG_RERANKING_ENGINE = PersistentConfig(\n    \"RAG_RERANKING_ENGINE\",\n    \"rag.reranking_engine\",\n    os.environ.get(\"RAG_RERANKING_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_CONTENT_PREFIX",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_CONTENT_PREFIX = os.environ.get(\"RAG_EMBEDDING_CONTENT_PREFIX\", None)\nRAG_EMBEDDING_PREFIX_FIELD_NAME = os.environ.get(\n    \"RAG_EMBEDDING_PREFIX_FIELD_NAME\", None\n)\nRAG_RERANKING_ENGINE = PersistentConfig(\n    \"RAG_RERANKING_ENGINE\",\n    \"rag.reranking_engine\",\n    os.environ.get(\"RAG_RERANKING_ENGINE\", \"\"),\n)\nRAG_RERANKING_MODEL = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EMBEDDING_PREFIX_FIELD_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EMBEDDING_PREFIX_FIELD_NAME = os.environ.get(\n    \"RAG_EMBEDDING_PREFIX_FIELD_NAME\", None\n)\nRAG_RERANKING_ENGINE = PersistentConfig(\n    \"RAG_RERANKING_ENGINE\",\n    \"rag.reranking_engine\",\n    os.environ.get(\"RAG_RERANKING_ENGINE\", \"\"),\n)\nRAG_RERANKING_MODEL = PersistentConfig(\n    \"RAG_RERANKING_MODEL\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_RERANKING_ENGINE = PersistentConfig(\n    \"RAG_RERANKING_ENGINE\",\n    \"rag.reranking_engine\",\n    os.environ.get(\"RAG_RERANKING_ENGINE\", \"\"),\n)\nRAG_RERANKING_MODEL = PersistentConfig(\n    \"RAG_RERANKING_MODEL\",\n    \"rag.reranking_model\",\n    os.environ.get(\"RAG_RERANKING_MODEL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_RERANKING_MODEL = PersistentConfig(\n    \"RAG_RERANKING_MODEL\",\n    \"rag.reranking_model\",\n    os.environ.get(\"RAG_RERANKING_MODEL\", \"\"),\n)\nif RAG_RERANKING_MODEL.value != \"\":\n    log.info(f\"Reranking model set: {RAG_RERANKING_MODEL.value}\")\nRAG_RERANKING_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"RAG_RERANKING_MODEL_AUTO_UPDATE\", \"True\").lower() == \"true\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_AUTO_UPDATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_RERANKING_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"RAG_RERANKING_MODEL_AUTO_UPDATE\", \"True\").lower() == \"true\"\n)\nRAG_RERANKING_MODEL_TRUST_REMOTE_CODE = (\n    os.environ.get(\"RAG_RERANKING_MODEL_TRUST_REMOTE_CODE\", \"True\").lower() == \"true\"\n)\nRAG_EXTERNAL_RERANKER_URL = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_URL\",\n    \"rag.external_reranker_url\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_RERANKING_MODEL_TRUST_REMOTE_CODE = (\n    os.environ.get(\"RAG_RERANKING_MODEL_TRUST_REMOTE_CODE\", \"True\").lower() == \"true\"\n)\nRAG_EXTERNAL_RERANKER_URL = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_URL\",\n    \"rag.external_reranker_url\",\n    os.environ.get(\"RAG_EXTERNAL_RERANKER_URL\", \"\"),\n)\nRAG_EXTERNAL_RERANKER_API_KEY = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_API_KEY\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EXTERNAL_RERANKER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EXTERNAL_RERANKER_URL = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_URL\",\n    \"rag.external_reranker_url\",\n    os.environ.get(\"RAG_EXTERNAL_RERANKER_URL\", \"\"),\n)\nRAG_EXTERNAL_RERANKER_API_KEY = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_API_KEY\",\n    \"rag.external_reranker_api_key\",\n    os.environ.get(\"RAG_EXTERNAL_RERANKER_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_EXTERNAL_RERANKER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_EXTERNAL_RERANKER_API_KEY = PersistentConfig(\n    \"RAG_EXTERNAL_RERANKER_API_KEY\",\n    \"rag.external_reranker_api_key\",\n    os.environ.get(\"RAG_EXTERNAL_RERANKER_API_KEY\", \"\"),\n)\nRAG_TEXT_SPLITTER = PersistentConfig(\n    \"RAG_TEXT_SPLITTER\",\n    \"rag.text_splitter\",\n    os.environ.get(\"RAG_TEXT_SPLITTER\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TEXT_SPLITTER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_TEXT_SPLITTER = PersistentConfig(\n    \"RAG_TEXT_SPLITTER\",\n    \"rag.text_splitter\",\n    os.environ.get(\"RAG_TEXT_SPLITTER\", \"\"),\n)\nTIKTOKEN_CACHE_DIR = os.environ.get(\"TIKTOKEN_CACHE_DIR\", f\"{CACHE_DIR}/tiktoken\")\nTIKTOKEN_ENCODING_NAME = PersistentConfig(\n    \"TIKTOKEN_ENCODING_NAME\",\n    \"rag.tiktoken_encoding_name\",\n    os.environ.get(\"TIKTOKEN_ENCODING_NAME\", \"cl100k_base\"),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TIKTOKEN_CACHE_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TIKTOKEN_CACHE_DIR = os.environ.get(\"TIKTOKEN_CACHE_DIR\", f\"{CACHE_DIR}/tiktoken\")\nTIKTOKEN_ENCODING_NAME = PersistentConfig(\n    \"TIKTOKEN_ENCODING_NAME\",\n    \"rag.tiktoken_encoding_name\",\n    os.environ.get(\"TIKTOKEN_ENCODING_NAME\", \"cl100k_base\"),\n)\nCHUNK_SIZE = PersistentConfig(\n    \"CHUNK_SIZE\", \"rag.chunk_size\", int(os.environ.get(\"CHUNK_SIZE\", \"1000\"))\n)\nCHUNK_OVERLAP = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TIKTOKEN_ENCODING_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TIKTOKEN_ENCODING_NAME = PersistentConfig(\n    \"TIKTOKEN_ENCODING_NAME\",\n    \"rag.tiktoken_encoding_name\",\n    os.environ.get(\"TIKTOKEN_ENCODING_NAME\", \"cl100k_base\"),\n)\nCHUNK_SIZE = PersistentConfig(\n    \"CHUNK_SIZE\", \"rag.chunk_size\", int(os.environ.get(\"CHUNK_SIZE\", \"1000\"))\n)\nCHUNK_OVERLAP = PersistentConfig(\n    \"CHUNK_OVERLAP\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHUNK_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CHUNK_SIZE = PersistentConfig(\n    \"CHUNK_SIZE\", \"rag.chunk_size\", int(os.environ.get(\"CHUNK_SIZE\", \"1000\"))\n)\nCHUNK_OVERLAP = PersistentConfig(\n    \"CHUNK_OVERLAP\",\n    \"rag.chunk_overlap\",\n    int(os.environ.get(\"CHUNK_OVERLAP\", \"100\")),\n)\nDEFAULT_RAG_TEMPLATE = \"\"\"### Task:\nRespond to the user query using the provided context, incorporating inline citations in the format [id] **only when the <source> tag includes an explicit id attribute** (e.g., <source id=\"1\">).",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "CHUNK_OVERLAP",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "CHUNK_OVERLAP = PersistentConfig(\n    \"CHUNK_OVERLAP\",\n    \"rag.chunk_overlap\",\n    int(os.environ.get(\"CHUNK_OVERLAP\", \"100\")),\n)\nDEFAULT_RAG_TEMPLATE = \"\"\"### Task:\nRespond to the user query using the provided context, incorporating inline citations in the format [id] **only when the <source> tag includes an explicit id attribute** (e.g., <source id=\"1\">).\n### Guidelines:\n- If you don't know the answer, clearly state that.\n- If uncertain, ask the user for clarification.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RAG_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEFAULT_RAG_TEMPLATE = \"\"\"### Task:\nRespond to the user query using the provided context, incorporating inline citations in the format [id] **only when the <source> tag includes an explicit id attribute** (e.g., <source id=\"1\">).\n### Guidelines:\n- If you don't know the answer, clearly state that.\n- If uncertain, ask the user for clarification.\n- Respond in the same language as the user's query.\n- If the context is unreadable or of poor quality, inform the user and provide the best possible answer.\n- If the answer isn't present in the context but you possess the knowledge, explain this to the user and provide the answer using your own understanding.\n- **Only include inline citations using [id] (e.g., [1], [2]) when the <source> tag includes an id attribute.**\n- Do not cite if the <source> tag does not contain an id attribute.",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_TEMPLATE = PersistentConfig(\n    \"RAG_TEMPLATE\",\n    \"rag.template\",\n    os.environ.get(\"RAG_TEMPLATE\", DEFAULT_RAG_TEMPLATE),\n)\nRAG_OPENAI_API_BASE_URL = PersistentConfig(\n    \"RAG_OPENAI_API_BASE_URL\",\n    \"rag.openai_api_base_url\",\n    os.getenv(\"RAG_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_OPENAI_API_BASE_URL = PersistentConfig(\n    \"RAG_OPENAI_API_BASE_URL\",\n    \"rag.openai_api_base_url\",\n    os.getenv(\"RAG_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)\nRAG_OPENAI_API_KEY = PersistentConfig(\n    \"RAG_OPENAI_API_KEY\",\n    \"rag.openai_api_key\",\n    os.getenv(\"RAG_OPENAI_API_KEY\", OPENAI_API_KEY),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_OPENAI_API_KEY = PersistentConfig(\n    \"RAG_OPENAI_API_KEY\",\n    \"rag.openai_api_key\",\n    os.getenv(\"RAG_OPENAI_API_KEY\", OPENAI_API_KEY),\n)\nRAG_AZURE_OPENAI_BASE_URL = PersistentConfig(\n    \"RAG_AZURE_OPENAI_BASE_URL\",\n    \"rag.azure_openai.base_url\",\n    os.getenv(\"RAG_AZURE_OPENAI_BASE_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_AZURE_OPENAI_BASE_URL = PersistentConfig(\n    \"RAG_AZURE_OPENAI_BASE_URL\",\n    \"rag.azure_openai.base_url\",\n    os.getenv(\"RAG_AZURE_OPENAI_BASE_URL\", \"\"),\n)\nRAG_AZURE_OPENAI_API_KEY = PersistentConfig(\n    \"RAG_AZURE_OPENAI_API_KEY\",\n    \"rag.azure_openai.api_key\",\n    os.getenv(\"RAG_AZURE_OPENAI_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_AZURE_OPENAI_API_KEY = PersistentConfig(\n    \"RAG_AZURE_OPENAI_API_KEY\",\n    \"rag.azure_openai.api_key\",\n    os.getenv(\"RAG_AZURE_OPENAI_API_KEY\", \"\"),\n)\nRAG_AZURE_OPENAI_API_VERSION = PersistentConfig(\n    \"RAG_AZURE_OPENAI_API_VERSION\",\n    \"rag.azure_openai.api_version\",\n    os.getenv(\"RAG_AZURE_OPENAI_API_VERSION\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_AZURE_OPENAI_API_VERSION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_AZURE_OPENAI_API_VERSION = PersistentConfig(\n    \"RAG_AZURE_OPENAI_API_VERSION\",\n    \"rag.azure_openai.api_version\",\n    os.getenv(\"RAG_AZURE_OPENAI_API_VERSION\", \"\"),\n)\nRAG_OLLAMA_BASE_URL = PersistentConfig(\n    \"RAG_OLLAMA_BASE_URL\",\n    \"rag.ollama.url\",\n    os.getenv(\"RAG_OLLAMA_BASE_URL\", OLLAMA_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OLLAMA_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_OLLAMA_BASE_URL = PersistentConfig(\n    \"RAG_OLLAMA_BASE_URL\",\n    \"rag.ollama.url\",\n    os.getenv(\"RAG_OLLAMA_BASE_URL\", OLLAMA_BASE_URL),\n)\nRAG_OLLAMA_API_KEY = PersistentConfig(\n    \"RAG_OLLAMA_API_KEY\",\n    \"rag.ollama.key\",\n    os.getenv(\"RAG_OLLAMA_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "RAG_OLLAMA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "RAG_OLLAMA_API_KEY = PersistentConfig(\n    \"RAG_OLLAMA_API_KEY\",\n    \"rag.ollama.key\",\n    os.getenv(\"RAG_OLLAMA_API_KEY\", \"\"),\n)\nENABLE_RAG_LOCAL_WEB_FETCH = (\n    os.getenv(\"ENABLE_RAG_LOCAL_WEB_FETCH\", \"False\").lower() == \"true\"\n)\nYOUTUBE_LOADER_LANGUAGE = PersistentConfig(\n    \"YOUTUBE_LOADER_LANGUAGE\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_RAG_LOCAL_WEB_FETCH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_RAG_LOCAL_WEB_FETCH = (\n    os.getenv(\"ENABLE_RAG_LOCAL_WEB_FETCH\", \"False\").lower() == \"true\"\n)\nYOUTUBE_LOADER_LANGUAGE = PersistentConfig(\n    \"YOUTUBE_LOADER_LANGUAGE\",\n    \"rag.youtube_loader_language\",\n    os.getenv(\"YOUTUBE_LOADER_LANGUAGE\", \"en\").split(\",\"),\n)\nYOUTUBE_LOADER_PROXY_URL = PersistentConfig(\n    \"YOUTUBE_LOADER_PROXY_URL\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "YOUTUBE_LOADER_LANGUAGE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "YOUTUBE_LOADER_LANGUAGE = PersistentConfig(\n    \"YOUTUBE_LOADER_LANGUAGE\",\n    \"rag.youtube_loader_language\",\n    os.getenv(\"YOUTUBE_LOADER_LANGUAGE\", \"en\").split(\",\"),\n)\nYOUTUBE_LOADER_PROXY_URL = PersistentConfig(\n    \"YOUTUBE_LOADER_PROXY_URL\",\n    \"rag.youtube_loader_proxy_url\",\n    os.getenv(\"YOUTUBE_LOADER_PROXY_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "YOUTUBE_LOADER_PROXY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "YOUTUBE_LOADER_PROXY_URL = PersistentConfig(\n    \"YOUTUBE_LOADER_PROXY_URL\",\n    \"rag.youtube_loader_proxy_url\",\n    os.getenv(\"YOUTUBE_LOADER_PROXY_URL\", \"\"),\n)\n####################################\n# Web Search (RAG)\n####################################\nENABLE_WEB_SEARCH = PersistentConfig(\n    \"ENABLE_WEB_SEARCH\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_WEB_SEARCH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_WEB_SEARCH = PersistentConfig(\n    \"ENABLE_WEB_SEARCH\",\n    \"rag.web.search.enable\",\n    os.getenv(\"ENABLE_WEB_SEARCH\", \"False\").lower() == \"true\",\n)\nWEB_SEARCH_ENGINE = PersistentConfig(\n    \"WEB_SEARCH_ENGINE\",\n    \"rag.web.search.engine\",\n    os.getenv(\"WEB_SEARCH_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_SEARCH_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_SEARCH_ENGINE = PersistentConfig(\n    \"WEB_SEARCH_ENGINE\",\n    \"rag.web.search.engine\",\n    os.getenv(\"WEB_SEARCH_ENGINE\", \"\"),\n)\nBYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = PersistentConfig(\n    \"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\",\n    \"rag.web.search.bypass_embedding_and_retrieval\",\n    os.getenv(\"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = PersistentConfig(\n    \"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\",\n    \"rag.web.search.bypass_embedding_and_retrieval\",\n    os.getenv(\"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",\n)\nBYPASS_WEB_SEARCH_WEB_LOADER = PersistentConfig(\n    \"BYPASS_WEB_SEARCH_WEB_LOADER\",\n    \"rag.web.search.bypass_web_loader\",\n    os.getenv(\"BYPASS_WEB_SEARCH_WEB_LOADER\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BYPASS_WEB_SEARCH_WEB_LOADER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BYPASS_WEB_SEARCH_WEB_LOADER = PersistentConfig(\n    \"BYPASS_WEB_SEARCH_WEB_LOADER\",\n    \"rag.web.search.bypass_web_loader\",\n    os.getenv(\"BYPASS_WEB_SEARCH_WEB_LOADER\", \"False\").lower() == \"true\",\n)\nWEB_SEARCH_RESULT_COUNT = PersistentConfig(\n    \"WEB_SEARCH_RESULT_COUNT\",\n    \"rag.web.search.result_count\",\n    int(os.getenv(\"WEB_SEARCH_RESULT_COUNT\", \"3\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_SEARCH_RESULT_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_SEARCH_RESULT_COUNT = PersistentConfig(\n    \"WEB_SEARCH_RESULT_COUNT\",\n    \"rag.web.search.result_count\",\n    int(os.getenv(\"WEB_SEARCH_RESULT_COUNT\", \"3\")),\n)\n# You can provide a list of your own websites to filter after performing a web search.\n# This ensures the highest level of safety and reliability of the information sources.\nWEB_SEARCH_DOMAIN_FILTER_LIST = PersistentConfig(\n    \"WEB_SEARCH_DOMAIN_FILTER_LIST\",\n    \"rag.web.search.domain.filter_list\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_SEARCH_DOMAIN_FILTER_LIST",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_SEARCH_DOMAIN_FILTER_LIST = PersistentConfig(\n    \"WEB_SEARCH_DOMAIN_FILTER_LIST\",\n    \"rag.web.search.domain.filter_list\",\n    [\n        # \"wikipedia.com\",\n        # \"wikimedia.org\",\n        # \"wikidata.org\",\n    ],\n)\nWEB_SEARCH_CONCURRENT_REQUESTS = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_SEARCH_CONCURRENT_REQUESTS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_SEARCH_CONCURRENT_REQUESTS = PersistentConfig(\n    \"WEB_SEARCH_CONCURRENT_REQUESTS\",\n    \"rag.web.search.concurrent_requests\",\n    int(os.getenv(\"WEB_SEARCH_CONCURRENT_REQUESTS\", \"10\")),\n)\nWEB_LOADER_ENGINE = PersistentConfig(\n    \"WEB_LOADER_ENGINE\",\n    \"rag.web.loader.engine\",\n    os.environ.get(\"WEB_LOADER_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_LOADER_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_LOADER_ENGINE = PersistentConfig(\n    \"WEB_LOADER_ENGINE\",\n    \"rag.web.loader.engine\",\n    os.environ.get(\"WEB_LOADER_ENGINE\", \"\"),\n)\nENABLE_WEB_LOADER_SSL_VERIFICATION = PersistentConfig(\n    \"ENABLE_WEB_LOADER_SSL_VERIFICATION\",\n    \"rag.web.loader.ssl_verification\",\n    os.environ.get(\"ENABLE_WEB_LOADER_SSL_VERIFICATION\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_WEB_LOADER_SSL_VERIFICATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_WEB_LOADER_SSL_VERIFICATION = PersistentConfig(\n    \"ENABLE_WEB_LOADER_SSL_VERIFICATION\",\n    \"rag.web.loader.ssl_verification\",\n    os.environ.get(\"ENABLE_WEB_LOADER_SSL_VERIFICATION\", \"True\").lower() == \"true\",\n)\nWEB_SEARCH_TRUST_ENV = PersistentConfig(\n    \"WEB_SEARCH_TRUST_ENV\",\n    \"rag.web.search.trust_env\",\n    os.getenv(\"WEB_SEARCH_TRUST_ENV\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WEB_SEARCH_TRUST_ENV",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WEB_SEARCH_TRUST_ENV = PersistentConfig(\n    \"WEB_SEARCH_TRUST_ENV\",\n    \"rag.web.search.trust_env\",\n    os.getenv(\"WEB_SEARCH_TRUST_ENV\", \"False\").lower() == \"true\",\n)\nSEARXNG_QUERY_URL = PersistentConfig(\n    \"SEARXNG_QUERY_URL\",\n    \"rag.web.search.searxng_query_url\",\n    os.getenv(\"SEARXNG_QUERY_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SEARXNG_QUERY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SEARXNG_QUERY_URL = PersistentConfig(\n    \"SEARXNG_QUERY_URL\",\n    \"rag.web.search.searxng_query_url\",\n    os.getenv(\"SEARXNG_QUERY_URL\", \"\"),\n)\nYACY_QUERY_URL = PersistentConfig(\n    \"YACY_QUERY_URL\",\n    \"rag.web.search.yacy_query_url\",\n    os.getenv(\"YACY_QUERY_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "YACY_QUERY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "YACY_QUERY_URL = PersistentConfig(\n    \"YACY_QUERY_URL\",\n    \"rag.web.search.yacy_query_url\",\n    os.getenv(\"YACY_QUERY_URL\", \"\"),\n)\nYACY_USERNAME = PersistentConfig(\n    \"YACY_USERNAME\",\n    \"rag.web.search.yacy_username\",\n    os.getenv(\"YACY_USERNAME\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "YACY_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "YACY_USERNAME = PersistentConfig(\n    \"YACY_USERNAME\",\n    \"rag.web.search.yacy_username\",\n    os.getenv(\"YACY_USERNAME\", \"\"),\n)\nYACY_PASSWORD = PersistentConfig(\n    \"YACY_PASSWORD\",\n    \"rag.web.search.yacy_password\",\n    os.getenv(\"YACY_PASSWORD\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "YACY_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "YACY_PASSWORD = PersistentConfig(\n    \"YACY_PASSWORD\",\n    \"rag.web.search.yacy_password\",\n    os.getenv(\"YACY_PASSWORD\", \"\"),\n)\nGOOGLE_PSE_API_KEY = PersistentConfig(\n    \"GOOGLE_PSE_API_KEY\",\n    \"rag.web.search.google_pse_api_key\",\n    os.getenv(\"GOOGLE_PSE_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_PSE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_PSE_API_KEY = PersistentConfig(\n    \"GOOGLE_PSE_API_KEY\",\n    \"rag.web.search.google_pse_api_key\",\n    os.getenv(\"GOOGLE_PSE_API_KEY\", \"\"),\n)\nGOOGLE_PSE_ENGINE_ID = PersistentConfig(\n    \"GOOGLE_PSE_ENGINE_ID\",\n    \"rag.web.search.google_pse_engine_id\",\n    os.getenv(\"GOOGLE_PSE_ENGINE_ID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "GOOGLE_PSE_ENGINE_ID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "GOOGLE_PSE_ENGINE_ID = PersistentConfig(\n    \"GOOGLE_PSE_ENGINE_ID\",\n    \"rag.web.search.google_pse_engine_id\",\n    os.getenv(\"GOOGLE_PSE_ENGINE_ID\", \"\"),\n)\nBRAVE_SEARCH_API_KEY = PersistentConfig(\n    \"BRAVE_SEARCH_API_KEY\",\n    \"rag.web.search.brave_search_api_key\",\n    os.getenv(\"BRAVE_SEARCH_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BRAVE_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BRAVE_SEARCH_API_KEY = PersistentConfig(\n    \"BRAVE_SEARCH_API_KEY\",\n    \"rag.web.search.brave_search_api_key\",\n    os.getenv(\"BRAVE_SEARCH_API_KEY\", \"\"),\n)\nKAGI_SEARCH_API_KEY = PersistentConfig(\n    \"KAGI_SEARCH_API_KEY\",\n    \"rag.web.search.kagi_search_api_key\",\n    os.getenv(\"KAGI_SEARCH_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "KAGI_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "KAGI_SEARCH_API_KEY = PersistentConfig(\n    \"KAGI_SEARCH_API_KEY\",\n    \"rag.web.search.kagi_search_api_key\",\n    os.getenv(\"KAGI_SEARCH_API_KEY\", \"\"),\n)\nMOJEEK_SEARCH_API_KEY = PersistentConfig(\n    \"MOJEEK_SEARCH_API_KEY\",\n    \"rag.web.search.mojeek_search_api_key\",\n    os.getenv(\"MOJEEK_SEARCH_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MOJEEK_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "MOJEEK_SEARCH_API_KEY = PersistentConfig(\n    \"MOJEEK_SEARCH_API_KEY\",\n    \"rag.web.search.mojeek_search_api_key\",\n    os.getenv(\"MOJEEK_SEARCH_API_KEY\", \"\"),\n)\nBOCHA_SEARCH_API_KEY = PersistentConfig(\n    \"BOCHA_SEARCH_API_KEY\",\n    \"rag.web.search.bocha_search_api_key\",\n    os.getenv(\"BOCHA_SEARCH_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BOCHA_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BOCHA_SEARCH_API_KEY = PersistentConfig(\n    \"BOCHA_SEARCH_API_KEY\",\n    \"rag.web.search.bocha_search_api_key\",\n    os.getenv(\"BOCHA_SEARCH_API_KEY\", \"\"),\n)\nSERPSTACK_API_KEY = PersistentConfig(\n    \"SERPSTACK_API_KEY\",\n    \"rag.web.search.serpstack_api_key\",\n    os.getenv(\"SERPSTACK_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPSTACK_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPSTACK_API_KEY = PersistentConfig(\n    \"SERPSTACK_API_KEY\",\n    \"rag.web.search.serpstack_api_key\",\n    os.getenv(\"SERPSTACK_API_KEY\", \"\"),\n)\nSERPSTACK_HTTPS = PersistentConfig(\n    \"SERPSTACK_HTTPS\",\n    \"rag.web.search.serpstack_https\",\n    os.getenv(\"SERPSTACK_HTTPS\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPSTACK_HTTPS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPSTACK_HTTPS = PersistentConfig(\n    \"SERPSTACK_HTTPS\",\n    \"rag.web.search.serpstack_https\",\n    os.getenv(\"SERPSTACK_HTTPS\", \"True\").lower() == \"true\",\n)\nSERPER_API_KEY = PersistentConfig(\n    \"SERPER_API_KEY\",\n    \"rag.web.search.serper_api_key\",\n    os.getenv(\"SERPER_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPER_API_KEY = PersistentConfig(\n    \"SERPER_API_KEY\",\n    \"rag.web.search.serper_api_key\",\n    os.getenv(\"SERPER_API_KEY\", \"\"),\n)\nSERPLY_API_KEY = PersistentConfig(\n    \"SERPLY_API_KEY\",\n    \"rag.web.search.serply_api_key\",\n    os.getenv(\"SERPLY_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPLY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPLY_API_KEY = PersistentConfig(\n    \"SERPLY_API_KEY\",\n    \"rag.web.search.serply_api_key\",\n    os.getenv(\"SERPLY_API_KEY\", \"\"),\n)\nJINA_API_KEY = PersistentConfig(\n    \"JINA_API_KEY\",\n    \"rag.web.search.jina_api_key\",\n    os.getenv(\"JINA_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "JINA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "JINA_API_KEY = PersistentConfig(\n    \"JINA_API_KEY\",\n    \"rag.web.search.jina_api_key\",\n    os.getenv(\"JINA_API_KEY\", \"\"),\n)\nSEARCHAPI_API_KEY = PersistentConfig(\n    \"SEARCHAPI_API_KEY\",\n    \"rag.web.search.searchapi_api_key\",\n    os.getenv(\"SEARCHAPI_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SEARCHAPI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SEARCHAPI_API_KEY = PersistentConfig(\n    \"SEARCHAPI_API_KEY\",\n    \"rag.web.search.searchapi_api_key\",\n    os.getenv(\"SEARCHAPI_API_KEY\", \"\"),\n)\nSEARCHAPI_ENGINE = PersistentConfig(\n    \"SEARCHAPI_ENGINE\",\n    \"rag.web.search.searchapi_engine\",\n    os.getenv(\"SEARCHAPI_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SEARCHAPI_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SEARCHAPI_ENGINE = PersistentConfig(\n    \"SEARCHAPI_ENGINE\",\n    \"rag.web.search.searchapi_engine\",\n    os.getenv(\"SEARCHAPI_ENGINE\", \"\"),\n)\nSERPAPI_API_KEY = PersistentConfig(\n    \"SERPAPI_API_KEY\",\n    \"rag.web.search.serpapi_api_key\",\n    os.getenv(\"SERPAPI_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPAPI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPAPI_API_KEY = PersistentConfig(\n    \"SERPAPI_API_KEY\",\n    \"rag.web.search.serpapi_api_key\",\n    os.getenv(\"SERPAPI_API_KEY\", \"\"),\n)\nSERPAPI_ENGINE = PersistentConfig(\n    \"SERPAPI_ENGINE\",\n    \"rag.web.search.serpapi_engine\",\n    os.getenv(\"SERPAPI_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SERPAPI_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SERPAPI_ENGINE = PersistentConfig(\n    \"SERPAPI_ENGINE\",\n    \"rag.web.search.serpapi_engine\",\n    os.getenv(\"SERPAPI_ENGINE\", \"\"),\n)\nBING_SEARCH_V7_ENDPOINT = PersistentConfig(\n    \"BING_SEARCH_V7_ENDPOINT\",\n    \"rag.web.search.bing_search_v7_endpoint\",\n    os.environ.get(\n        \"BING_SEARCH_V7_ENDPOINT\", \"https://api.bing.microsoft.com/v7.0/search\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BING_SEARCH_V7_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BING_SEARCH_V7_ENDPOINT = PersistentConfig(\n    \"BING_SEARCH_V7_ENDPOINT\",\n    \"rag.web.search.bing_search_v7_endpoint\",\n    os.environ.get(\n        \"BING_SEARCH_V7_ENDPOINT\", \"https://api.bing.microsoft.com/v7.0/search\"\n    ),\n)\nBING_SEARCH_V7_SUBSCRIPTION_KEY = PersistentConfig(\n    \"BING_SEARCH_V7_SUBSCRIPTION_KEY\",\n    \"rag.web.search.bing_search_v7_subscription_key\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "BING_SEARCH_V7_SUBSCRIPTION_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "BING_SEARCH_V7_SUBSCRIPTION_KEY = PersistentConfig(\n    \"BING_SEARCH_V7_SUBSCRIPTION_KEY\",\n    \"rag.web.search.bing_search_v7_subscription_key\",\n    os.environ.get(\"BING_SEARCH_V7_SUBSCRIPTION_KEY\", \"\"),\n)\nEXA_API_KEY = PersistentConfig(\n    \"EXA_API_KEY\",\n    \"rag.web.search.exa_api_key\",\n    os.getenv(\"EXA_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXA_API_KEY = PersistentConfig(\n    \"EXA_API_KEY\",\n    \"rag.web.search.exa_api_key\",\n    os.getenv(\"EXA_API_KEY\", \"\"),\n)\nPERPLEXITY_API_KEY = PersistentConfig(\n    \"PERPLEXITY_API_KEY\",\n    \"rag.web.search.perplexity_api_key\",\n    os.getenv(\"PERPLEXITY_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PERPLEXITY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PERPLEXITY_API_KEY = PersistentConfig(\n    \"PERPLEXITY_API_KEY\",\n    \"rag.web.search.perplexity_api_key\",\n    os.getenv(\"PERPLEXITY_API_KEY\", \"\"),\n)\nPERPLEXITY_MODEL = PersistentConfig(\n    \"PERPLEXITY_MODEL\",\n    \"rag.web.search.perplexity_model\",\n    os.getenv(\"PERPLEXITY_MODEL\", \"sonar\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PERPLEXITY_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PERPLEXITY_MODEL = PersistentConfig(\n    \"PERPLEXITY_MODEL\",\n    \"rag.web.search.perplexity_model\",\n    os.getenv(\"PERPLEXITY_MODEL\", \"sonar\"),\n)\nPERPLEXITY_SEARCH_CONTEXT_USAGE = PersistentConfig(\n    \"PERPLEXITY_SEARCH_CONTEXT_USAGE\",\n    \"rag.web.search.perplexity_search_context_usage\",\n    os.getenv(\"PERPLEXITY_SEARCH_CONTEXT_USAGE\", \"medium\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PERPLEXITY_SEARCH_CONTEXT_USAGE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PERPLEXITY_SEARCH_CONTEXT_USAGE = PersistentConfig(\n    \"PERPLEXITY_SEARCH_CONTEXT_USAGE\",\n    \"rag.web.search.perplexity_search_context_usage\",\n    os.getenv(\"PERPLEXITY_SEARCH_CONTEXT_USAGE\", \"medium\"),\n)\nSOUGOU_API_SID = PersistentConfig(\n    \"SOUGOU_API_SID\",\n    \"rag.web.search.sougou_api_sid\",\n    os.getenv(\"SOUGOU_API_SID\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SOUGOU_API_SID",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SOUGOU_API_SID = PersistentConfig(\n    \"SOUGOU_API_SID\",\n    \"rag.web.search.sougou_api_sid\",\n    os.getenv(\"SOUGOU_API_SID\", \"\"),\n)\nSOUGOU_API_SK = PersistentConfig(\n    \"SOUGOU_API_SK\",\n    \"rag.web.search.sougou_api_sk\",\n    os.getenv(\"SOUGOU_API_SK\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "SOUGOU_API_SK",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "SOUGOU_API_SK = PersistentConfig(\n    \"SOUGOU_API_SK\",\n    \"rag.web.search.sougou_api_sk\",\n    os.getenv(\"SOUGOU_API_SK\", \"\"),\n)\nTAVILY_API_KEY = PersistentConfig(\n    \"TAVILY_API_KEY\",\n    \"rag.web.search.tavily_api_key\",\n    os.getenv(\"TAVILY_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TAVILY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TAVILY_API_KEY = PersistentConfig(\n    \"TAVILY_API_KEY\",\n    \"rag.web.search.tavily_api_key\",\n    os.getenv(\"TAVILY_API_KEY\", \"\"),\n)\nTAVILY_EXTRACT_DEPTH = PersistentConfig(\n    \"TAVILY_EXTRACT_DEPTH\",\n    \"rag.web.search.tavily_extract_depth\",\n    os.getenv(\"TAVILY_EXTRACT_DEPTH\", \"basic\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "TAVILY_EXTRACT_DEPTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "TAVILY_EXTRACT_DEPTH = PersistentConfig(\n    \"TAVILY_EXTRACT_DEPTH\",\n    \"rag.web.search.tavily_extract_depth\",\n    os.getenv(\"TAVILY_EXTRACT_DEPTH\", \"basic\"),\n)\nPLAYWRIGHT_WS_URL = PersistentConfig(\n    \"PLAYWRIGHT_WS_URL\",\n    \"rag.web.loader.playwright_ws_url\",\n    os.environ.get(\"PLAYWRIGHT_WS_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_WS_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PLAYWRIGHT_WS_URL = PersistentConfig(\n    \"PLAYWRIGHT_WS_URL\",\n    \"rag.web.loader.playwright_ws_url\",\n    os.environ.get(\"PLAYWRIGHT_WS_URL\", \"\"),\n)\nPLAYWRIGHT_TIMEOUT = PersistentConfig(\n    \"PLAYWRIGHT_TIMEOUT\",\n    \"rag.web.loader.playwright_timeout\",\n    int(os.environ.get(\"PLAYWRIGHT_TIMEOUT\", \"10000\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "PLAYWRIGHT_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "PLAYWRIGHT_TIMEOUT = PersistentConfig(\n    \"PLAYWRIGHT_TIMEOUT\",\n    \"rag.web.loader.playwright_timeout\",\n    int(os.environ.get(\"PLAYWRIGHT_TIMEOUT\", \"10000\")),\n)\nFIRECRAWL_API_KEY = PersistentConfig(\n    \"FIRECRAWL_API_KEY\",\n    \"rag.web.loader.firecrawl_api_key\",\n    os.environ.get(\"FIRECRAWL_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "FIRECRAWL_API_KEY = PersistentConfig(\n    \"FIRECRAWL_API_KEY\",\n    \"rag.web.loader.firecrawl_api_key\",\n    os.environ.get(\"FIRECRAWL_API_KEY\", \"\"),\n)\nFIRECRAWL_API_BASE_URL = PersistentConfig(\n    \"FIRECRAWL_API_BASE_URL\",\n    \"rag.web.loader.firecrawl_api_url\",\n    os.environ.get(\"FIRECRAWL_API_BASE_URL\", \"https://api.firecrawl.dev\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "FIRECRAWL_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "FIRECRAWL_API_BASE_URL = PersistentConfig(\n    \"FIRECRAWL_API_BASE_URL\",\n    \"rag.web.loader.firecrawl_api_url\",\n    os.environ.get(\"FIRECRAWL_API_BASE_URL\", \"https://api.firecrawl.dev\"),\n)\nEXTERNAL_WEB_SEARCH_URL = PersistentConfig(\n    \"EXTERNAL_WEB_SEARCH_URL\",\n    \"rag.web.search.external_web_search_url\",\n    os.environ.get(\"EXTERNAL_WEB_SEARCH_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_SEARCH_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_WEB_SEARCH_URL = PersistentConfig(\n    \"EXTERNAL_WEB_SEARCH_URL\",\n    \"rag.web.search.external_web_search_url\",\n    os.environ.get(\"EXTERNAL_WEB_SEARCH_URL\", \"\"),\n)\nEXTERNAL_WEB_SEARCH_API_KEY = PersistentConfig(\n    \"EXTERNAL_WEB_SEARCH_API_KEY\",\n    \"rag.web.search.external_web_search_api_key\",\n    os.environ.get(\"EXTERNAL_WEB_SEARCH_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_WEB_SEARCH_API_KEY = PersistentConfig(\n    \"EXTERNAL_WEB_SEARCH_API_KEY\",\n    \"rag.web.search.external_web_search_api_key\",\n    os.environ.get(\"EXTERNAL_WEB_SEARCH_API_KEY\", \"\"),\n)\nEXTERNAL_WEB_LOADER_URL = PersistentConfig(\n    \"EXTERNAL_WEB_LOADER_URL\",\n    \"rag.web.loader.external_web_loader_url\",\n    os.environ.get(\"EXTERNAL_WEB_LOADER_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_LOADER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_WEB_LOADER_URL = PersistentConfig(\n    \"EXTERNAL_WEB_LOADER_URL\",\n    \"rag.web.loader.external_web_loader_url\",\n    os.environ.get(\"EXTERNAL_WEB_LOADER_URL\", \"\"),\n)\nEXTERNAL_WEB_LOADER_API_KEY = PersistentConfig(\n    \"EXTERNAL_WEB_LOADER_API_KEY\",\n    \"rag.web.loader.external_web_loader_api_key\",\n    os.environ.get(\"EXTERNAL_WEB_LOADER_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WEB_LOADER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "EXTERNAL_WEB_LOADER_API_KEY = PersistentConfig(\n    \"EXTERNAL_WEB_LOADER_API_KEY\",\n    \"rag.web.loader.external_web_loader_api_key\",\n    os.environ.get(\"EXTERNAL_WEB_LOADER_API_KEY\", \"\"),\n)\n####################################\n# Images\n####################################\nIMAGE_GENERATION_ENGINE = PersistentConfig(\n    \"IMAGE_GENERATION_ENGINE\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_GENERATION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGE_GENERATION_ENGINE = PersistentConfig(\n    \"IMAGE_GENERATION_ENGINE\",\n    \"image_generation.engine\",\n    os.getenv(\"IMAGE_GENERATION_ENGINE\", \"openai\"),\n)\nENABLE_IMAGE_GENERATION = PersistentConfig(\n    \"ENABLE_IMAGE_GENERATION\",\n    \"image_generation.enable\",\n    os.environ.get(\"ENABLE_IMAGE_GENERATION\", \"\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_IMAGE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_IMAGE_GENERATION = PersistentConfig(\n    \"ENABLE_IMAGE_GENERATION\",\n    \"image_generation.enable\",\n    os.environ.get(\"ENABLE_IMAGE_GENERATION\", \"\").lower() == \"true\",\n)\nENABLE_IMAGE_PROMPT_GENERATION = PersistentConfig(\n    \"ENABLE_IMAGE_PROMPT_GENERATION\",\n    \"image_generation.prompt.enable\",\n    os.environ.get(\"ENABLE_IMAGE_PROMPT_GENERATION\", \"true\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_IMAGE_PROMPT_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_IMAGE_PROMPT_GENERATION = PersistentConfig(\n    \"ENABLE_IMAGE_PROMPT_GENERATION\",\n    \"image_generation.prompt.enable\",\n    os.environ.get(\"ENABLE_IMAGE_PROMPT_GENERATION\", \"true\").lower() == \"true\",\n)\nAUTOMATIC1111_BASE_URL = PersistentConfig(\n    \"AUTOMATIC1111_BASE_URL\",\n    \"image_generation.automatic1111.base_url\",\n    os.getenv(\"AUTOMATIC1111_BASE_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOMATIC1111_BASE_URL = PersistentConfig(\n    \"AUTOMATIC1111_BASE_URL\",\n    \"image_generation.automatic1111.base_url\",\n    os.getenv(\"AUTOMATIC1111_BASE_URL\", \"\"),\n)\nAUTOMATIC1111_API_AUTH = PersistentConfig(\n    \"AUTOMATIC1111_API_AUTH\",\n    \"image_generation.automatic1111.api_auth\",\n    os.getenv(\"AUTOMATIC1111_API_AUTH\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_API_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOMATIC1111_API_AUTH = PersistentConfig(\n    \"AUTOMATIC1111_API_AUTH\",\n    \"image_generation.automatic1111.api_auth\",\n    os.getenv(\"AUTOMATIC1111_API_AUTH\", \"\"),\n)\nAUTOMATIC1111_CFG_SCALE = PersistentConfig(\n    \"AUTOMATIC1111_CFG_SCALE\",\n    \"image_generation.automatic1111.cfg_scale\",\n    (\n        float(os.environ.get(\"AUTOMATIC1111_CFG_SCALE\"))",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_CFG_SCALE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOMATIC1111_CFG_SCALE = PersistentConfig(\n    \"AUTOMATIC1111_CFG_SCALE\",\n    \"image_generation.automatic1111.cfg_scale\",\n    (\n        float(os.environ.get(\"AUTOMATIC1111_CFG_SCALE\"))\n        if os.environ.get(\"AUTOMATIC1111_CFG_SCALE\")\n        else None\n    ),\n)\nAUTOMATIC1111_SAMPLER = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_SAMPLER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOMATIC1111_SAMPLER = PersistentConfig(\n    \"AUTOMATIC1111_SAMPLER\",\n    \"image_generation.automatic1111.sampler\",\n    (\n        os.environ.get(\"AUTOMATIC1111_SAMPLER\")\n        if os.environ.get(\"AUTOMATIC1111_SAMPLER\")\n        else None\n    ),\n)\nAUTOMATIC1111_SCHEDULER = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUTOMATIC1111_SCHEDULER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUTOMATIC1111_SCHEDULER = PersistentConfig(\n    \"AUTOMATIC1111_SCHEDULER\",\n    \"image_generation.automatic1111.scheduler\",\n    (\n        os.environ.get(\"AUTOMATIC1111_SCHEDULER\")\n        if os.environ.get(\"AUTOMATIC1111_SCHEDULER\")\n        else None\n    ),\n)\nCOMFYUI_BASE_URL = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "COMFYUI_BASE_URL = PersistentConfig(\n    \"COMFYUI_BASE_URL\",\n    \"image_generation.comfyui.base_url\",\n    os.getenv(\"COMFYUI_BASE_URL\", \"\"),\n)\nCOMFYUI_API_KEY = PersistentConfig(\n    \"COMFYUI_API_KEY\",\n    \"image_generation.comfyui.api_key\",\n    os.getenv(\"COMFYUI_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "COMFYUI_API_KEY = PersistentConfig(\n    \"COMFYUI_API_KEY\",\n    \"image_generation.comfyui.api_key\",\n    os.getenv(\"COMFYUI_API_KEY\", \"\"),\n)\nCOMFYUI_DEFAULT_WORKFLOW = \"\"\"\n{\n  \"3\": {\n    \"inputs\": {\n      \"seed\": 0,",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_DEFAULT_WORKFLOW",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "COMFYUI_DEFAULT_WORKFLOW = \"\"\"\n{\n  \"3\": {\n    \"inputs\": {\n      \"seed\": 0,\n      \"steps\": 20,\n      \"cfg\": 8,\n      \"sampler_name\": \"euler\",\n      \"scheduler\": \"normal\",\n      \"denoise\": 1,",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_WORKFLOW",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "COMFYUI_WORKFLOW = PersistentConfig(\n    \"COMFYUI_WORKFLOW\",\n    \"image_generation.comfyui.workflow\",\n    os.getenv(\"COMFYUI_WORKFLOW\", COMFYUI_DEFAULT_WORKFLOW),\n)\nCOMFYUI_WORKFLOW_NODES = PersistentConfig(\n    \"COMFYUI_WORKFLOW\",\n    \"image_generation.comfyui.nodes\",\n    [],\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "COMFYUI_WORKFLOW_NODES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "COMFYUI_WORKFLOW_NODES = PersistentConfig(\n    \"COMFYUI_WORKFLOW\",\n    \"image_generation.comfyui.nodes\",\n    [],\n)\nIMAGES_OPENAI_API_BASE_URL = PersistentConfig(\n    \"IMAGES_OPENAI_API_BASE_URL\",\n    \"image_generation.openai.api_base_url\",\n    os.getenv(\"IMAGES_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGES_OPENAI_API_BASE_URL = PersistentConfig(\n    \"IMAGES_OPENAI_API_BASE_URL\",\n    \"image_generation.openai.api_base_url\",\n    os.getenv(\"IMAGES_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)\nIMAGES_OPENAI_API_KEY = PersistentConfig(\n    \"IMAGES_OPENAI_API_KEY\",\n    \"image_generation.openai.api_key\",\n    os.getenv(\"IMAGES_OPENAI_API_KEY\", OPENAI_API_KEY),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGES_OPENAI_API_KEY = PersistentConfig(\n    \"IMAGES_OPENAI_API_KEY\",\n    \"image_generation.openai.api_key\",\n    os.getenv(\"IMAGES_OPENAI_API_KEY\", OPENAI_API_KEY),\n)\nIMAGES_GEMINI_API_BASE_URL = PersistentConfig(\n    \"IMAGES_GEMINI_API_BASE_URL\",\n    \"image_generation.gemini.api_base_url\",\n    os.getenv(\"IMAGES_GEMINI_API_BASE_URL\", GEMINI_API_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_GEMINI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGES_GEMINI_API_BASE_URL = PersistentConfig(\n    \"IMAGES_GEMINI_API_BASE_URL\",\n    \"image_generation.gemini.api_base_url\",\n    os.getenv(\"IMAGES_GEMINI_API_BASE_URL\", GEMINI_API_BASE_URL),\n)\nIMAGES_GEMINI_API_KEY = PersistentConfig(\n    \"IMAGES_GEMINI_API_KEY\",\n    \"image_generation.gemini.api_key\",\n    os.getenv(\"IMAGES_GEMINI_API_KEY\", GEMINI_API_KEY),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGES_GEMINI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGES_GEMINI_API_KEY = PersistentConfig(\n    \"IMAGES_GEMINI_API_KEY\",\n    \"image_generation.gemini.api_key\",\n    os.getenv(\"IMAGES_GEMINI_API_KEY\", GEMINI_API_KEY),\n)\nIMAGE_SIZE = PersistentConfig(\n    \"IMAGE_SIZE\", \"image_generation.size\", os.getenv(\"IMAGE_SIZE\", \"512x512\")\n)\nIMAGE_STEPS = PersistentConfig(\n    \"IMAGE_STEPS\", \"image_generation.steps\", int(os.getenv(\"IMAGE_STEPS\", 50))",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGE_SIZE = PersistentConfig(\n    \"IMAGE_SIZE\", \"image_generation.size\", os.getenv(\"IMAGE_SIZE\", \"512x512\")\n)\nIMAGE_STEPS = PersistentConfig(\n    \"IMAGE_STEPS\", \"image_generation.steps\", int(os.getenv(\"IMAGE_STEPS\", 50))\n)\nIMAGE_GENERATION_MODEL = PersistentConfig(\n    \"IMAGE_GENERATION_MODEL\",\n    \"image_generation.model\",\n    os.getenv(\"IMAGE_GENERATION_MODEL\", \"\"),",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_STEPS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGE_STEPS = PersistentConfig(\n    \"IMAGE_STEPS\", \"image_generation.steps\", int(os.getenv(\"IMAGE_STEPS\", 50))\n)\nIMAGE_GENERATION_MODEL = PersistentConfig(\n    \"IMAGE_GENERATION_MODEL\",\n    \"image_generation.model\",\n    os.getenv(\"IMAGE_GENERATION_MODEL\", \"\"),\n)\n####################################\n# Audio",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "IMAGE_GENERATION_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "IMAGE_GENERATION_MODEL = PersistentConfig(\n    \"IMAGE_GENERATION_MODEL\",\n    \"image_generation.model\",\n    os.getenv(\"IMAGE_GENERATION_MODEL\", \"\"),\n)\n####################################\n# Audio\n####################################\n# Transcription\nWHISPER_MODEL = PersistentConfig(",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WHISPER_MODEL = PersistentConfig(\n    \"WHISPER_MODEL\",\n    \"audio.stt.whisper_model\",\n    os.getenv(\"WHISPER_MODEL\", \"base\"),\n)\nWHISPER_MODEL_DIR = os.getenv(\"WHISPER_MODEL_DIR\", f\"{CACHE_DIR}/whisper/models\")\nWHISPER_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"WHISPER_MODEL_AUTO_UPDATE\", \"\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WHISPER_MODEL_DIR = os.getenv(\"WHISPER_MODEL_DIR\", f\"{CACHE_DIR}/whisper/models\")\nWHISPER_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"WHISPER_MODEL_AUTO_UPDATE\", \"\").lower() == \"true\"\n)\nWHISPER_VAD_FILTER = PersistentConfig(\n    \"WHISPER_VAD_FILTER\",\n    \"audio.stt.whisper_vad_filter\",\n    os.getenv(\"WHISPER_VAD_FILTER\", \"False\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_MODEL_AUTO_UPDATE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WHISPER_MODEL_AUTO_UPDATE = (\n    not OFFLINE_MODE\n    and os.environ.get(\"WHISPER_MODEL_AUTO_UPDATE\", \"\").lower() == \"true\"\n)\nWHISPER_VAD_FILTER = PersistentConfig(\n    \"WHISPER_VAD_FILTER\",\n    \"audio.stt.whisper_vad_filter\",\n    os.getenv(\"WHISPER_VAD_FILTER\", \"False\").lower() == \"true\",\n)\nWHISPER_LANGUAGE = os.getenv(\"WHISPER_LANGUAGE\", \"\").lower() or None",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_VAD_FILTER",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WHISPER_VAD_FILTER = PersistentConfig(\n    \"WHISPER_VAD_FILTER\",\n    \"audio.stt.whisper_vad_filter\",\n    os.getenv(\"WHISPER_VAD_FILTER\", \"False\").lower() == \"true\",\n)\nWHISPER_LANGUAGE = os.getenv(\"WHISPER_LANGUAGE\", \"\").lower() or None\n# Add Deepgram configuration\nDEEPGRAM_API_KEY = PersistentConfig(\n    \"DEEPGRAM_API_KEY\",\n    \"audio.stt.deepgram.api_key\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "WHISPER_LANGUAGE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "WHISPER_LANGUAGE = os.getenv(\"WHISPER_LANGUAGE\", \"\").lower() or None\n# Add Deepgram configuration\nDEEPGRAM_API_KEY = PersistentConfig(\n    \"DEEPGRAM_API_KEY\",\n    \"audio.stt.deepgram.api_key\",\n    os.getenv(\"DEEPGRAM_API_KEY\", \"\"),\n)\nAUDIO_STT_OPENAI_API_BASE_URL = PersistentConfig(\n    \"AUDIO_STT_OPENAI_API_BASE_URL\",\n    \"audio.stt.openai.api_base_url\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "DEEPGRAM_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "DEEPGRAM_API_KEY = PersistentConfig(\n    \"DEEPGRAM_API_KEY\",\n    \"audio.stt.deepgram.api_key\",\n    os.getenv(\"DEEPGRAM_API_KEY\", \"\"),\n)\nAUDIO_STT_OPENAI_API_BASE_URL = PersistentConfig(\n    \"AUDIO_STT_OPENAI_API_BASE_URL\",\n    \"audio.stt.openai.api_base_url\",\n    os.getenv(\"AUDIO_STT_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_OPENAI_API_BASE_URL = PersistentConfig(\n    \"AUDIO_STT_OPENAI_API_BASE_URL\",\n    \"audio.stt.openai.api_base_url\",\n    os.getenv(\"AUDIO_STT_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)\nAUDIO_STT_OPENAI_API_KEY = PersistentConfig(\n    \"AUDIO_STT_OPENAI_API_KEY\",\n    \"audio.stt.openai.api_key\",\n    os.getenv(\"AUDIO_STT_OPENAI_API_KEY\", OPENAI_API_KEY),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_OPENAI_API_KEY = PersistentConfig(\n    \"AUDIO_STT_OPENAI_API_KEY\",\n    \"audio.stt.openai.api_key\",\n    os.getenv(\"AUDIO_STT_OPENAI_API_KEY\", OPENAI_API_KEY),\n)\nAUDIO_STT_ENGINE = PersistentConfig(\n    \"AUDIO_STT_ENGINE\",\n    \"audio.stt.engine\",\n    os.getenv(\"AUDIO_STT_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_ENGINE = PersistentConfig(\n    \"AUDIO_STT_ENGINE\",\n    \"audio.stt.engine\",\n    os.getenv(\"AUDIO_STT_ENGINE\", \"\"),\n)\nAUDIO_STT_MODEL = PersistentConfig(\n    \"AUDIO_STT_MODEL\",\n    \"audio.stt.model\",\n    os.getenv(\"AUDIO_STT_MODEL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_MODEL = PersistentConfig(\n    \"AUDIO_STT_MODEL\",\n    \"audio.stt.model\",\n    os.getenv(\"AUDIO_STT_MODEL\", \"\"),\n)\nAUDIO_STT_AZURE_API_KEY = PersistentConfig(\n    \"AUDIO_STT_AZURE_API_KEY\",\n    \"audio.stt.azure.api_key\",\n    os.getenv(\"AUDIO_STT_AZURE_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_AZURE_API_KEY = PersistentConfig(\n    \"AUDIO_STT_AZURE_API_KEY\",\n    \"audio.stt.azure.api_key\",\n    os.getenv(\"AUDIO_STT_AZURE_API_KEY\", \"\"),\n)\nAUDIO_STT_AZURE_REGION = PersistentConfig(\n    \"AUDIO_STT_AZURE_REGION\",\n    \"audio.stt.azure.region\",\n    os.getenv(\"AUDIO_STT_AZURE_REGION\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_REGION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_AZURE_REGION = PersistentConfig(\n    \"AUDIO_STT_AZURE_REGION\",\n    \"audio.stt.azure.region\",\n    os.getenv(\"AUDIO_STT_AZURE_REGION\", \"\"),\n)\nAUDIO_STT_AZURE_LOCALES = PersistentConfig(\n    \"AUDIO_STT_AZURE_LOCALES\",\n    \"audio.stt.azure.locales\",\n    os.getenv(\"AUDIO_STT_AZURE_LOCALES\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_LOCALES",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_AZURE_LOCALES = PersistentConfig(\n    \"AUDIO_STT_AZURE_LOCALES\",\n    \"audio.stt.azure.locales\",\n    os.getenv(\"AUDIO_STT_AZURE_LOCALES\", \"\"),\n)\nAUDIO_STT_AZURE_BASE_URL = PersistentConfig(\n    \"AUDIO_STT_AZURE_BASE_URL\",\n    \"audio.stt.azure.base_url\",\n    os.getenv(\"AUDIO_STT_AZURE_BASE_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_AZURE_BASE_URL = PersistentConfig(\n    \"AUDIO_STT_AZURE_BASE_URL\",\n    \"audio.stt.azure.base_url\",\n    os.getenv(\"AUDIO_STT_AZURE_BASE_URL\", \"\"),\n)\nAUDIO_STT_AZURE_MAX_SPEAKERS = PersistentConfig(\n    \"AUDIO_STT_AZURE_MAX_SPEAKERS\",\n    \"audio.stt.azure.max_speakers\",\n    os.getenv(\"AUDIO_STT_AZURE_MAX_SPEAKERS\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_STT_AZURE_MAX_SPEAKERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_STT_AZURE_MAX_SPEAKERS = PersistentConfig(\n    \"AUDIO_STT_AZURE_MAX_SPEAKERS\",\n    \"audio.stt.azure.max_speakers\",\n    os.getenv(\"AUDIO_STT_AZURE_MAX_SPEAKERS\", \"\"),\n)\nAUDIO_TTS_OPENAI_API_BASE_URL = PersistentConfig(\n    \"AUDIO_TTS_OPENAI_API_BASE_URL\",\n    \"audio.tts.openai.api_base_url\",\n    os.getenv(\"AUDIO_TTS_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_OPENAI_API_BASE_URL = PersistentConfig(\n    \"AUDIO_TTS_OPENAI_API_BASE_URL\",\n    \"audio.tts.openai.api_base_url\",\n    os.getenv(\"AUDIO_TTS_OPENAI_API_BASE_URL\", OPENAI_API_BASE_URL),\n)\nAUDIO_TTS_OPENAI_API_KEY = PersistentConfig(\n    \"AUDIO_TTS_OPENAI_API_KEY\",\n    \"audio.tts.openai.api_key\",\n    os.getenv(\"AUDIO_TTS_OPENAI_API_KEY\", OPENAI_API_KEY),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_OPENAI_API_KEY = PersistentConfig(\n    \"AUDIO_TTS_OPENAI_API_KEY\",\n    \"audio.tts.openai.api_key\",\n    os.getenv(\"AUDIO_TTS_OPENAI_API_KEY\", OPENAI_API_KEY),\n)\nAUDIO_TTS_API_KEY = PersistentConfig(\n    \"AUDIO_TTS_API_KEY\",\n    \"audio.tts.api_key\",\n    os.getenv(\"AUDIO_TTS_API_KEY\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_API_KEY = PersistentConfig(\n    \"AUDIO_TTS_API_KEY\",\n    \"audio.tts.api_key\",\n    os.getenv(\"AUDIO_TTS_API_KEY\", \"\"),\n)\nAUDIO_TTS_ENGINE = PersistentConfig(\n    \"AUDIO_TTS_ENGINE\",\n    \"audio.tts.engine\",\n    os.getenv(\"AUDIO_TTS_ENGINE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_ENGINE = PersistentConfig(\n    \"AUDIO_TTS_ENGINE\",\n    \"audio.tts.engine\",\n    os.getenv(\"AUDIO_TTS_ENGINE\", \"\"),\n)\nAUDIO_TTS_MODEL = PersistentConfig(\n    \"AUDIO_TTS_MODEL\",\n    \"audio.tts.model\",\n    os.getenv(\"AUDIO_TTS_MODEL\", \"tts-1\"),  # OpenAI default model\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_MODEL = PersistentConfig(\n    \"AUDIO_TTS_MODEL\",\n    \"audio.tts.model\",\n    os.getenv(\"AUDIO_TTS_MODEL\", \"tts-1\"),  # OpenAI default model\n)\nAUDIO_TTS_VOICE = PersistentConfig(\n    \"AUDIO_TTS_VOICE\",\n    \"audio.tts.voice\",\n    os.getenv(\"AUDIO_TTS_VOICE\", \"alloy\"),  # OpenAI default voice\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_VOICE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_VOICE = PersistentConfig(\n    \"AUDIO_TTS_VOICE\",\n    \"audio.tts.voice\",\n    os.getenv(\"AUDIO_TTS_VOICE\", \"alloy\"),  # OpenAI default voice\n)\nAUDIO_TTS_SPLIT_ON = PersistentConfig(\n    \"AUDIO_TTS_SPLIT_ON\",\n    \"audio.tts.split_on\",\n    os.getenv(\"AUDIO_TTS_SPLIT_ON\", \"punctuation\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_SPLIT_ON",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_SPLIT_ON = PersistentConfig(\n    \"AUDIO_TTS_SPLIT_ON\",\n    \"audio.tts.split_on\",\n    os.getenv(\"AUDIO_TTS_SPLIT_ON\", \"punctuation\"),\n)\nAUDIO_TTS_AZURE_SPEECH_REGION = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_REGION\",\n    \"audio.tts.azure.speech_region\",\n    os.getenv(\"AUDIO_TTS_AZURE_SPEECH_REGION\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_REGION",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_AZURE_SPEECH_REGION = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_REGION\",\n    \"audio.tts.azure.speech_region\",\n    os.getenv(\"AUDIO_TTS_AZURE_SPEECH_REGION\", \"\"),\n)\nAUDIO_TTS_AZURE_SPEECH_BASE_URL = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_BASE_URL\",\n    \"audio.tts.azure.speech_base_url\",\n    os.getenv(\"AUDIO_TTS_AZURE_SPEECH_BASE_URL\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_AZURE_SPEECH_BASE_URL = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_BASE_URL\",\n    \"audio.tts.azure.speech_base_url\",\n    os.getenv(\"AUDIO_TTS_AZURE_SPEECH_BASE_URL\", \"\"),\n)\nAUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\",\n    \"audio.tts.azure.speech_output_format\",\n    os.getenv(\n        \"AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\", \"audio-24khz-160kbitrate-mono-mp3\"",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT = PersistentConfig(\n    \"AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\",\n    \"audio.tts.azure.speech_output_format\",\n    os.getenv(\n        \"AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\", \"audio-24khz-160kbitrate-mono-mp3\"\n    ),\n)\n####################################\n# LDAP\n####################################",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "ENABLE_LDAP",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "ENABLE_LDAP = PersistentConfig(\n    \"ENABLE_LDAP\",\n    \"ldap.enable\",\n    os.environ.get(\"ENABLE_LDAP\", \"false\").lower() == \"true\",\n)\nLDAP_SERVER_LABEL = PersistentConfig(\n    \"LDAP_SERVER_LABEL\",\n    \"ldap.server.label\",\n    os.environ.get(\"LDAP_SERVER_LABEL\", \"LDAP Server\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_SERVER_LABEL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_SERVER_LABEL = PersistentConfig(\n    \"LDAP_SERVER_LABEL\",\n    \"ldap.server.label\",\n    os.environ.get(\"LDAP_SERVER_LABEL\", \"LDAP Server\"),\n)\nLDAP_SERVER_HOST = PersistentConfig(\n    \"LDAP_SERVER_HOST\",\n    \"ldap.server.host\",\n    os.environ.get(\"LDAP_SERVER_HOST\", \"localhost\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_SERVER_HOST",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_SERVER_HOST = PersistentConfig(\n    \"LDAP_SERVER_HOST\",\n    \"ldap.server.host\",\n    os.environ.get(\"LDAP_SERVER_HOST\", \"localhost\"),\n)\nLDAP_SERVER_PORT = PersistentConfig(\n    \"LDAP_SERVER_PORT\",\n    \"ldap.server.port\",\n    int(os.environ.get(\"LDAP_SERVER_PORT\", \"389\")),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_SERVER_PORT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_SERVER_PORT = PersistentConfig(\n    \"LDAP_SERVER_PORT\",\n    \"ldap.server.port\",\n    int(os.environ.get(\"LDAP_SERVER_PORT\", \"389\")),\n)\nLDAP_ATTRIBUTE_FOR_MAIL = PersistentConfig(\n    \"LDAP_ATTRIBUTE_FOR_MAIL\",\n    \"ldap.server.attribute_for_mail\",\n    os.environ.get(\"LDAP_ATTRIBUTE_FOR_MAIL\", \"mail\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_ATTRIBUTE_FOR_MAIL",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_ATTRIBUTE_FOR_MAIL = PersistentConfig(\n    \"LDAP_ATTRIBUTE_FOR_MAIL\",\n    \"ldap.server.attribute_for_mail\",\n    os.environ.get(\"LDAP_ATTRIBUTE_FOR_MAIL\", \"mail\"),\n)\nLDAP_ATTRIBUTE_FOR_USERNAME = PersistentConfig(\n    \"LDAP_ATTRIBUTE_FOR_USERNAME\",\n    \"ldap.server.attribute_for_username\",\n    os.environ.get(\"LDAP_ATTRIBUTE_FOR_USERNAME\", \"uid\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_ATTRIBUTE_FOR_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_ATTRIBUTE_FOR_USERNAME = PersistentConfig(\n    \"LDAP_ATTRIBUTE_FOR_USERNAME\",\n    \"ldap.server.attribute_for_username\",\n    os.environ.get(\"LDAP_ATTRIBUTE_FOR_USERNAME\", \"uid\"),\n)\nLDAP_APP_DN = PersistentConfig(\n    \"LDAP_APP_DN\", \"ldap.server.app_dn\", os.environ.get(\"LDAP_APP_DN\", \"\")\n)\nLDAP_APP_PASSWORD = PersistentConfig(\n    \"LDAP_APP_PASSWORD\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_APP_DN",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_APP_DN = PersistentConfig(\n    \"LDAP_APP_DN\", \"ldap.server.app_dn\", os.environ.get(\"LDAP_APP_DN\", \"\")\n)\nLDAP_APP_PASSWORD = PersistentConfig(\n    \"LDAP_APP_PASSWORD\",\n    \"ldap.server.app_password\",\n    os.environ.get(\"LDAP_APP_PASSWORD\", \"\"),\n)\nLDAP_SEARCH_BASE = PersistentConfig(\n    \"LDAP_SEARCH_BASE\", \"ldap.server.users_dn\", os.environ.get(\"LDAP_SEARCH_BASE\", \"\")",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_APP_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_APP_PASSWORD = PersistentConfig(\n    \"LDAP_APP_PASSWORD\",\n    \"ldap.server.app_password\",\n    os.environ.get(\"LDAP_APP_PASSWORD\", \"\"),\n)\nLDAP_SEARCH_BASE = PersistentConfig(\n    \"LDAP_SEARCH_BASE\", \"ldap.server.users_dn\", os.environ.get(\"LDAP_SEARCH_BASE\", \"\")\n)\nLDAP_SEARCH_FILTERS = PersistentConfig(\n    \"LDAP_SEARCH_FILTER\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_SEARCH_BASE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_SEARCH_BASE = PersistentConfig(\n    \"LDAP_SEARCH_BASE\", \"ldap.server.users_dn\", os.environ.get(\"LDAP_SEARCH_BASE\", \"\")\n)\nLDAP_SEARCH_FILTERS = PersistentConfig(\n    \"LDAP_SEARCH_FILTER\",\n    \"ldap.server.search_filter\",\n    os.environ.get(\"LDAP_SEARCH_FILTER\", os.environ.get(\"LDAP_SEARCH_FILTERS\", \"\")),\n)\nLDAP_USE_TLS = PersistentConfig(\n    \"LDAP_USE_TLS\",",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_SEARCH_FILTERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_SEARCH_FILTERS = PersistentConfig(\n    \"LDAP_SEARCH_FILTER\",\n    \"ldap.server.search_filter\",\n    os.environ.get(\"LDAP_SEARCH_FILTER\", os.environ.get(\"LDAP_SEARCH_FILTERS\", \"\")),\n)\nLDAP_USE_TLS = PersistentConfig(\n    \"LDAP_USE_TLS\",\n    \"ldap.server.use_tls\",\n    os.environ.get(\"LDAP_USE_TLS\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_USE_TLS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_USE_TLS = PersistentConfig(\n    \"LDAP_USE_TLS\",\n    \"ldap.server.use_tls\",\n    os.environ.get(\"LDAP_USE_TLS\", \"True\").lower() == \"true\",\n)\nLDAP_CA_CERT_FILE = PersistentConfig(\n    \"LDAP_CA_CERT_FILE\",\n    \"ldap.server.ca_cert_file\",\n    os.environ.get(\"LDAP_CA_CERT_FILE\", \"\"),\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_CA_CERT_FILE",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_CA_CERT_FILE = PersistentConfig(\n    \"LDAP_CA_CERT_FILE\",\n    \"ldap.server.ca_cert_file\",\n    os.environ.get(\"LDAP_CA_CERT_FILE\", \"\"),\n)\nLDAP_VALIDATE_CERT = PersistentConfig(\n    \"LDAP_VALIDATE_CERT\",\n    \"ldap.server.validate_cert\",\n    os.environ.get(\"LDAP_VALIDATE_CERT\", \"True\").lower() == \"true\",\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_VALIDATE_CERT",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_VALIDATE_CERT = PersistentConfig(\n    \"LDAP_VALIDATE_CERT\",\n    \"ldap.server.validate_cert\",\n    os.environ.get(\"LDAP_VALIDATE_CERT\", \"True\").lower() == \"true\",\n)\nLDAP_CIPHERS = PersistentConfig(\n    \"LDAP_CIPHERS\", \"ldap.server.ciphers\", os.environ.get(\"LDAP_CIPHERS\", \"ALL\")\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "LDAP_CIPHERS",
        "kind": 5,
        "importPath": "backend.open_webui.config",
        "description": "backend.open_webui.config",
        "peekOfCode": "LDAP_CIPHERS = PersistentConfig(\n    \"LDAP_CIPHERS\", \"ldap.server.ciphers\", os.environ.get(\"LDAP_CIPHERS\", \"ALL\")\n)",
        "detail": "backend.open_webui.config",
        "documentation": {}
    },
    {
        "label": "MESSAGES",
        "kind": 6,
        "importPath": "backend.open_webui.constants",
        "description": "backend.open_webui.constants",
        "peekOfCode": "class MESSAGES(str, Enum):\n    DEFAULT = lambda msg=\"\": f\"{msg if msg else ''}\"\n    MODEL_ADDED = lambda model=\"\": f\"The model '{model}' has been added successfully.\"\n    MODEL_DELETED = (\n        lambda model=\"\": f\"The model '{model}' has been deleted successfully.\"\n    )\nclass WEBHOOK_MESSAGES(str, Enum):\n    DEFAULT = lambda msg=\"\": f\"{msg if msg else ''}\"\n    USER_SIGNUP = lambda username=\"\": (\n        f\"New user signed up: {username}\" if username else \"New user signed up\"",
        "detail": "backend.open_webui.constants",
        "documentation": {}
    },
    {
        "label": "WEBHOOK_MESSAGES",
        "kind": 6,
        "importPath": "backend.open_webui.constants",
        "description": "backend.open_webui.constants",
        "peekOfCode": "class WEBHOOK_MESSAGES(str, Enum):\n    DEFAULT = lambda msg=\"\": f\"{msg if msg else ''}\"\n    USER_SIGNUP = lambda username=\"\": (\n        f\"New user signed up: {username}\" if username else \"New user signed up\"\n    )\nclass ERROR_MESSAGES(str, Enum):\n    def __str__(self) -> str:\n        return super().__str__()\n    DEFAULT = (\n        lambda err=\"\": f'{\"Something went wrong :/\" if err == \"\" else \"[ERROR: \" + str(err) + \"]\"}'",
        "detail": "backend.open_webui.constants",
        "documentation": {}
    },
    {
        "label": "ERROR_MESSAGES",
        "kind": 6,
        "importPath": "backend.open_webui.constants",
        "description": "backend.open_webui.constants",
        "peekOfCode": "class ERROR_MESSAGES(str, Enum):\n    def __str__(self) -> str:\n        return super().__str__()\n    DEFAULT = (\n        lambda err=\"\": f'{\"Something went wrong :/\" if err == \"\" else \"[ERROR: \" + str(err) + \"]\"}'\n    )\n    ENV_VAR_NOT_FOUND = \"Required environment variable not found. Terminating now.\"\n    CREATE_USER_ERROR = \"Oops! Something went wrong while creating your account. Please try again later. If the issue persists, contact support for assistance.\"\n    DELETE_USER_ERROR = \"Oops! Something went wrong. We encountered an issue while trying to delete the user. Please give it another shot.\"\n    EMAIL_MISMATCH = \"Uh-oh! This email does not match the email your provider is registered with. Please check your email and try again.\"",
        "detail": "backend.open_webui.constants",
        "documentation": {}
    },
    {
        "label": "TASKS",
        "kind": 6,
        "importPath": "backend.open_webui.constants",
        "description": "backend.open_webui.constants",
        "peekOfCode": "class TASKS(str, Enum):\n    def __str__(self) -> str:\n        return super().__str__()\n    DEFAULT = lambda task=\"\": f\"{task if task else 'generation'}\"\n    TITLE_GENERATION = \"title_generation\"\n    FOLLOW_UP_GENERATION = \"follow_up_generation\"\n    TAGS_GENERATION = \"tags_generation\"\n    EMOJI_GENERATION = \"emoji_generation\"\n    QUERY_GENERATION = \"query_generation\"\n    IMAGE_PROMPT_GENERATION = \"image_prompt_generation\"",
        "detail": "backend.open_webui.constants",
        "documentation": {}
    },
    {
        "label": "parse_section",
        "kind": 2,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "def parse_section(section):\n    items = []\n    for li in section.find_all(\"li\"):\n        # Extract raw HTML string\n        raw_html = str(li)\n        # Extract text without HTML tags\n        text = li.get_text(separator=\" \", strip=True)\n        # Split into title and content\n        parts = text.split(\": \", 1)\n        title = parts[0].strip() if len(parts) > 1 else \"\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OPEN_WEBUI_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OPEN_WEBUI_DIR = Path(__file__).parent  # the path containing this file\nprint(OPEN_WEBUI_DIR)\nBACKEND_DIR = OPEN_WEBUI_DIR.parent  # the path containing this file\nBASE_DIR = BACKEND_DIR.parent  # the path containing the backend/\nprint(BACKEND_DIR)\nprint(BASE_DIR)\ntry:\n    from dotenv import find_dotenv, load_dotenv\n    load_dotenv(find_dotenv(str(BASE_DIR / \".env\")))\nexcept ImportError:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "BACKEND_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "BACKEND_DIR = OPEN_WEBUI_DIR.parent  # the path containing this file\nBASE_DIR = BACKEND_DIR.parent  # the path containing the backend/\nprint(BACKEND_DIR)\nprint(BASE_DIR)\ntry:\n    from dotenv import find_dotenv, load_dotenv\n    load_dotenv(find_dotenv(str(BASE_DIR / \".env\")))\nexcept ImportError:\n    print(\"dotenv not installed, skipping...\")\nDOCKER = os.environ.get(\"DOCKER\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "BASE_DIR = BACKEND_DIR.parent  # the path containing the backend/\nprint(BACKEND_DIR)\nprint(BASE_DIR)\ntry:\n    from dotenv import find_dotenv, load_dotenv\n    load_dotenv(find_dotenv(str(BASE_DIR / \".env\")))\nexcept ImportError:\n    print(\"dotenv not installed, skipping...\")\nDOCKER = os.environ.get(\"DOCKER\", \"False\").lower() == \"true\"\n# device type embedding models - \"cpu\" (default), \"cuda\" (nvidia gpu required) or \"mps\" (apple silicon) - choosing this right can lead to better performance",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DOCKER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DOCKER = os.environ.get(\"DOCKER\", \"False\").lower() == \"true\"\n# device type embedding models - \"cpu\" (default), \"cuda\" (nvidia gpu required) or \"mps\" (apple silicon) - choosing this right can lead to better performance\nUSE_CUDA = os.environ.get(\"USE_CUDA_DOCKER\", \"false\")\nif USE_CUDA.lower() == \"true\":\n    try:\n        import torch\n        assert torch.cuda.is_available(), \"CUDA not available\"\n        DEVICE_TYPE = \"cuda\"\n    except Exception as e:\n        cuda_error = (",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "USE_CUDA",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "USE_CUDA = os.environ.get(\"USE_CUDA_DOCKER\", \"false\")\nif USE_CUDA.lower() == \"true\":\n    try:\n        import torch\n        assert torch.cuda.is_available(), \"CUDA not available\"\n        DEVICE_TYPE = \"cuda\"\n    except Exception as e:\n        cuda_error = (\n            \"Error when testing CUDA but USE_CUDA_DOCKER is true. \"\n            f\"Resetting USE_CUDA_DOCKER to false: {e}\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "GLOBAL_LOG_LEVEL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "GLOBAL_LOG_LEVEL = os.environ.get(\"GLOBAL_LOG_LEVEL\", \"\").upper()\nif GLOBAL_LOG_LEVEL in logging.getLevelNamesMapping():\n    logging.basicConfig(stream=sys.stdout, level=GLOBAL_LOG_LEVEL, force=True)\nelse:\n    GLOBAL_LOG_LEVEL = \"INFO\"\nlog = logging.getLogger(__name__)\nlog.info(f\"GLOBAL_LOG_LEVEL: {GLOBAL_LOG_LEVEL}\")\nif \"cuda_error\" in locals():\n    log.exception(cuda_error)\n    del cuda_error",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.info(f\"GLOBAL_LOG_LEVEL: {GLOBAL_LOG_LEVEL}\")\nif \"cuda_error\" in locals():\n    log.exception(cuda_error)\n    del cuda_error\nlog_sources = [\n    \"AUDIO\",\n    \"COMFYUI\",\n    \"CONFIG\",\n    \"DB\",",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "log_sources",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "log_sources = [\n    \"AUDIO\",\n    \"COMFYUI\",\n    \"CONFIG\",\n    \"DB\",\n    \"IMAGES\",\n    \"MAIN\",\n    \"MODELS\",\n    \"OLLAMA\",\n    \"OPENAI\",",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SRC_LOG_LEVELS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SRC_LOG_LEVELS = {}\nfor source in log_sources:\n    log_env_var = source + \"_LOG_LEVEL\"\n    SRC_LOG_LEVELS[source] = os.environ.get(log_env_var, \"\").upper()\n    if SRC_LOG_LEVELS[source] not in logging.getLevelNamesMapping():\n        SRC_LOG_LEVELS[source] = GLOBAL_LOG_LEVEL\n    log.info(f\"{log_env_var}: {SRC_LOG_LEVELS[source]}\")\nlog.setLevel(SRC_LOG_LEVELS[\"CONFIG\"])\nWEBUI_NAME = os.environ.get(\"WEBUI_NAME\", \"Open WebUI\")\nif WEBUI_NAME != \"Open WebUI\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_NAME = os.environ.get(\"WEBUI_NAME\", \"Open WebUI\")\nif WEBUI_NAME != \"Open WebUI\":\n    WEBUI_NAME += \" (Open WebUI)\"\nWEBUI_FAVICON_URL = \"https://openwebui.com/favicon.png\"\nTRUSTED_SIGNATURE_KEY = os.environ.get(\"TRUSTED_SIGNATURE_KEY\", \"\")\n####################################\n# ENV (dev,test,prod)\n####################################\nENV = os.environ.get(\"ENV\", \"dev\")\nFROM_INIT_PY = os.environ.get(\"FROM_INIT_PY\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_FAVICON_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_FAVICON_URL = \"https://openwebui.com/favicon.png\"\nTRUSTED_SIGNATURE_KEY = os.environ.get(\"TRUSTED_SIGNATURE_KEY\", \"\")\n####################################\n# ENV (dev,test,prod)\n####################################\nENV = os.environ.get(\"ENV\", \"dev\")\nFROM_INIT_PY = os.environ.get(\"FROM_INIT_PY\", \"False\").lower() == \"true\"\nif FROM_INIT_PY:\n    PACKAGE_DATA = {\"version\": importlib.metadata.version(\"open-webui\")}\nelse:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "TRUSTED_SIGNATURE_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "TRUSTED_SIGNATURE_KEY = os.environ.get(\"TRUSTED_SIGNATURE_KEY\", \"\")\n####################################\n# ENV (dev,test,prod)\n####################################\nENV = os.environ.get(\"ENV\", \"dev\")\nFROM_INIT_PY = os.environ.get(\"FROM_INIT_PY\", \"False\").lower() == \"true\"\nif FROM_INIT_PY:\n    PACKAGE_DATA = {\"version\": importlib.metadata.version(\"open-webui\")}\nelse:\n    try:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENV",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "ENV = os.environ.get(\"ENV\", \"dev\")\nFROM_INIT_PY = os.environ.get(\"FROM_INIT_PY\", \"False\").lower() == \"true\"\nif FROM_INIT_PY:\n    PACKAGE_DATA = {\"version\": importlib.metadata.version(\"open-webui\")}\nelse:\n    try:\n        PACKAGE_DATA = json.loads((BASE_DIR / \"package.json\").read_text())\n    except Exception:\n        PACKAGE_DATA = {\"version\": \"0.0.0\"}\nVERSION = PACKAGE_DATA[\"version\"]",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "FROM_INIT_PY",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "FROM_INIT_PY = os.environ.get(\"FROM_INIT_PY\", \"False\").lower() == \"true\"\nif FROM_INIT_PY:\n    PACKAGE_DATA = {\"version\": importlib.metadata.version(\"open-webui\")}\nelse:\n    try:\n        PACKAGE_DATA = json.loads((BASE_DIR / \"package.json\").read_text())\n    except Exception:\n        PACKAGE_DATA = {\"version\": \"0.0.0\"}\nVERSION = PACKAGE_DATA[\"version\"]\nINSTANCE_ID = os.environ.get(\"INSTANCE_ID\", str(uuid4()))",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "VERSION = PACKAGE_DATA[\"version\"]\nINSTANCE_ID = os.environ.get(\"INSTANCE_ID\", str(uuid4()))\n# Function to parse each section\ndef parse_section(section):\n    items = []\n    for li in section.find_all(\"li\"):\n        # Extract raw HTML string\n        raw_html = str(li)\n        # Extract text without HTML tags\n        text = li.get_text(separator=\" \", strip=True)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "INSTANCE_ID",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "INSTANCE_ID = os.environ.get(\"INSTANCE_ID\", str(uuid4()))\n# Function to parse each section\ndef parse_section(section):\n    items = []\n    for li in section.find_all(\"li\"):\n        # Extract raw HTML string\n        raw_html = str(li)\n        # Extract text without HTML tags\n        text = li.get_text(separator=\" \", strip=True)\n        # Split into title and content",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "html_content",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "html_content = markdown.markdown(changelog_content)\n# Parse the HTML content\nsoup = BeautifulSoup(html_content, \"html.parser\")\n# Initialize JSON structure\nchangelog_json = {}\n# Iterate over each version\nfor version in soup.find_all(\"h2\"):\n    version_number = version.get_text().strip().split(\" - \")[0][1:-1]  # Remove brackets\n    date = version.get_text().strip().split(\" - \")[1]\n    version_data = {\"date\": date}",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "soup = BeautifulSoup(html_content, \"html.parser\")\n# Initialize JSON structure\nchangelog_json = {}\n# Iterate over each version\nfor version in soup.find_all(\"h2\"):\n    version_number = version.get_text().strip().split(\" - \")[0][1:-1]  # Remove brackets\n    date = version.get_text().strip().split(\" - \")[1]\n    version_data = {\"date\": date}\n    # Find the next sibling that is a h3 tag (section title)\n    current = version.find_next_sibling()",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "changelog_json",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "changelog_json = {}\n# Iterate over each version\nfor version in soup.find_all(\"h2\"):\n    version_number = version.get_text().strip().split(\" - \")[0][1:-1]  # Remove brackets\n    date = version.get_text().strip().split(\" - \")[1]\n    version_data = {\"date\": date}\n    # Find the next sibling that is a h3 tag (section title)\n    current = version.find_next_sibling()\n    while current and current.name != \"h2\":\n        if current.name == \"h3\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "CHANGELOG",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "CHANGELOG = changelog_json\n####################################\n# SAFE_MODE\n####################################\nSAFE_MODE = os.environ.get(\"SAFE_MODE\", \"false\").lower() == \"true\"\n####################################\n# ENABLE_FORWARD_USER_INFO_HEADERS\n####################################\nENABLE_FORWARD_USER_INFO_HEADERS = (\n    os.environ.get(\"ENABLE_FORWARD_USER_INFO_HEADERS\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SAFE_MODE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SAFE_MODE = os.environ.get(\"SAFE_MODE\", \"false\").lower() == \"true\"\n####################################\n# ENABLE_FORWARD_USER_INFO_HEADERS\n####################################\nENABLE_FORWARD_USER_INFO_HEADERS = (\n    os.environ.get(\"ENABLE_FORWARD_USER_INFO_HEADERS\", \"False\").lower() == \"true\"\n)\n####################################\n# WEBUI_BUILD_HASH\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_FORWARD_USER_INFO_HEADERS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "ENABLE_FORWARD_USER_INFO_HEADERS = (\n    os.environ.get(\"ENABLE_FORWARD_USER_INFO_HEADERS\", \"False\").lower() == \"true\"\n)\n####################################\n# WEBUI_BUILD_HASH\n####################################\nWEBUI_BUILD_HASH = os.environ.get(\"WEBUI_BUILD_HASH\", \"dev-build\")\n####################################\n# DATA/FRONTEND BUILD DIR\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_BUILD_HASH",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_BUILD_HASH = os.environ.get(\"WEBUI_BUILD_HASH\", \"dev-build\")\n####################################\n# DATA/FRONTEND BUILD DIR\n####################################\nDATA_DIR = Path(os.getenv(\"DATA_DIR\", BACKEND_DIR / \"data\")).resolve()\nif FROM_INIT_PY:\n    NEW_DATA_DIR = Path(os.getenv(\"DATA_DIR\", OPEN_WEBUI_DIR / \"data\")).resolve()\n    NEW_DATA_DIR.mkdir(parents=True, exist_ok=True)\n    # Check if the data directory exists in the package directory\n    if DATA_DIR.exists() and DATA_DIR != NEW_DATA_DIR:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATA_DIR = Path(os.getenv(\"DATA_DIR\", BACKEND_DIR / \"data\")).resolve()\nif FROM_INIT_PY:\n    NEW_DATA_DIR = Path(os.getenv(\"DATA_DIR\", OPEN_WEBUI_DIR / \"data\")).resolve()\n    NEW_DATA_DIR.mkdir(parents=True, exist_ok=True)\n    # Check if the data directory exists in the package directory\n    if DATA_DIR.exists() and DATA_DIR != NEW_DATA_DIR:\n        log.info(f\"Moving {DATA_DIR} to {NEW_DATA_DIR}\")\n        for item in DATA_DIR.iterdir():\n            dest = NEW_DATA_DIR / item.name\n            if item.is_dir():",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "STATIC_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "STATIC_DIR = Path(os.getenv(\"STATIC_DIR\", OPEN_WEBUI_DIR / \"static\"))\nFONTS_DIR = Path(os.getenv(\"FONTS_DIR\", OPEN_WEBUI_DIR / \"static\" / \"fonts\"))\nFRONTEND_BUILD_DIR = Path(os.getenv(\"FRONTEND_BUILD_DIR\", BASE_DIR / \"build\")).resolve()\nif FROM_INIT_PY:\n    FRONTEND_BUILD_DIR = Path(\n        os.getenv(\"FRONTEND_BUILD_DIR\", OPEN_WEBUI_DIR / \"frontend\")\n    ).resolve()\n####################################\n# Database\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "FONTS_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "FONTS_DIR = Path(os.getenv(\"FONTS_DIR\", OPEN_WEBUI_DIR / \"static\" / \"fonts\"))\nFRONTEND_BUILD_DIR = Path(os.getenv(\"FRONTEND_BUILD_DIR\", BASE_DIR / \"build\")).resolve()\nif FROM_INIT_PY:\n    FRONTEND_BUILD_DIR = Path(\n        os.getenv(\"FRONTEND_BUILD_DIR\", OPEN_WEBUI_DIR / \"frontend\")\n    ).resolve()\n####################################\n# Database\n####################################\n# Check if the file exists",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "FRONTEND_BUILD_DIR",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "FRONTEND_BUILD_DIR = Path(os.getenv(\"FRONTEND_BUILD_DIR\", BASE_DIR / \"build\")).resolve()\nif FROM_INIT_PY:\n    FRONTEND_BUILD_DIR = Path(\n        os.getenv(\"FRONTEND_BUILD_DIR\", OPEN_WEBUI_DIR / \"frontend\")\n    ).resolve()\n####################################\n# Database\n####################################\n# Check if the file exists\nif os.path.exists(f\"{DATA_DIR}/ollama.db\"):",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_URL = os.environ.get(\"DATABASE_URL\", f\"sqlite:///{DATA_DIR}/webui.db\")\n#NOTE REMODE\n# DATABASE_URL = \"postgresql://open-webui:0p3n-w3bu%21@localhost:5432/open-webui\"\n# Replace the postgres:// with postgresql://\nif \"postgres://\" in DATABASE_URL:\n    DATABASE_URL = DATABASE_URL.replace(\"postgres://\", \"postgresql://\")\nDATABASE_SCHEMA = os.environ.get(\"DATABASE_SCHEMA\", None)\nDATABASE_POOL_SIZE = os.environ.get(\"DATABASE_POOL_SIZE\", 0)\nif DATABASE_POOL_SIZE == \"\":\n    DATABASE_POOL_SIZE = 0",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_SCHEMA",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_SCHEMA = os.environ.get(\"DATABASE_SCHEMA\", None)\nDATABASE_POOL_SIZE = os.environ.get(\"DATABASE_POOL_SIZE\", 0)\nif DATABASE_POOL_SIZE == \"\":\n    DATABASE_POOL_SIZE = 0\nelse:\n    try:\n        DATABASE_POOL_SIZE = int(DATABASE_POOL_SIZE)\n    except Exception:\n        DATABASE_POOL_SIZE = 0\nDATABASE_POOL_MAX_OVERFLOW = os.environ.get(\"DATABASE_POOL_MAX_OVERFLOW\", 0)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_POOL_SIZE = os.environ.get(\"DATABASE_POOL_SIZE\", 0)\nif DATABASE_POOL_SIZE == \"\":\n    DATABASE_POOL_SIZE = 0\nelse:\n    try:\n        DATABASE_POOL_SIZE = int(DATABASE_POOL_SIZE)\n    except Exception:\n        DATABASE_POOL_SIZE = 0\nDATABASE_POOL_MAX_OVERFLOW = os.environ.get(\"DATABASE_POOL_MAX_OVERFLOW\", 0)\nif DATABASE_POOL_MAX_OVERFLOW == \"\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_MAX_OVERFLOW",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_POOL_MAX_OVERFLOW = os.environ.get(\"DATABASE_POOL_MAX_OVERFLOW\", 0)\nif DATABASE_POOL_MAX_OVERFLOW == \"\":\n    DATABASE_POOL_MAX_OVERFLOW = 0\nelse:\n    try:\n        DATABASE_POOL_MAX_OVERFLOW = int(DATABASE_POOL_MAX_OVERFLOW)\n    except Exception:\n        DATABASE_POOL_MAX_OVERFLOW = 0\nDATABASE_POOL_TIMEOUT = os.environ.get(\"DATABASE_POOL_TIMEOUT\", 30)\nif DATABASE_POOL_TIMEOUT == \"\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_POOL_TIMEOUT = os.environ.get(\"DATABASE_POOL_TIMEOUT\", 30)\nif DATABASE_POOL_TIMEOUT == \"\":\n    DATABASE_POOL_TIMEOUT = 30\nelse:\n    try:\n        DATABASE_POOL_TIMEOUT = int(DATABASE_POOL_TIMEOUT)\n    except Exception:\n        DATABASE_POOL_TIMEOUT = 30\nDATABASE_POOL_RECYCLE = os.environ.get(\"DATABASE_POOL_RECYCLE\", 3600)\nif DATABASE_POOL_RECYCLE == \"\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_POOL_RECYCLE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "DATABASE_POOL_RECYCLE = os.environ.get(\"DATABASE_POOL_RECYCLE\", 3600)\nif DATABASE_POOL_RECYCLE == \"\":\n    DATABASE_POOL_RECYCLE = 3600\nelse:\n    try:\n        DATABASE_POOL_RECYCLE = int(DATABASE_POOL_RECYCLE)\n    except Exception:\n        DATABASE_POOL_RECYCLE = 3600\nRESET_CONFIG_ON_START = (\n    os.environ.get(\"RESET_CONFIG_ON_START\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "RESET_CONFIG_ON_START",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "RESET_CONFIG_ON_START = (\n    os.environ.get(\"RESET_CONFIG_ON_START\", \"False\").lower() == \"true\"\n)\nENABLE_REALTIME_CHAT_SAVE = (\n    os.environ.get(\"ENABLE_REALTIME_CHAT_SAVE\", \"False\").lower() == \"true\"\n)\n####################################\n# REDIS\n####################################\nREDIS_URL = os.environ.get(\"REDIS_URL\", \"\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_REALTIME_CHAT_SAVE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "ENABLE_REALTIME_CHAT_SAVE = (\n    os.environ.get(\"ENABLE_REALTIME_CHAT_SAVE\", \"False\").lower() == \"true\"\n)\n####################################\n# REDIS\n####################################\nREDIS_URL = os.environ.get(\"REDIS_URL\", \"\")\nREDIS_SENTINEL_HOSTS = os.environ.get(\"REDIS_SENTINEL_HOSTS\", \"\")\nREDIS_SENTINEL_PORT = os.environ.get(\"REDIS_SENTINEL_PORT\", \"26379\")\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "REDIS_URL = os.environ.get(\"REDIS_URL\", \"\")\nREDIS_SENTINEL_HOSTS = os.environ.get(\"REDIS_SENTINEL_HOSTS\", \"\")\nREDIS_SENTINEL_PORT = os.environ.get(\"REDIS_SENTINEL_PORT\", \"26379\")\n####################################\n# UVICORN WORKERS\n####################################\n# Number of uvicorn worker processes for handling requests\nUVICORN_WORKERS = os.environ.get(\"UVICORN_WORKERS\", \"1\")\ntry:\n    UVICORN_WORKERS = int(UVICORN_WORKERS)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_HOSTS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "REDIS_SENTINEL_HOSTS = os.environ.get(\"REDIS_SENTINEL_HOSTS\", \"\")\nREDIS_SENTINEL_PORT = os.environ.get(\"REDIS_SENTINEL_PORT\", \"26379\")\n####################################\n# UVICORN WORKERS\n####################################\n# Number of uvicorn worker processes for handling requests\nUVICORN_WORKERS = os.environ.get(\"UVICORN_WORKERS\", \"1\")\ntry:\n    UVICORN_WORKERS = int(UVICORN_WORKERS)\n    if UVICORN_WORKERS < 1:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "REDIS_SENTINEL_PORT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "REDIS_SENTINEL_PORT = os.environ.get(\"REDIS_SENTINEL_PORT\", \"26379\")\n####################################\n# UVICORN WORKERS\n####################################\n# Number of uvicorn worker processes for handling requests\nUVICORN_WORKERS = os.environ.get(\"UVICORN_WORKERS\", \"1\")\ntry:\n    UVICORN_WORKERS = int(UVICORN_WORKERS)\n    if UVICORN_WORKERS < 1:\n        UVICORN_WORKERS = 1",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "UVICORN_WORKERS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "UVICORN_WORKERS = os.environ.get(\"UVICORN_WORKERS\", \"1\")\ntry:\n    UVICORN_WORKERS = int(UVICORN_WORKERS)\n    if UVICORN_WORKERS < 1:\n        UVICORN_WORKERS = 1\nexcept ValueError:\n    UVICORN_WORKERS = 1\n    log.info(f\"Invalid UVICORN_WORKERS value, defaulting to {UVICORN_WORKERS}\")\n####################################\n# WEBUI_AUTH (Required for security)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH = os.environ.get(\"WEBUI_AUTH\", \"True\").lower() == \"true\"\nWEBUI_AUTH_TRUSTED_EMAIL_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_EMAIL_HEADER\", None\n)\nWEBUI_AUTH_TRUSTED_NAME_HEADER = os.environ.get(\"WEBUI_AUTH_TRUSTED_NAME_HEADER\", None)\nWEBUI_AUTH_TRUSTED_GROUPS_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_GROUPS_HEADER\", None\n)\nBYPASS_MODEL_ACCESS_CONTROL = (\n    os.environ.get(\"BYPASS_MODEL_ACCESS_CONTROL\", \"False\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_TRUSTED_EMAIL_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_EMAIL_HEADER\", None\n)\nWEBUI_AUTH_TRUSTED_NAME_HEADER = os.environ.get(\"WEBUI_AUTH_TRUSTED_NAME_HEADER\", None)\nWEBUI_AUTH_TRUSTED_GROUPS_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_GROUPS_HEADER\", None\n)\nBYPASS_MODEL_ACCESS_CONTROL = (\n    os.environ.get(\"BYPASS_MODEL_ACCESS_CONTROL\", \"False\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_NAME_HEADER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_TRUSTED_NAME_HEADER = os.environ.get(\"WEBUI_AUTH_TRUSTED_NAME_HEADER\", None)\nWEBUI_AUTH_TRUSTED_GROUPS_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_GROUPS_HEADER\", None\n)\nBYPASS_MODEL_ACCESS_CONTROL = (\n    os.environ.get(\"BYPASS_MODEL_ACCESS_CONTROL\", \"False\").lower() == \"true\"\n)\nWEBUI_AUTH_SIGNOUT_REDIRECT_URL = os.environ.get(\n    \"WEBUI_AUTH_SIGNOUT_REDIRECT_URL\", None\n)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_TRUSTED_GROUPS_HEADER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_TRUSTED_GROUPS_HEADER = os.environ.get(\n    \"WEBUI_AUTH_TRUSTED_GROUPS_HEADER\", None\n)\nBYPASS_MODEL_ACCESS_CONTROL = (\n    os.environ.get(\"BYPASS_MODEL_ACCESS_CONTROL\", \"False\").lower() == \"true\"\n)\nWEBUI_AUTH_SIGNOUT_REDIRECT_URL = os.environ.get(\n    \"WEBUI_AUTH_SIGNOUT_REDIRECT_URL\", None\n)\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "BYPASS_MODEL_ACCESS_CONTROL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "BYPASS_MODEL_ACCESS_CONTROL = (\n    os.environ.get(\"BYPASS_MODEL_ACCESS_CONTROL\", \"False\").lower() == \"true\"\n)\nWEBUI_AUTH_SIGNOUT_REDIRECT_URL = os.environ.get(\n    \"WEBUI_AUTH_SIGNOUT_REDIRECT_URL\", None\n)\n####################################\n# WEBUI_SECRET_KEY\n####################################\nWEBUI_SECRET_KEY = os.environ.get(",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_SIGNOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_SIGNOUT_REDIRECT_URL = os.environ.get(\n    \"WEBUI_AUTH_SIGNOUT_REDIRECT_URL\", None\n)\n####################################\n# WEBUI_SECRET_KEY\n####################################\nWEBUI_SECRET_KEY = os.environ.get(\n    \"WEBUI_SECRET_KEY\",\n    os.environ.get(\n        \"WEBUI_JWT_SECRET_KEY\", \"t0p-s3cr3t\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_SECRET_KEY = os.environ.get(\n    \"WEBUI_SECRET_KEY\",\n    os.environ.get(\n        \"WEBUI_JWT_SECRET_KEY\", \"t0p-s3cr3t\"\n    ),  # DEPRECATED: remove at next major version\n)\nWEBUI_SESSION_COOKIE_SAME_SITE = os.environ.get(\"WEBUI_SESSION_COOKIE_SAME_SITE\", \"lax\")\nWEBUI_SESSION_COOKIE_SECURE = (\n    os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\").lower() == \"true\"\n)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SESSION_COOKIE_SAME_SITE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_SESSION_COOKIE_SAME_SITE = os.environ.get(\"WEBUI_SESSION_COOKIE_SAME_SITE\", \"lax\")\nWEBUI_SESSION_COOKIE_SECURE = (\n    os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\").lower() == \"true\"\n)\nWEBUI_AUTH_COOKIE_SAME_SITE = os.environ.get(\n    \"WEBUI_AUTH_COOKIE_SAME_SITE\", WEBUI_SESSION_COOKIE_SAME_SITE\n)\nWEBUI_AUTH_COOKIE_SECURE = (\n    os.environ.get(\n        \"WEBUI_AUTH_COOKIE_SECURE\",",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_SESSION_COOKIE_SECURE = (\n    os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\").lower() == \"true\"\n)\nWEBUI_AUTH_COOKIE_SAME_SITE = os.environ.get(\n    \"WEBUI_AUTH_COOKIE_SAME_SITE\", WEBUI_SESSION_COOKIE_SAME_SITE\n)\nWEBUI_AUTH_COOKIE_SECURE = (\n    os.environ.get(\n        \"WEBUI_AUTH_COOKIE_SECURE\",\n        os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\"),",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SAME_SITE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_COOKIE_SAME_SITE = os.environ.get(\n    \"WEBUI_AUTH_COOKIE_SAME_SITE\", WEBUI_SESSION_COOKIE_SAME_SITE\n)\nWEBUI_AUTH_COOKIE_SECURE = (\n    os.environ.get(\n        \"WEBUI_AUTH_COOKIE_SECURE\",\n        os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\"),\n    ).lower()\n    == \"true\"\n)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBUI_AUTH_COOKIE_SECURE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBUI_AUTH_COOKIE_SECURE = (\n    os.environ.get(\n        \"WEBUI_AUTH_COOKIE_SECURE\",\n        os.environ.get(\"WEBUI_SESSION_COOKIE_SECURE\", \"false\"),\n    ).lower()\n    == \"true\"\n)\nif WEBUI_AUTH and WEBUI_SECRET_KEY == \"\":\n    raise ValueError(ERROR_MESSAGES.ENV_VAR_NOT_FOUND)\nENABLE_WEBSOCKET_SUPPORT = (",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_WEBSOCKET_SUPPORT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "ENABLE_WEBSOCKET_SUPPORT = (\n    os.environ.get(\"ENABLE_WEBSOCKET_SUPPORT\", \"True\").lower() == \"true\"\n)\nWEBSOCKET_MANAGER = os.environ.get(\"WEBSOCKET_MANAGER\", \"\")\nWEBSOCKET_REDIS_URL = os.environ.get(\"WEBSOCKET_REDIS_URL\", REDIS_URL)\nWEBSOCKET_REDIS_LOCK_TIMEOUT = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT\", 60)\nWEBSOCKET_SENTINEL_HOSTS = os.environ.get(\"WEBSOCKET_SENTINEL_HOSTS\", \"\")\nWEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_MANAGER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBSOCKET_MANAGER = os.environ.get(\"WEBSOCKET_MANAGER\", \"\")\nWEBSOCKET_REDIS_URL = os.environ.get(\"WEBSOCKET_REDIS_URL\", REDIS_URL)\nWEBSOCKET_REDIS_LOCK_TIMEOUT = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT\", 60)\nWEBSOCKET_SENTINEL_HOSTS = os.environ.get(\"WEBSOCKET_SENTINEL_HOSTS\", \"\")\nWEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_REDIS_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBSOCKET_REDIS_URL = os.environ.get(\"WEBSOCKET_REDIS_URL\", REDIS_URL)\nWEBSOCKET_REDIS_LOCK_TIMEOUT = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT\", 60)\nWEBSOCKET_SENTINEL_HOSTS = os.environ.get(\"WEBSOCKET_SENTINEL_HOSTS\", \"\")\nWEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT = int(AIOHTTP_CLIENT_TIMEOUT)",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_REDIS_LOCK_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBSOCKET_REDIS_LOCK_TIMEOUT = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT\", 60)\nWEBSOCKET_SENTINEL_HOSTS = os.environ.get(\"WEBSOCKET_SENTINEL_HOSTS\", \"\")\nWEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT = int(AIOHTTP_CLIENT_TIMEOUT)\n    except Exception:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_SENTINEL_HOSTS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBSOCKET_SENTINEL_HOSTS = os.environ.get(\"WEBSOCKET_SENTINEL_HOSTS\", \"\")\nWEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT = int(AIOHTTP_CLIENT_TIMEOUT)\n    except Exception:\n        AIOHTTP_CLIENT_TIMEOUT = 300",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_SENTINEL_PORT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "WEBSOCKET_SENTINEL_PORT = os.environ.get(\"WEBSOCKET_SENTINEL_PORT\", \"26379\")\nAIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT = int(AIOHTTP_CLIENT_TIMEOUT)\n    except Exception:\n        AIOHTTP_CLIENT_TIMEOUT = 300\nAIOHTTP_CLIENT_SESSION_SSL = (",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")\nif AIOHTTP_CLIENT_TIMEOUT == \"\":\n    AIOHTTP_CLIENT_TIMEOUT = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT = int(AIOHTTP_CLIENT_TIMEOUT)\n    except Exception:\n        AIOHTTP_CLIENT_TIMEOUT = 300\nAIOHTTP_CLIENT_SESSION_SSL = (\n    os.environ.get(\"AIOHTTP_CLIENT_SESSION_SSL\", \"True\").lower() == \"true\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_SSL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AIOHTTP_CLIENT_SESSION_SSL = (\n    os.environ.get(\"AIOHTTP_CLIENT_SESSION_SSL\", \"True\").lower() == \"true\"\n)\nAIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = os.environ.get(\n    \"AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST\",\n    os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST\", \"10\"),\n)\nif AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST == \"\":\n    AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = None\nelse:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = os.environ.get(\n    \"AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST\",\n    os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST\", \"10\"),\n)\nif AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST == \"\":\n    AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = int(AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST)\n    except Exception:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = os.environ.get(\n    \"AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA\", \"10\"\n)\nif AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA == \"\":\n    AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = None\nelse:\n    try:\n        AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = int(\n            AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA\n        )",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AIOHTTP_CLIENT_SESSION_TOOL_SERVER_SSL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AIOHTTP_CLIENT_SESSION_TOOL_SERVER_SSL = (\n    os.environ.get(\"AIOHTTP_CLIENT_SESSION_TOOL_SERVER_SSL\", \"True\").lower() == \"true\"\n)\n####################################\n# SENTENCE TRANSFORMERS\n####################################\nSENTENCE_TRANSFORMERS_BACKEND = os.environ.get(\"SENTENCE_TRANSFORMERS_BACKEND\", \"\")\nif SENTENCE_TRANSFORMERS_BACKEND == \"\":\n    SENTENCE_TRANSFORMERS_BACKEND = \"torch\"\nSENTENCE_TRANSFORMERS_MODEL_KWARGS = os.environ.get(",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_BACKEND",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SENTENCE_TRANSFORMERS_BACKEND = os.environ.get(\"SENTENCE_TRANSFORMERS_BACKEND\", \"\")\nif SENTENCE_TRANSFORMERS_BACKEND == \"\":\n    SENTENCE_TRANSFORMERS_BACKEND = \"torch\"\nSENTENCE_TRANSFORMERS_MODEL_KWARGS = os.environ.get(\n    \"SENTENCE_TRANSFORMERS_MODEL_KWARGS\", \"\"\n)\nif SENTENCE_TRANSFORMERS_MODEL_KWARGS == \"\":\n    SENTENCE_TRANSFORMERS_MODEL_KWARGS = None\nelse:\n    try:",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_MODEL_KWARGS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SENTENCE_TRANSFORMERS_MODEL_KWARGS = os.environ.get(\n    \"SENTENCE_TRANSFORMERS_MODEL_KWARGS\", \"\"\n)\nif SENTENCE_TRANSFORMERS_MODEL_KWARGS == \"\":\n    SENTENCE_TRANSFORMERS_MODEL_KWARGS = None\nelse:\n    try:\n        SENTENCE_TRANSFORMERS_MODEL_KWARGS = json.loads(\n            SENTENCE_TRANSFORMERS_MODEL_KWARGS\n        )",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND = os.environ.get(\n    \"SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND\", \"\"\n)\nif SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND == \"\":\n    SENTENCE_TRANSFORMERS_CROSS_ENCODER_BACKEND = \"torch\"\nSENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS = os.environ.get(\n    \"SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS\", \"\"\n)\nif SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS == \"\":\n    SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS = None",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS = os.environ.get(\n    \"SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS\", \"\"\n)\nif SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS == \"\":\n    SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS = None\nelse:\n    try:\n        SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS = json.loads(\n            SENTENCE_TRANSFORMERS_CROSS_ENCODER_MODEL_KWARGS\n        )",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OFFLINE_MODE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OFFLINE_MODE = os.environ.get(\"OFFLINE_MODE\", \"false\").lower() == \"true\"\nif OFFLINE_MODE:\n    os.environ[\"HF_HUB_OFFLINE\"] = \"1\"\n####################################\n# AUDIT LOGGING\n####################################\n# Where to store log file\nAUDIT_LOGS_FILE_PATH = f\"{DATA_DIR}/audit.log\"\n# Maximum size of a file before rotating into a new log file\nAUDIT_LOG_FILE_ROTATION_SIZE = os.getenv(\"AUDIT_LOG_FILE_ROTATION_SIZE\", \"10MB\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOGS_FILE_PATH",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_LOGS_FILE_PATH = f\"{DATA_DIR}/audit.log\"\n# Maximum size of a file before rotating into a new log file\nAUDIT_LOG_FILE_ROTATION_SIZE = os.getenv(\"AUDIT_LOG_FILE_ROTATION_SIZE\", \"10MB\")\n# METADATA | REQUEST | REQUEST_RESPONSE\nAUDIT_LOG_LEVEL = os.getenv(\"AUDIT_LOG_LEVEL\", \"NONE\").upper()\ntry:\n    MAX_BODY_LOG_SIZE = int(os.environ.get(\"MAX_BODY_LOG_SIZE\") or 2048)\nexcept ValueError:\n    MAX_BODY_LOG_SIZE = 2048\n# Comma separated list for urls to exclude from audit",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_FILE_ROTATION_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_LOG_FILE_ROTATION_SIZE = os.getenv(\"AUDIT_LOG_FILE_ROTATION_SIZE\", \"10MB\")\n# METADATA | REQUEST | REQUEST_RESPONSE\nAUDIT_LOG_LEVEL = os.getenv(\"AUDIT_LOG_LEVEL\", \"NONE\").upper()\ntry:\n    MAX_BODY_LOG_SIZE = int(os.environ.get(\"MAX_BODY_LOG_SIZE\") or 2048)\nexcept ValueError:\n    MAX_BODY_LOG_SIZE = 2048\n# Comma separated list for urls to exclude from audit\nAUDIT_EXCLUDED_PATHS = os.getenv(\"AUDIT_EXCLUDED_PATHS\", \"/chats,/chat,/folders\").split(\n    \",\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_LOG_LEVEL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_LOG_LEVEL = os.getenv(\"AUDIT_LOG_LEVEL\", \"NONE\").upper()\ntry:\n    MAX_BODY_LOG_SIZE = int(os.environ.get(\"MAX_BODY_LOG_SIZE\") or 2048)\nexcept ValueError:\n    MAX_BODY_LOG_SIZE = 2048\n# Comma separated list for urls to exclude from audit\nAUDIT_EXCLUDED_PATHS = os.getenv(\"AUDIT_EXCLUDED_PATHS\", \"/chats,/chat,/folders\").split(\n    \",\"\n)\nAUDIT_EXCLUDED_PATHS = [path.strip() for path in AUDIT_EXCLUDED_PATHS]",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_EXCLUDED_PATHS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_EXCLUDED_PATHS = os.getenv(\"AUDIT_EXCLUDED_PATHS\", \"/chats,/chat,/folders\").split(\n    \",\"\n)\nAUDIT_EXCLUDED_PATHS = [path.strip() for path in AUDIT_EXCLUDED_PATHS]\nAUDIT_EXCLUDED_PATHS = [path.lstrip(\"/\") for path in AUDIT_EXCLUDED_PATHS]\n####################################\n# OPENTELEMETRY\n####################################\nENABLE_OTEL = os.environ.get(\"ENABLE_OTEL\", \"False\").lower() == \"true\"\nOTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_EXCLUDED_PATHS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_EXCLUDED_PATHS = [path.strip() for path in AUDIT_EXCLUDED_PATHS]\nAUDIT_EXCLUDED_PATHS = [path.lstrip(\"/\") for path in AUDIT_EXCLUDED_PATHS]\n####################################\n# OPENTELEMETRY\n####################################\nENABLE_OTEL = os.environ.get(\"ENABLE_OTEL\", \"False\").lower() == \"true\"\nOTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://localhost:4317\"\n)\nOTEL_SERVICE_NAME = os.environ.get(\"OTEL_SERVICE_NAME\", \"open-webui\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "AUDIT_EXCLUDED_PATHS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "AUDIT_EXCLUDED_PATHS = [path.lstrip(\"/\") for path in AUDIT_EXCLUDED_PATHS]\n####################################\n# OPENTELEMETRY\n####################################\nENABLE_OTEL = os.environ.get(\"ENABLE_OTEL\", \"False\").lower() == \"true\"\nOTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://localhost:4317\"\n)\nOTEL_SERVICE_NAME = os.environ.get(\"OTEL_SERVICE_NAME\", \"open-webui\")\nOTEL_RESOURCE_ATTRIBUTES = os.environ.get(",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "ENABLE_OTEL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "ENABLE_OTEL = os.environ.get(\"ENABLE_OTEL\", \"False\").lower() == \"true\"\nOTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://localhost:4317\"\n)\nOTEL_SERVICE_NAME = os.environ.get(\"OTEL_SERVICE_NAME\", \"open-webui\")\nOTEL_RESOURCE_ATTRIBUTES = os.environ.get(\n    \"OTEL_RESOURCE_ATTRIBUTES\", \"\"\n)  # e.g. key1=val1,key2=val2\nOTEL_TRACES_SAMPLER = os.environ.get(\n    \"OTEL_TRACES_SAMPLER\", \"parentbased_always_on\"",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_EXPORTER_OTLP_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(\n    \"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://localhost:4317\"\n)\nOTEL_SERVICE_NAME = os.environ.get(\"OTEL_SERVICE_NAME\", \"open-webui\")\nOTEL_RESOURCE_ATTRIBUTES = os.environ.get(\n    \"OTEL_RESOURCE_ATTRIBUTES\", \"\"\n)  # e.g. key1=val1,key2=val2\nOTEL_TRACES_SAMPLER = os.environ.get(\n    \"OTEL_TRACES_SAMPLER\", \"parentbased_always_on\"\n).lower()",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_SERVICE_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OTEL_SERVICE_NAME = os.environ.get(\"OTEL_SERVICE_NAME\", \"open-webui\")\nOTEL_RESOURCE_ATTRIBUTES = os.environ.get(\n    \"OTEL_RESOURCE_ATTRIBUTES\", \"\"\n)  # e.g. key1=val1,key2=val2\nOTEL_TRACES_SAMPLER = os.environ.get(\n    \"OTEL_TRACES_SAMPLER\", \"parentbased_always_on\"\n).lower()\n####################################\n# TOOLS/FUNCTIONS PIP OPTIONS\n####################################",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_RESOURCE_ATTRIBUTES",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OTEL_RESOURCE_ATTRIBUTES = os.environ.get(\n    \"OTEL_RESOURCE_ATTRIBUTES\", \"\"\n)  # e.g. key1=val1,key2=val2\nOTEL_TRACES_SAMPLER = os.environ.get(\n    \"OTEL_TRACES_SAMPLER\", \"parentbased_always_on\"\n).lower()\n####################################\n# TOOLS/FUNCTIONS PIP OPTIONS\n####################################\nPIP_OPTIONS = os.getenv(\"PIP_OPTIONS\", \"\").split()",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "OTEL_TRACES_SAMPLER",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "OTEL_TRACES_SAMPLER = os.environ.get(\n    \"OTEL_TRACES_SAMPLER\", \"parentbased_always_on\"\n).lower()\n####################################\n# TOOLS/FUNCTIONS PIP OPTIONS\n####################################\nPIP_OPTIONS = os.getenv(\"PIP_OPTIONS\", \"\").split()\nPIP_PACKAGE_INDEX_OPTIONS = os.getenv(\"PIP_PACKAGE_INDEX_OPTIONS\", \"\").split()\n####################################\n# PROGRESSIVE WEB APP OPTIONS",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "PIP_OPTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "PIP_OPTIONS = os.getenv(\"PIP_OPTIONS\", \"\").split()\nPIP_PACKAGE_INDEX_OPTIONS = os.getenv(\"PIP_PACKAGE_INDEX_OPTIONS\", \"\").split()\n####################################\n# PROGRESSIVE WEB APP OPTIONS\n####################################\nEXTERNAL_PWA_MANIFEST_URL = os.environ.get(\"EXTERNAL_PWA_MANIFEST_URL\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "PIP_PACKAGE_INDEX_OPTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "PIP_PACKAGE_INDEX_OPTIONS = os.getenv(\"PIP_PACKAGE_INDEX_OPTIONS\", \"\").split()\n####################################\n# PROGRESSIVE WEB APP OPTIONS\n####################################\nEXTERNAL_PWA_MANIFEST_URL = os.environ.get(\"EXTERNAL_PWA_MANIFEST_URL\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_PWA_MANIFEST_URL",
        "kind": 5,
        "importPath": "backend.open_webui.env",
        "description": "backend.open_webui.env",
        "peekOfCode": "EXTERNAL_PWA_MANIFEST_URL = os.environ.get(\"EXTERNAL_PWA_MANIFEST_URL\")",
        "detail": "backend.open_webui.env",
        "documentation": {}
    },
    {
        "label": "get_function_module_by_id",
        "kind": 2,
        "importPath": "backend.open_webui.functions",
        "description": "backend.open_webui.functions",
        "peekOfCode": "def get_function_module_by_id(request: Request, pipe_id: str):\n    function_module, _, _ = get_function_module_from_cache(request, pipe_id)\n    if hasattr(function_module, \"valves\") and hasattr(function_module, \"Valves\"):\n        valves = Functions.get_function_valves_by_id(pipe_id)\n        function_module.valves = function_module.Valves(**(valves if valves else {}))\n    return function_module\nasync def get_function_models(request):\n    pipes = Functions.get_functions_by_type(\"pipe\", active_only=True)\n    pipe_models = []\n    for pipe in pipes:",
        "detail": "backend.open_webui.functions",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.functions",
        "description": "backend.open_webui.functions",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\ndef get_function_module_by_id(request: Request, pipe_id: str):\n    function_module, _, _ = get_function_module_from_cache(request, pipe_id)\n    if hasattr(function_module, \"valves\") and hasattr(function_module, \"Valves\"):\n        valves = Functions.get_function_valves_by_id(pipe_id)\n        function_module.valves = function_module.Valves(**(valves if valves else {}))\n    return function_module\nasync def get_function_models(request):\n    pipes = Functions.get_functions_by_type(\"pipe\", active_only=True)",
        "detail": "backend.open_webui.functions",
        "documentation": {}
    },
    {
        "label": "SPAStaticFiles",
        "kind": 6,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "class SPAStaticFiles(StaticFiles):\n    async def get_response(self, path: str, scope):\n        try:\n            return await super().get_response(path, scope)\n        except (HTTPException, StarletteHTTPException) as ex:\n            if ex.status_code == 404:\n                if path.endswith(\".js\"):\n                    # Return 404 for javascript files\n                    raise ex\n                else:",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "RedirectMiddleware",
        "kind": 6,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "class RedirectMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # Check if the request is a GET request\n        if request.method == \"GET\":\n            path = request.url.path\n            query_params = dict(parse_qs(urlparse(str(request.url)).query))\n            # Check for the specific watch path and the presence of 'v' parameter\n            if path.endswith(\"/watch\") and \"v\" in query_params:\n                # Extract the first 'v' parameter\n                video_id = query_params[\"v\"][0]",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "UrlForm",
        "kind": 6,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "class UrlForm(BaseModel):\n    url: str\n@app.get(\"/api/webhook\")\nasync def get_webhook_url(user=Depends(get_admin_user)):\n    return {\n        \"url\": app.state.config.WEBHOOK_URL,\n    }\n@app.post(\"/api/webhook\")\nasync def update_webhook_url(form_data: UrlForm, user=Depends(get_admin_user)):\n    app.state.config.WEBHOOK_URL = form_data.url",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "swagger_ui_html",
        "kind": 2,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "def swagger_ui_html(*args, **kwargs):\n    return get_swagger_ui_html(\n        *args,\n        **kwargs,\n        swagger_js_url=\"/static/swagger-ui/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui/swagger-ui.css\",\n        swagger_favicon_url=\"/static/swagger-ui/favicon.png\",\n    )\napplications.get_swagger_ui_html = swagger_ui_html\nif os.path.exists(FRONTEND_BUILD_DIR):",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog.setLevel(SRC_LOG_LEVELS[\"MAIN\"])\nclass SPAStaticFiles(StaticFiles):\n    async def get_response(self, path: str, scope):\n        try:\n            return await super().get_response(path, scope)\n        except (HTTPException, StarletteHTTPException) as ex:\n            if ex.status_code == 404:\n                if path.endswith(\".js\"):\n                    # Return 404 for javascript files",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app = FastAPI(\n    title=\"Open WebUI\",\n    docs_url=\"/docs\" if ENV == \"dev\" else None,\n    openapi_url=\"/openapi.json\" if ENV == \"dev\" else None,\n    redoc_url=None,\n    lifespan=lifespan,\n)\noauth_manager = OAuthManager(app)\napp.state.instance_id = None\napp.state.config = AppConfig(",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "oauth_manager",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "oauth_manager = OAuthManager(app)\napp.state.instance_id = None\napp.state.config = AppConfig(\n    redis_url=REDIS_URL,\n    redis_sentinels=get_sentinels_from_env(REDIS_SENTINEL_HOSTS, REDIS_SENTINEL_PORT),\n)\napp.state.redis = None\napp.state.WEBUI_NAME = WEBUI_NAME\napp.state.LICENSE_METADATA = None\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.instance_id",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.instance_id = None\napp.state.config = AppConfig(\n    redis_url=REDIS_URL,\n    redis_sentinels=get_sentinels_from_env(REDIS_SENTINEL_HOSTS, REDIS_SENTINEL_PORT),\n)\napp.state.redis = None\napp.state.WEBUI_NAME = WEBUI_NAME\napp.state.LICENSE_METADATA = None\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config = AppConfig(\n    redis_url=REDIS_URL,\n    redis_sentinels=get_sentinels_from_env(REDIS_SENTINEL_HOSTS, REDIS_SENTINEL_PORT),\n)\napp.state.redis = None\napp.state.WEBUI_NAME = WEBUI_NAME\napp.state.LICENSE_METADATA = None\n########################################\n#\n# OPENTELEMETRY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.redis",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.redis = None\napp.state.WEBUI_NAME = WEBUI_NAME\napp.state.LICENSE_METADATA = None\n########################################\n#\n# OPENTELEMETRY\n#\n########################################\nif ENABLE_OTEL:\n    from open_webui.utils.telemetry.setup import setup as setup_opentelemetry",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.WEBUI_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.WEBUI_NAME = WEBUI_NAME\napp.state.LICENSE_METADATA = None\n########################################\n#\n# OPENTELEMETRY\n#\n########################################\nif ENABLE_OTEL:\n    from open_webui.utils.telemetry.setup import setup as setup_opentelemetry\n    setup_opentelemetry(app=app, db_engine=engine)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.LICENSE_METADATA",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.LICENSE_METADATA = None\n########################################\n#\n# OPENTELEMETRY\n#\n########################################\nif ENABLE_OTEL:\n    from open_webui.utils.telemetry.setup import setup as setup_opentelemetry\n    setup_opentelemetry(app=app, db_engine=engine)\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_OLLAMA_API",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_OLLAMA_API = ENABLE_OLLAMA_API\napp.state.config.OLLAMA_BASE_URLS = OLLAMA_BASE_URLS\napp.state.config.OLLAMA_API_CONFIGS = OLLAMA_API_CONFIGS\napp.state.OLLAMA_MODELS = {}\n########################################\n#\n# OPENAI\n#\n########################################\napp.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OLLAMA_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OLLAMA_BASE_URLS = OLLAMA_BASE_URLS\napp.state.config.OLLAMA_API_CONFIGS = OLLAMA_API_CONFIGS\napp.state.OLLAMA_MODELS = {}\n########################################\n#\n# OPENAI\n#\n########################################\napp.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API\napp.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OLLAMA_API_CONFIGS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OLLAMA_API_CONFIGS = OLLAMA_API_CONFIGS\napp.state.OLLAMA_MODELS = {}\n########################################\n#\n# OPENAI\n#\n########################################\napp.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API\napp.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS\napp.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.OLLAMA_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.OLLAMA_MODELS = {}\n########################################\n#\n# OPENAI\n#\n########################################\napp.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API\napp.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS\napp.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS\napp.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_OPENAI_API",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_OPENAI_API = ENABLE_OPENAI_API\napp.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS\napp.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS\napp.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS\napp.state.OPENAI_MODELS = {}\n########################################\n#\n# TOOL SERVERS\n#\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OPENAI_API_BASE_URLS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS\napp.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS\napp.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS\napp.state.OPENAI_MODELS = {}\n########################################\n#\n# TOOL SERVERS\n#\n########################################\napp.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OPENAI_API_KEYS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OPENAI_API_KEYS = OPENAI_API_KEYS\napp.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS\napp.state.OPENAI_MODELS = {}\n########################################\n#\n# TOOL SERVERS\n#\n########################################\napp.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS\napp.state.TOOL_SERVERS = []",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OPENAI_API_CONFIGS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OPENAI_API_CONFIGS = OPENAI_API_CONFIGS\napp.state.OPENAI_MODELS = {}\n########################################\n#\n# TOOL SERVERS\n#\n########################################\napp.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS\napp.state.TOOL_SERVERS = []\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.OPENAI_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.OPENAI_MODELS = {}\n########################################\n#\n# TOOL SERVERS\n#\n########################################\napp.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS\napp.state.TOOL_SERVERS = []\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TOOL_SERVER_CONNECTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS\napp.state.TOOL_SERVERS = []\n########################################\n#\n# DIRECT CONNECTIONS\n#\n########################################\napp.state.config.ENABLE_DIRECT_CONNECTIONS = ENABLE_DIRECT_CONNECTIONS\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.TOOL_SERVERS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.TOOL_SERVERS = []\n########################################\n#\n# DIRECT CONNECTIONS\n#\n########################################\napp.state.config.ENABLE_DIRECT_CONNECTIONS = ENABLE_DIRECT_CONNECTIONS\n########################################\n#\n# WEBUI",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_DIRECT_CONNECTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_DIRECT_CONNECTIONS = ENABLE_DIRECT_CONNECTIONS\n########################################\n#\n# WEBUI\n#\n########################################\napp.state.config.WEBUI_URL = WEBUI_URL\napp.state.config.ENABLE_SIGNUP = ENABLE_SIGNUP\napp.state.config.ENABLE_LOGIN_FORM = ENABLE_LOGIN_FORM\napp.state.config.ENABLE_API_KEY = ENABLE_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEBUI_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEBUI_URL = WEBUI_URL\napp.state.config.ENABLE_SIGNUP = ENABLE_SIGNUP\napp.state.config.ENABLE_LOGIN_FORM = ENABLE_LOGIN_FORM\napp.state.config.ENABLE_API_KEY = ENABLE_API_KEY\napp.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\n)\napp.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_SIGNUP",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_SIGNUP = ENABLE_SIGNUP\napp.state.config.ENABLE_LOGIN_FORM = ENABLE_LOGIN_FORM\napp.state.config.ENABLE_API_KEY = ENABLE_API_KEY\napp.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\n)\napp.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_LOGIN_FORM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_LOGIN_FORM = ENABLE_LOGIN_FORM\napp.state.config.ENABLE_API_KEY = ENABLE_API_KEY\napp.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\n)\napp.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_API_KEY = ENABLE_API_KEY\napp.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\n)\napp.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = (\n    ENABLE_API_KEY_ENDPOINT_RESTRICTIONS\n)\napp.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.API_KEY_ALLOWED_ENDPOINTS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.API_KEY_ALLOWED_ENDPOINTS = API_KEY_ALLOWED_ENDPOINTS\napp.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.JWT_EXPIRES_IN",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.JWT_EXPIRES_IN = JWT_EXPIRES_IN\napp.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SHOW_ADMIN_DETAILS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SHOW_ADMIN_DETAILS = SHOW_ADMIN_DETAILS\napp.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ADMIN_EMAIL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ADMIN_EMAIL = ADMIN_EMAIL\napp.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DEFAULT_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DEFAULT_MODELS = DEFAULT_MODELS\napp.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DEFAULT_PROMPT_SUGGESTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DEFAULT_PROMPT_SUGGESTIONS = DEFAULT_PROMPT_SUGGESTIONS\napp.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DEFAULT_USER_ROLE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DEFAULT_USER_ROLE = DEFAULT_USER_ROLE\napp.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PENDING_USER_OVERLAY_CONTENT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PENDING_USER_OVERLAY_CONTENT = PENDING_USER_OVERLAY_CONTENT\napp.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PENDING_USER_OVERLAY_TITLE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PENDING_USER_OVERLAY_TITLE = PENDING_USER_OVERLAY_TITLE\napp.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RESPONSE_WATERMARK",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RESPONSE_WATERMARK = RESPONSE_WATERMARK\napp.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.USER_PERMISSIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.USER_PERMISSIONS = USER_PERMISSIONS\napp.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEBHOOK_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEBHOOK_URL = WEBHOOK_URL\napp.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BANNERS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BANNERS = WEBUI_BANNERS\napp.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.MODEL_ORDER_LIST",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.MODEL_ORDER_LIST = MODEL_ORDER_LIST\napp.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_CHANNELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_CHANNELS = ENABLE_CHANNELS\napp.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_NOTES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_NOTES = ENABLE_NOTES\napp.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_COMMUNITY_SHARING",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_COMMUNITY_SHARING = ENABLE_COMMUNITY_SHARING\napp.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_MESSAGE_RATING",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_MESSAGE_RATING = ENABLE_MESSAGE_RATING\napp.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_USER_WEBHOOKS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_USER_WEBHOOKS = ENABLE_USER_WEBHOOKS\napp.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_EVALUATION_ARENA_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_EVALUATION_ARENA_MODELS = ENABLE_EVALUATION_ARENA_MODELS\napp.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EVALUATION_ARENA_MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EVALUATION_ARENA_MODELS = EVALUATION_ARENA_MODELS\napp.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_USERNAME_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_USERNAME_CLAIM = OAUTH_USERNAME_CLAIM\napp.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_PICTURE_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_PICTURE_CLAIM = OAUTH_PICTURE_CLAIM\napp.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_EMAIL_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_EMAIL_CLAIM = OAUTH_EMAIL_CLAIM\napp.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_OAUTH_ROLE_MANAGEMENT = ENABLE_OAUTH_ROLE_MANAGEMENT\napp.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_ROLES_CLAIM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_ROLES_CLAIM = OAUTH_ROLES_CLAIM\napp.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_ALLOWED_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_ALLOWED_ROLES = OAUTH_ALLOWED_ROLES\napp.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.OAUTH_ADMIN_ROLES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.OAUTH_ADMIN_ROLES = OAUTH_ADMIN_ROLES\napp.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_LDAP",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_LDAP = ENABLE_LDAP\napp.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_SERVER_LABEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_SERVER_LABEL = LDAP_SERVER_LABEL\napp.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_SERVER_HOST",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_SERVER_HOST = LDAP_SERVER_HOST\napp.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_SERVER_PORT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_SERVER_PORT = LDAP_SERVER_PORT\napp.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_ATTRIBUTE_FOR_MAIL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_ATTRIBUTE_FOR_MAIL = LDAP_ATTRIBUTE_FOR_MAIL\napp.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_ATTRIBUTE_FOR_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_ATTRIBUTE_FOR_USERNAME = LDAP_ATTRIBUTE_FOR_USERNAME\napp.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_APP_DN",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_APP_DN = LDAP_APP_DN\napp.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_APP_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_APP_PASSWORD = LDAP_APP_PASSWORD\napp.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_SEARCH_BASE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_SEARCH_BASE = LDAP_SEARCH_BASE\napp.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_SEARCH_FILTERS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_SEARCH_FILTERS = LDAP_SEARCH_FILTERS\napp.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_USE_TLS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_USE_TLS = LDAP_USE_TLS\napp.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_CA_CERT_FILE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_CA_CERT_FILE = LDAP_CA_CERT_FILE\napp.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_VALIDATE_CERT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_VALIDATE_CERT = LDAP_VALIDATE_CERT\napp.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.LDAP_CIPHERS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.LDAP_CIPHERS = LDAP_CIPHERS\napp.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.AUTH_TRUSTED_EMAIL_HEADER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER\napp.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.AUTH_TRUSTED_NAME_HEADER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER\napp.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.WEBUI_AUTH_SIGNOUT_REDIRECT_URL = WEBUI_AUTH_SIGNOUT_REDIRECT_URL\napp.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.EXTERNAL_PWA_MANIFEST_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.EXTERNAL_PWA_MANIFEST_URL = EXTERNAL_PWA_MANIFEST_URL\napp.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.USER_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.USER_COUNT = None\napp.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.TOOLS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.TOOLS = {}\napp.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#\n########################################\napp.state.config.TOP_K = RAG_TOP_K",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.TOOL_CONTENTS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.TOOL_CONTENTS = {}\napp.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#\n########################################\napp.state.config.TOP_K = RAG_TOP_K\napp.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.FUNCTIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.FUNCTIONS = {}\napp.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#\n########################################\napp.state.config.TOP_K = RAG_TOP_K\napp.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER\napp.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.FUNCTION_CONTENTS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.FUNCTION_CONTENTS = {}\n########################################\n#\n# RETRIEVAL\n#\n########################################\napp.state.config.TOP_K = RAG_TOP_K\napp.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER\napp.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD\napp.state.config.HYBRID_BM25_WEIGHT = RAG_HYBRID_BM25_WEIGHT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TOP_K",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TOP_K = RAG_TOP_K\napp.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER\napp.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD\napp.state.config.HYBRID_BM25_WEIGHT = RAG_HYBRID_BM25_WEIGHT\napp.state.config.ALLOWED_FILE_EXTENSIONS = RAG_ALLOWED_FILE_EXTENSIONS\napp.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TOP_K_RERANKER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TOP_K_RERANKER = RAG_TOP_K_RERANKER\napp.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD\napp.state.config.HYBRID_BM25_WEIGHT = RAG_HYBRID_BM25_WEIGHT\napp.state.config.ALLOWED_FILE_EXTENSIONS = RAG_ALLOWED_FILE_EXTENSIONS\napp.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RELEVANCE_THRESHOLD",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RELEVANCE_THRESHOLD = RAG_RELEVANCE_THRESHOLD\napp.state.config.HYBRID_BM25_WEIGHT = RAG_HYBRID_BM25_WEIGHT\napp.state.config.ALLOWED_FILE_EXTENSIONS = RAG_ALLOWED_FILE_EXTENSIONS\napp.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.HYBRID_BM25_WEIGHT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.HYBRID_BM25_WEIGHT = RAG_HYBRID_BM25_WEIGHT\napp.state.config.ALLOWED_FILE_EXTENSIONS = RAG_ALLOWED_FILE_EXTENSIONS\napp.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ALLOWED_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ALLOWED_FILE_EXTENSIONS = RAG_ALLOWED_FILE_EXTENSIONS\napp.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.FILE_MAX_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.FILE_MAX_SIZE = RAG_FILE_MAX_SIZE\napp.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.FILE_MAX_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.FILE_MAX_COUNT = RAG_FILE_MAX_COUNT\napp.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_FULL_CONTEXT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT\napp.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL\napp.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_RAG_HYBRID_SEARCH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH\napp.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_WEB_LOADER_SSL_VERIFICATION = ENABLE_WEB_LOADER_SSL_VERIFICATION\napp.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CONTENT_EXTRACTION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CONTENT_EXTRACTION_ENGINE = CONTENT_EXTRACTION_ENGINE\napp.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_API_KEY = DATALAB_MARKER_API_KEY\napp.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_LANGS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_LANGS = DATALAB_MARKER_LANGS\napp.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_SKIP_CACHE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_SKIP_CACHE = DATALAB_MARKER_SKIP_CACHE\napp.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_FORCE_OCR",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_FORCE_OCR = DATALAB_MARKER_FORCE_OCR\napp.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_PAGINATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_PAGINATE = DATALAB_MARKER_PAGINATE\napp.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_STRIP_EXISTING_OCR = DATALAB_MARKER_STRIP_EXISTING_OCR\napp.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION = (\n    DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION\n)\napp.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_USE_LLM",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_USE_LLM = DATALAB_MARKER_USE_LLM\napp.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DATALAB_MARKER_OUTPUT_FORMAT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DATALAB_MARKER_OUTPUT_FORMAT = DATALAB_MARKER_OUTPUT_FORMAT\napp.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_DOCUMENT_LOADER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_DOCUMENT_LOADER_URL = EXTERNAL_DOCUMENT_LOADER_URL\napp.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_DOCUMENT_LOADER_API_KEY = EXTERNAL_DOCUMENT_LOADER_API_KEY\napp.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TIKA_SERVER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TIKA_SERVER_URL = TIKA_SERVER_URL\napp.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_SERVER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_SERVER_URL = DOCLING_SERVER_URL\napp.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_OCR_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_OCR_ENGINE = DOCLING_OCR_ENGINE\napp.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_OCR_LANG",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_OCR_LANG = DOCLING_OCR_LANG\napp.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_DO_PICTURE_DESCRIPTION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_DO_PICTURE_DESCRIPTION = DOCLING_DO_PICTURE_DESCRIPTION\napp.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_PICTURE_DESCRIPTION_MODE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_PICTURE_DESCRIPTION_MODE = DOCLING_PICTURE_DESCRIPTION_MODE\napp.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_PICTURE_DESCRIPTION_LOCAL = DOCLING_PICTURE_DESCRIPTION_LOCAL\napp.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCLING_PICTURE_DESCRIPTION_API",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCLING_PICTURE_DESCRIPTION_API = DOCLING_PICTURE_DESCRIPTION_API\napp.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCUMENT_INTELLIGENCE_ENDPOINT = DOCUMENT_INTELLIGENCE_ENDPOINT\napp.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DOCUMENT_INTELLIGENCE_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DOCUMENT_INTELLIGENCE_KEY = DOCUMENT_INTELLIGENCE_KEY\napp.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.MISTRAL_OCR_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.MISTRAL_OCR_API_KEY = MISTRAL_OCR_API_KEY\napp.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TEXT_SPLITTER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TEXT_SPLITTER = RAG_TEXT_SPLITTER\napp.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TIKTOKEN_ENCODING_NAME",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TIKTOKEN_ENCODING_NAME = TIKTOKEN_ENCODING_NAME\napp.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CHUNK_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CHUNK_SIZE = CHUNK_SIZE\napp.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CHUNK_OVERLAP",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CHUNK_OVERLAP = CHUNK_OVERLAP\napp.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_EMBEDDING_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_EMBEDDING_ENGINE = RAG_EMBEDDING_ENGINE\napp.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_EMBEDDING_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_EMBEDDING_MODEL = RAG_EMBEDDING_MODEL\napp.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_EMBEDDING_BATCH_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_EMBEDDING_BATCH_SIZE = RAG_EMBEDDING_BATCH_SIZE\napp.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_RERANKING_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_RERANKING_ENGINE = RAG_RERANKING_ENGINE\napp.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_RERANKING_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_RERANKING_MODEL = RAG_RERANKING_MODEL\napp.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_EXTERNAL_RERANKER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_EXTERNAL_RERANKER_URL = RAG_EXTERNAL_RERANKER_URL\napp.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_EXTERNAL_RERANKER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_EXTERNAL_RERANKER_API_KEY = RAG_EXTERNAL_RERANKER_API_KEY\napp.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_TEMPLATE = RAG_TEMPLATE\napp.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_OPENAI_API_BASE_URL = RAG_OPENAI_API_BASE_URL\napp.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_OPENAI_API_KEY = RAG_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_AZURE_OPENAI_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_AZURE_OPENAI_BASE_URL = RAG_AZURE_OPENAI_BASE_URL\napp.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_AZURE_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_AZURE_OPENAI_API_KEY = RAG_AZURE_OPENAI_API_KEY\napp.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_AZURE_OPENAI_API_VERSION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_AZURE_OPENAI_API_VERSION = RAG_AZURE_OPENAI_API_VERSION\napp.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_OLLAMA_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_OLLAMA_BASE_URL = RAG_OLLAMA_BASE_URL\napp.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.RAG_OLLAMA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.RAG_OLLAMA_API_KEY = RAG_OLLAMA_API_KEY\napp.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PDF_EXTRACT_IMAGES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PDF_EXTRACT_IMAGES = PDF_EXTRACT_IMAGES\napp.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.YOUTUBE_LOADER_LANGUAGE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.YOUTUBE_LOADER_LANGUAGE = YOUTUBE_LOADER_LANGUAGE\napp.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.YOUTUBE_LOADER_PROXY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.YOUTUBE_LOADER_PROXY_URL = YOUTUBE_LOADER_PROXY_URL\napp.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_WEB_SEARCH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_WEB_SEARCH = ENABLE_WEB_SEARCH\napp.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_SEARCH_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_SEARCH_ENGINE = WEB_SEARCH_ENGINE\napp.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_SEARCH_DOMAIN_FILTER_LIST = WEB_SEARCH_DOMAIN_FILTER_LIST\napp.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_SEARCH_RESULT_COUNT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_SEARCH_RESULT_COUNT = WEB_SEARCH_RESULT_COUNT\napp.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_SEARCH_CONCURRENT_REQUESTS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_SEARCH_CONCURRENT_REQUESTS = WEB_SEARCH_CONCURRENT_REQUESTS\napp.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_LOADER_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_LOADER_ENGINE = WEB_LOADER_ENGINE\napp.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WEB_SEARCH_TRUST_ENV",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WEB_SEARCH_TRUST_ENV = WEB_SEARCH_TRUST_ENV\napp.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (\n    BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\n)\napp.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BYPASS_WEB_SEARCH_WEB_LOADER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BYPASS_WEB_SEARCH_WEB_LOADER = BYPASS_WEB_SEARCH_WEB_LOADER\napp.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION\napp.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_ONEDRIVE_INTEGRATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_ONEDRIVE_INTEGRATION = ENABLE_ONEDRIVE_INTEGRATION\napp.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SEARXNG_QUERY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SEARXNG_QUERY_URL = SEARXNG_QUERY_URL\napp.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.YACY_QUERY_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.YACY_QUERY_URL = YACY_QUERY_URL\napp.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.YACY_USERNAME",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.YACY_USERNAME = YACY_USERNAME\napp.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.YACY_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.YACY_PASSWORD = YACY_PASSWORD\napp.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.GOOGLE_PSE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.GOOGLE_PSE_API_KEY = GOOGLE_PSE_API_KEY\napp.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.GOOGLE_PSE_ENGINE_ID",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.GOOGLE_PSE_ENGINE_ID = GOOGLE_PSE_ENGINE_ID\napp.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BRAVE_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BRAVE_SEARCH_API_KEY = BRAVE_SEARCH_API_KEY\napp.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.KAGI_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.KAGI_SEARCH_API_KEY = KAGI_SEARCH_API_KEY\napp.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.MOJEEK_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.MOJEEK_SEARCH_API_KEY = MOJEEK_SEARCH_API_KEY\napp.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BOCHA_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BOCHA_SEARCH_API_KEY = BOCHA_SEARCH_API_KEY\napp.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPSTACK_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPSTACK_API_KEY = SERPSTACK_API_KEY\napp.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPSTACK_HTTPS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPSTACK_HTTPS = SERPSTACK_HTTPS\napp.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPER_API_KEY = SERPER_API_KEY\napp.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPLY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPLY_API_KEY = SERPLY_API_KEY\napp.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TAVILY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TAVILY_API_KEY = TAVILY_API_KEY\napp.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SEARCHAPI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SEARCHAPI_API_KEY = SEARCHAPI_API_KEY\napp.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SEARCHAPI_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SEARCHAPI_ENGINE = SEARCHAPI_ENGINE\napp.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPAPI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPAPI_API_KEY = SERPAPI_API_KEY\napp.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SERPAPI_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SERPAPI_ENGINE = SERPAPI_ENGINE\napp.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.JINA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.JINA_API_KEY = JINA_API_KEY\napp.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BING_SEARCH_V7_ENDPOINT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BING_SEARCH_V7_ENDPOINT = BING_SEARCH_V7_ENDPOINT\napp.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY = BING_SEARCH_V7_SUBSCRIPTION_KEY\napp.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXA_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXA_API_KEY = EXA_API_KEY\napp.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PERPLEXITY_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PERPLEXITY_API_KEY = PERPLEXITY_API_KEY\napp.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PERPLEXITY_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PERPLEXITY_MODEL = PERPLEXITY_MODEL\napp.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PERPLEXITY_SEARCH_CONTEXT_USAGE = PERPLEXITY_SEARCH_CONTEXT_USAGE\napp.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SOUGOU_API_SID",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SOUGOU_API_SID = SOUGOU_API_SID\napp.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.SOUGOU_API_SK",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.SOUGOU_API_SK = SOUGOU_API_SK\napp.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_WEB_SEARCH_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_WEB_SEARCH_URL = EXTERNAL_WEB_SEARCH_URL\napp.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_WEB_SEARCH_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_WEB_SEARCH_API_KEY = EXTERNAL_WEB_SEARCH_API_KEY\napp.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_WEB_LOADER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_WEB_LOADER_URL = EXTERNAL_WEB_LOADER_URL\napp.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.EXTERNAL_WEB_LOADER_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.EXTERNAL_WEB_LOADER_API_KEY = EXTERNAL_WEB_LOADER_API_KEY\napp.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PLAYWRIGHT_WS_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PLAYWRIGHT_WS_URL = PLAYWRIGHT_WS_URL\napp.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.PLAYWRIGHT_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT\napp.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.FIRECRAWL_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL\napp.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.FIRECRAWL_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY\napp.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TAVILY_EXTRACT_DEPTH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH\napp.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,\n        RAG_EMBEDDING_MODEL_AUTO_UPDATE,",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.EMBEDDING_FUNCTION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.EMBEDDING_FUNCTION = None\napp.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,\n        RAG_EMBEDDING_MODEL_AUTO_UPDATE,\n    )",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.ef",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.ef = None\napp.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,\n        RAG_EMBEDDING_MODEL_AUTO_UPDATE,\n    )\n    app.state.rf = get_rf(",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.rf",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.rf = None\napp.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,\n        RAG_EMBEDDING_MODEL_AUTO_UPDATE,\n    )\n    app.state.rf = get_rf(\n        app.state.config.RAG_RERANKING_ENGINE,",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.YOUTUBE_LOADER_TRANSLATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.YOUTUBE_LOADER_TRANSLATION = None\ntry:\n    app.state.ef = get_ef(\n        app.state.config.RAG_EMBEDDING_ENGINE,\n        app.state.config.RAG_EMBEDDING_MODEL,\n        RAG_EMBEDDING_MODEL_AUTO_UPDATE,\n    )\n    app.state.rf = get_rf(\n        app.state.config.RAG_RERANKING_ENGINE,\n        app.state.config.RAG_RERANKING_MODEL,",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.EMBEDDING_FUNCTION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.EMBEDDING_FUNCTION = get_embedding_function(\n    app.state.config.RAG_EMBEDDING_ENGINE,\n    app.state.config.RAG_EMBEDDING_MODEL,\n    app.state.ef,\n    (\n        app.state.config.RAG_OPENAI_API_BASE_URL\n        if app.state.config.RAG_EMBEDDING_ENGINE == \"openai\"\n        else (\n            app.state.config.RAG_OLLAMA_BASE_URL\n            if app.state.config.RAG_EMBEDDING_ENGINE == \"ollama\"",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_CODE_EXECUTION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_CODE_EXECUTION = ENABLE_CODE_EXECUTION\napp.state.config.CODE_EXECUTION_ENGINE = CODE_EXECUTION_ENGINE\napp.state.config.CODE_EXECUTION_JUPYTER_URL = CODE_EXECUTION_JUPYTER_URL\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH = CODE_EXECUTION_JUPYTER_AUTH\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_ENGINE = CODE_EXECUTION_ENGINE\napp.state.config.CODE_EXECUTION_JUPYTER_URL = CODE_EXECUTION_JUPYTER_URL\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH = CODE_EXECUTION_JUPYTER_AUTH\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_JUPYTER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_JUPYTER_URL = CODE_EXECUTION_JUPYTER_URL\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH = CODE_EXECUTION_JUPYTER_AUTH\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH = CODE_EXECUTION_JUPYTER_AUTH\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH_TOKEN = CODE_EXECUTION_JUPYTER_AUTH_TOKEN\napp.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_JUPYTER_AUTH_PASSWORD = (\n    CODE_EXECUTION_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_EXECUTION_JUPYTER_TIMEOUT = CODE_EXECUTION_JUPYTER_TIMEOUT\napp.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_CODE_INTERPRETER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_CODE_INTERPRETER = ENABLE_CODE_INTERPRETER\napp.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_ENGINE = CODE_INTERPRETER_ENGINE\napp.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_PROMPT_TEMPLATE = CODE_INTERPRETER_PROMPT_TEMPLATE\napp.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_JUPYTER_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_JUPYTER_URL = CODE_INTERPRETER_JUPYTER_URL\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH = CODE_INTERPRETER_JUPYTER_AUTH\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN = (\n    CODE_INTERPRETER_JUPYTER_AUTH_TOKEN\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT\n########################################\n#\n# IMAGES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD = (\n    CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD\n)\napp.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT\n########################################\n#\n# IMAGES\n#\n########################################\napp.state.config.IMAGE_GENERATION_ENGINE = IMAGE_GENERATION_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.CODE_INTERPRETER_JUPYTER_TIMEOUT = CODE_INTERPRETER_JUPYTER_TIMEOUT\n########################################\n#\n# IMAGES\n#\n########################################\napp.state.config.IMAGE_GENERATION_ENGINE = IMAGE_GENERATION_ENGINE\napp.state.config.ENABLE_IMAGE_GENERATION = ENABLE_IMAGE_GENERATION\napp.state.config.ENABLE_IMAGE_PROMPT_GENERATION = ENABLE_IMAGE_PROMPT_GENERATION\napp.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGE_GENERATION_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGE_GENERATION_ENGINE = IMAGE_GENERATION_ENGINE\napp.state.config.ENABLE_IMAGE_GENERATION = ENABLE_IMAGE_GENERATION\napp.state.config.ENABLE_IMAGE_PROMPT_GENERATION = ENABLE_IMAGE_PROMPT_GENERATION\napp.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL\napp.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY\napp.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_IMAGE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_IMAGE_GENERATION = ENABLE_IMAGE_GENERATION\napp.state.config.ENABLE_IMAGE_PROMPT_GENERATION = ENABLE_IMAGE_PROMPT_GENERATION\napp.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL\napp.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY\napp.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_IMAGE_PROMPT_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_IMAGE_PROMPT_GENERATION = ENABLE_IMAGE_PROMPT_GENERATION\napp.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL\napp.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY\napp.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGES_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGES_OPENAI_API_BASE_URL = IMAGES_OPENAI_API_BASE_URL\napp.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY\napp.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGES_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGES_OPENAI_API_KEY = IMAGES_OPENAI_API_KEY\napp.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGES_GEMINI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGES_GEMINI_API_BASE_URL = IMAGES_GEMINI_API_BASE_URL\napp.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGES_GEMINI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGES_GEMINI_API_KEY = IMAGES_GEMINI_API_KEY\napp.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGE_GENERATION_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGE_GENERATION_MODEL = IMAGE_GENERATION_MODEL\napp.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOMATIC1111_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOMATIC1111_BASE_URL = AUTOMATIC1111_BASE_URL\napp.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOMATIC1111_API_AUTH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOMATIC1111_API_AUTH = AUTOMATIC1111_API_AUTH\napp.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOMATIC1111_CFG_SCALE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOMATIC1111_CFG_SCALE = AUTOMATIC1111_CFG_SCALE\napp.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOMATIC1111_SAMPLER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOMATIC1111_SAMPLER = AUTOMATIC1111_SAMPLER\napp.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOMATIC1111_SCHEDULER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOMATIC1111_SCHEDULER = AUTOMATIC1111_SCHEDULER\napp.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.COMFYUI_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.COMFYUI_BASE_URL = COMFYUI_BASE_URL\napp.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.COMFYUI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.COMFYUI_API_KEY = COMFYUI_API_KEY\napp.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.COMFYUI_WORKFLOW",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.COMFYUI_WORKFLOW = COMFYUI_WORKFLOW\napp.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#\n########################################\napp.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.COMFYUI_WORKFLOW_NODES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.COMFYUI_WORKFLOW_NODES = COMFYUI_WORKFLOW_NODES\napp.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#\n########################################\napp.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL\napp.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGE_SIZE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGE_SIZE = IMAGE_SIZE\napp.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#\n########################################\napp.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL\napp.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY\napp.state.config.STT_ENGINE = AUDIO_STT_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGE_STEPS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGE_STEPS = IMAGE_STEPS\n########################################\n#\n# AUDIO\n#\n########################################\napp.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL\napp.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY\napp.state.config.STT_ENGINE = AUDIO_STT_ENGINE\napp.state.config.STT_MODEL = AUDIO_STT_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.STT_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.STT_OPENAI_API_BASE_URL = AUDIO_STT_OPENAI_API_BASE_URL\napp.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY\napp.state.config.STT_ENGINE = AUDIO_STT_ENGINE\napp.state.config.STT_MODEL = AUDIO_STT_MODEL\napp.state.config.WHISPER_MODEL = WHISPER_MODEL\napp.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.STT_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.STT_OPENAI_API_KEY = AUDIO_STT_OPENAI_API_KEY\napp.state.config.STT_ENGINE = AUDIO_STT_ENGINE\napp.state.config.STT_MODEL = AUDIO_STT_MODEL\napp.state.config.WHISPER_MODEL = WHISPER_MODEL\napp.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.STT_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.STT_ENGINE = AUDIO_STT_ENGINE\napp.state.config.STT_MODEL = AUDIO_STT_MODEL\napp.state.config.WHISPER_MODEL = WHISPER_MODEL\napp.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.STT_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.STT_MODEL = AUDIO_STT_MODEL\napp.state.config.WHISPER_MODEL = WHISPER_MODEL\napp.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WHISPER_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WHISPER_MODEL = WHISPER_MODEL\napp.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.WHISPER_VAD_FILTER",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.WHISPER_VAD_FILTER = WHISPER_VAD_FILTER\napp.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.DEEPGRAM_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.DEEPGRAM_API_KEY = DEEPGRAM_API_KEY\napp.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUDIO_STT_AZURE_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUDIO_STT_AZURE_API_KEY = AUDIO_STT_AZURE_API_KEY\napp.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUDIO_STT_AZURE_REGION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUDIO_STT_AZURE_REGION = AUDIO_STT_AZURE_REGION\napp.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUDIO_STT_AZURE_LOCALES",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUDIO_STT_AZURE_LOCALES = AUDIO_STT_AZURE_LOCALES\napp.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUDIO_STT_AZURE_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUDIO_STT_AZURE_BASE_URL = AUDIO_STT_AZURE_BASE_URL\napp.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUDIO_STT_AZURE_MAX_SPEAKERS = AUDIO_STT_AZURE_MAX_SPEAKERS\napp.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_OPENAI_API_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_OPENAI_API_BASE_URL = AUDIO_TTS_OPENAI_API_BASE_URL\napp.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_OPENAI_API_KEY = AUDIO_TTS_OPENAI_API_KEY\napp.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_ENGINE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_ENGINE = AUDIO_TTS_ENGINE\napp.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_MODEL = AUDIO_TTS_MODEL\napp.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_VOICE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_VOICE = AUDIO_TTS_VOICE\napp.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_API_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_API_KEY = AUDIO_TTS_API_KEY\napp.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_SPLIT_ON",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_SPLIT_ON = AUDIO_TTS_SPLIT_ON\napp.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_AZURE_SPEECH_REGION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_AZURE_SPEECH_REGION = AUDIO_TTS_AZURE_SPEECH_REGION\napp.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_AZURE_SPEECH_BASE_URL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_AZURE_SPEECH_BASE_URL = AUDIO_TTS_AZURE_SPEECH_BASE_URL\napp.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#\n########################################",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TTS_AZURE_SPEECH_OUTPUT_FORMAT = AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT\napp.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#\n########################################\napp.state.config.TASK_MODEL = TASK_MODEL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.faster_whisper_model",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.faster_whisper_model = None\napp.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#\n########################################\napp.state.config.TASK_MODEL = TASK_MODEL\napp.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.speech_synthesiser",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.speech_synthesiser = None\napp.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#\n########################################\napp.state.config.TASK_MODEL = TASK_MODEL\napp.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL\napp.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.speech_speaker_embeddings_dataset",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.speech_speaker_embeddings_dataset = None\n########################################\n#\n# TASKS\n#\n########################################\napp.state.config.TASK_MODEL = TASK_MODEL\napp.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL\napp.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION\napp.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TASK_MODEL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TASK_MODEL = TASK_MODEL\napp.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL\napp.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION\napp.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION\napp.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION\napp.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TASK_MODEL_EXTERNAL",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TASK_MODEL_EXTERNAL = TASK_MODEL_EXTERNAL\napp.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION\napp.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION\napp.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION\napp.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_SEARCH_QUERY_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_SEARCH_QUERY_GENERATION = ENABLE_SEARCH_QUERY_GENERATION\napp.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION\napp.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION\napp.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_RETRIEVAL_QUERY_GENERATION = ENABLE_RETRIEVAL_QUERY_GENERATION\napp.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION\napp.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_AUTOCOMPLETE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_AUTOCOMPLETE_GENERATION = ENABLE_AUTOCOMPLETE_GENERATION\napp.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_TAGS_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_TAGS_GENERATION = ENABLE_TAGS_GENERATION\napp.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_TITLE_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_TITLE_GENERATION = ENABLE_TITLE_GENERATION\napp.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.ENABLE_FOLLOW_UP_GENERATION",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.ENABLE_FOLLOW_UP_GENERATION = ENABLE_FOLLOW_UP_GENERATION\napp.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TITLE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TITLE_GENERATION_PROMPT_TEMPLATE = TITLE_GENERATION_PROMPT_TEMPLATE\napp.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (\n    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TAGS_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TAGS_GENERATION_PROMPT_TEMPLATE = TAGS_GENERATION_PROMPT_TEMPLATE\napp.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (\n    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE = (\n    IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (\n    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\n)\napp.state.config.QUERY_GENERATION_PROMPT_TEMPLATE = QUERY_GENERATION_PROMPT_TEMPLATE",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.FOLLOW_UP_GENERATION_PROMPT_TEMPLATE = (\n    FOLLOW_UP_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (\n    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\n)\napp.state.config.QUERY_GENERATION_PROMPT_TEMPLATE = QUERY_GENERATION_PROMPT_TEMPLATE\napp.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = (\n    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE = (\n    TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE\n)\napp.state.config.QUERY_GENERATION_PROMPT_TEMPLATE = QUERY_GENERATION_PROMPT_TEMPLATE\napp.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = (\n    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = (\n    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\n)",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.QUERY_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.QUERY_GENERATION_PROMPT_TEMPLATE = QUERY_GENERATION_PROMPT_TEMPLATE\napp.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = (\n    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = (\n    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\n)\n########################################\n#\n# WEBUI",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE = (\n    AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE\n)\napp.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = (\n    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\n)\n########################################\n#\n# WEBUI\n#",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH = (\n    AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH\n)\n########################################\n#\n# WEBUI\n#\n########################################\napp.state.MODELS = {}\nclass RedirectMiddleware(BaseHTTPMiddleware):",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "app.state.MODELS",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "app.state.MODELS = {}\nclass RedirectMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # Check if the request is a GET request\n        if request.method == \"GET\":\n            path = request.url.path\n            query_params = dict(parse_qs(urlparse(str(request.url)).query))\n            # Check for the specific watch path and the presence of 'v' parameter\n            if path.endswith(\"/watch\") and \"v\" in query_params:\n                # Extract the first 'v' parameter",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "generate_chat_completions",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "generate_chat_completions = chat_completion\ngenerate_chat_completion = chat_completion\n@app.post(\"/api/chat/completed\")\nasync def chat_completed(\n    request: Request, form_data: dict, user=Depends(get_verified_user)\n):\n    try:\n        model_item = form_data.pop(\"model_item\", {})\n        if model_item.get(\"direct\", False):\n            request.state.direct = True",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "generate_chat_completion",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "generate_chat_completion = chat_completion\n@app.post(\"/api/chat/completed\")\nasync def chat_completed(\n    request: Request, form_data: dict, user=Depends(get_verified_user)\n):\n    try:\n        model_item = form_data.pop(\"model_item\", {})\n        if model_item.get(\"direct\", False):\n            request.state.direct = True\n            request.state.model = model_item",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "applications.get_swagger_ui_html",
        "kind": 5,
        "importPath": "backend.open_webui.main",
        "description": "backend.open_webui.main",
        "peekOfCode": "applications.get_swagger_ui_html = swagger_ui_html\nif os.path.exists(FRONTEND_BUILD_DIR):\n    mimetypes.add_type(\"text/javascript\", \".js\")\n    app.mount(\n        \"/\",\n        SPAStaticFiles(directory=FRONTEND_BUILD_DIR, html=True),\n        name=\"spa-static-files\",\n    )\nelse:\n    log.warning(",
        "detail": "backend.open_webui.main",
        "documentation": {}
    },
    {
        "label": "is_redis",
        "kind": 2,
        "importPath": "backend.open_webui.tasks",
        "description": "backend.open_webui.tasks",
        "peekOfCode": "def is_redis(request: Request) -> bool:\n    # Called everywhere a request is available to check Redis\n    return hasattr(request.app.state, \"redis\") and (request.app.state.redis is not None)\nasync def redis_task_command_listener(app):\n    redis: Redis = app.state.redis\n    pubsub = redis.pubsub()\n    await pubsub.subscribe(REDIS_PUBSUB_CHANNEL)\n    async for message in pubsub.listen():\n        if message[\"type\"] != \"message\":\n            continue",
        "detail": "backend.open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "chat_tasks",
        "kind": 5,
        "importPath": "backend.open_webui.tasks",
        "description": "backend.open_webui.tasks",
        "peekOfCode": "chat_tasks = {}\nREDIS_TASKS_KEY = \"open-webui:tasks\"\nREDIS_CHAT_TASKS_KEY = \"open-webui:tasks:chat\"\nREDIS_PUBSUB_CHANNEL = \"open-webui:tasks:commands\"\ndef is_redis(request: Request) -> bool:\n    # Called everywhere a request is available to check Redis\n    return hasattr(request.app.state, \"redis\") and (request.app.state.redis is not None)\nasync def redis_task_command_listener(app):\n    redis: Redis = app.state.redis\n    pubsub = redis.pubsub()",
        "detail": "backend.open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "REDIS_TASKS_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.tasks",
        "description": "backend.open_webui.tasks",
        "peekOfCode": "REDIS_TASKS_KEY = \"open-webui:tasks\"\nREDIS_CHAT_TASKS_KEY = \"open-webui:tasks:chat\"\nREDIS_PUBSUB_CHANNEL = \"open-webui:tasks:commands\"\ndef is_redis(request: Request) -> bool:\n    # Called everywhere a request is available to check Redis\n    return hasattr(request.app.state, \"redis\") and (request.app.state.redis is not None)\nasync def redis_task_command_listener(app):\n    redis: Redis = app.state.redis\n    pubsub = redis.pubsub()\n    await pubsub.subscribe(REDIS_PUBSUB_CHANNEL)",
        "detail": "backend.open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "REDIS_CHAT_TASKS_KEY",
        "kind": 5,
        "importPath": "backend.open_webui.tasks",
        "description": "backend.open_webui.tasks",
        "peekOfCode": "REDIS_CHAT_TASKS_KEY = \"open-webui:tasks:chat\"\nREDIS_PUBSUB_CHANNEL = \"open-webui:tasks:commands\"\ndef is_redis(request: Request) -> bool:\n    # Called everywhere a request is available to check Redis\n    return hasattr(request.app.state, \"redis\") and (request.app.state.redis is not None)\nasync def redis_task_command_listener(app):\n    redis: Redis = app.state.redis\n    pubsub = redis.pubsub()\n    await pubsub.subscribe(REDIS_PUBSUB_CHANNEL)\n    async for message in pubsub.listen():",
        "detail": "backend.open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "REDIS_PUBSUB_CHANNEL",
        "kind": 5,
        "importPath": "backend.open_webui.tasks",
        "description": "backend.open_webui.tasks",
        "peekOfCode": "REDIS_PUBSUB_CHANNEL = \"open-webui:tasks:commands\"\ndef is_redis(request: Request) -> bool:\n    # Called everywhere a request is available to check Redis\n    return hasattr(request.app.state, \"redis\") and (request.app.state.redis is not None)\nasync def redis_task_command_listener(app):\n    redis: Redis = app.state.redis\n    pubsub = redis.pubsub()\n    await pubsub.subscribe(REDIS_PUBSUB_CHANNEL)\n    async for message in pubsub.listen():\n        if message[\"type\"] != \"message\":",
        "detail": "backend.open_webui.tasks",
        "documentation": {}
    },
    {
        "label": "is_text_file",
        "kind": 2,
        "importPath": "contribution_stats",
        "description": "contribution_stats",
        "peekOfCode": "def is_text_file(filepath):\n    # Check for binary file by scanning for null bytes.\n    try:\n        with open(filepath, \"rb\") as f:\n            chunk = f.read(4096)\n        if b\"\\0\" in chunk:\n            return False\n        return True\n    except Exception:\n        return False",
        "detail": "contribution_stats",
        "documentation": {}
    },
    {
        "label": "should_skip_file",
        "kind": 2,
        "importPath": "contribution_stats",
        "description": "contribution_stats",
        "peekOfCode": "def should_skip_file(path):\n    base = os.path.basename(path)\n    # Skip dotfiles and dotdirs\n    if base.startswith(\".\"):\n        return True\n    # Skip config files by extension\n    if base.lower().endswith(CONFIG_FILE_EXTENSIONS):\n        return True\n    return False\ndef get_tracked_files():",
        "detail": "contribution_stats",
        "documentation": {}
    },
    {
        "label": "get_tracked_files",
        "kind": 2,
        "importPath": "contribution_stats",
        "description": "contribution_stats",
        "peekOfCode": "def get_tracked_files():\n    try:\n        output = subprocess.check_output([\"git\", \"ls-files\"], text=True)\n        files = output.strip().split(\"\\n\")\n        files = [f for f in files if f and os.path.isfile(f)]\n        return files\n    except subprocess.CalledProcessError:\n        print(\"Error: Are you in a git repository?\")\n        return []\ndef main():",
        "detail": "contribution_stats",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "contribution_stats",
        "description": "contribution_stats",
        "peekOfCode": "def main():\n    files = get_tracked_files()\n    email_counter = Counter()\n    total_lines = 0\n    for file in files:\n        if should_skip_file(file):\n            continue\n        if not is_text_file(file):\n            continue\n        try:",
        "detail": "contribution_stats",
        "documentation": {}
    },
    {
        "label": "CONFIG_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "contribution_stats",
        "description": "contribution_stats",
        "peekOfCode": "CONFIG_FILE_EXTENSIONS = (\".json\", \".yml\", \".yaml\", \".ini\", \".conf\", \".toml\")\ndef is_text_file(filepath):\n    # Check for binary file by scanning for null bytes.\n    try:\n        with open(filepath, \"rb\") as f:\n            chunk = f.read(4096)\n        if b\"\\0\" in chunk:\n            return False\n        return True\n    except Exception:",
        "detail": "contribution_stats",
        "documentation": {}
    },
    {
        "label": "CustomBuildHook",
        "kind": 6,
        "importPath": "hatch_build",
        "description": "hatch_build",
        "peekOfCode": "class CustomBuildHook(BuildHookInterface):\n    def initialize(self, version, build_data):\n        super().initialize(version, build_data)\n        stderr.write(\">>> Building Open Webui frontend\\n\")\n        npm = shutil.which(\"npm\")\n        if npm is None:\n            raise RuntimeError(\n                \"NodeJS `npm` is required for building Open Webui but it was not found\"\n            )\n        stderr.write(\"### npm install\\n\")",
        "detail": "hatch_build",
        "documentation": {}
    }
]